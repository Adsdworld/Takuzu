
G431_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .startup      00000084  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bootloader   0000069c  08000800  08000800  00010800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00009044  08001000  08001000  00011000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000015b8  0800a048  0800a048  0001a048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800b600  0800b600  000201e0  2**0
                  CONTENTS
  6 .ARM          00000008  0800b600  0800b600  0001b600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800b608  0800b608  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0800b608  0800b608  0001b608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0800b60c  0800b60c  0001b60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001e0  20000000  0800b610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000760  200001e0  0800b7f0  000201e0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000940  0800b7f0  00020940  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002de1a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000527e  00000000  00000000  0004e02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0001af8b  00000000  00000000  000532a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001820  00000000  00000000  0006e238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00001af8  00000000  00000000  0006fa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026b12  00000000  00000000  00071550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002a41d  00000000  00000000  00098062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ed19e  00000000  00000000  000c247f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  001af61d  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00005134  00000000  00000000  001af670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .startup:

080001d8 <Delay_us>:
	.set LOOP_ITERATION_FOR_1US, 56
.section .startup
.global Delay_us
Delay_us:
	/*R0 : duration in us*/
	LDR R1,=LOOP_ITERATION_FOR_1US
 80001d8:	f04f 0138 	mov.w	r1, #56	; 0x38
	MUL R2, R0, R1	/*R2 : nb iteration*/
 80001dc:	fb00 f201 	mul.w	r2, r0, r1

080001e0 <delay_us_loop>:
	delay_us_loop:
		SUBS R2, #1
 80001e0:	3a01      	subs	r2, #1
		BNE delay_us_loop
 80001e2:	d1fd      	bne.n	80001e0 <delay_us_loop>
	BX LR
 80001e4:	4770      	bx	lr
	...

080001e8 <Reset_Handler>:
  ldr   r0, =_estack
 80001e8:	4814      	ldr	r0, [pc, #80]	; (800023c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80001ea:	4685      	mov	sp, r0
  	mov r0, #0		//version of toaster. (0 for student codes, >0 for toaster software!)
 80001ec:	f04f 0000 	mov.w	r0, #0
 	bl bootloader			/* Pour activer le bootloader : dï¿½commenter cette ligne */
 80001f0:	f000 fb06 	bl	8000800 <bootloader>
    bl  SystemInit
 80001f4:	f002 fc5a 	bl	8002aac <SystemInit>
  ldr r0, =_sdata
 80001f8:	4811      	ldr	r0, [pc, #68]	; (8000240 <LoopForever+0x8>)
  ldr r1, =_edata
 80001fa:	4912      	ldr	r1, [pc, #72]	; (8000244 <LoopForever+0xc>)
  ldr r2, =_sidata
 80001fc:	4a12      	ldr	r2, [pc, #72]	; (8000248 <LoopForever+0x10>)
  movs r3, #0
 80001fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000200:	e002      	b.n	8000208 <LoopCopyDataInit>

08000202 <CopyDataInit>:
  ldr r4, [r2, r3]
 8000202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000206:	3304      	adds	r3, #4

08000208 <LoopCopyDataInit>:
  adds r4, r0, r3
 8000208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800020a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800020c:	d3f9      	bcc.n	8000202 <CopyDataInit>
  ldr r2, =_sbss
 800020e:	4a0f      	ldr	r2, [pc, #60]	; (800024c <LoopForever+0x14>)
  ldr r4, =_ebss
 8000210:	4c0f      	ldr	r4, [pc, #60]	; (8000250 <LoopForever+0x18>)
  movs r3, #0
 8000212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000214:	e001      	b.n	800021a <LoopFillZerobss>

08000216 <FillZerobss>:
  str  r3, [r2]
 8000216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000218:	3204      	adds	r2, #4

0800021a <LoopFillZerobss>:
  cmp r2, r4
 800021a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800021c:	d3fb      	bcc.n	8000216 <FillZerobss>
    bl __libc_init_array
 800021e:	f006 fdff 	bl	8006e20 <__libc_init_array>
    ldr r3, =0x55555555
 8000222:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
  sub ip, sp, #4
 8000226:	f1ad 0c04 	sub.w	ip, sp, #4
  ldr r2, = __Stack_Init
 800022a:	4a0a      	ldr	r2, [pc, #40]	; (8000254 <LoopForever+0x1c>)

0800022c <LoopPaintStack>:
	str r3, [ip], #-4
 800022c:	f84c 3904 	str.w	r3, [ip], #-4
	cmp ip, r2
 8000230:	4594      	cmp	ip, r2
	bne LoopPaintStack
 8000232:	d1fb      	bne.n	800022c <LoopPaintStack>
	bl	main
 8000234:	f002 f8a2 	bl	800237c <main>

08000238 <LoopForever>:
    b LoopForever
 8000238:	e7fe      	b.n	8000238 <LoopForever>
 800023a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800023c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000244:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000248:	0800b610 	.word	0x0800b610
  ldr r2, =_sbss
 800024c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000250:	20000940 	.word	0x20000940
  ldr r2, = __Stack_Init
 8000254:	20007c00 	.word	0x20007c00

08000258 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.startup.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000258:	e7fe      	b.n	8000258 <COMP1_2_3_IRQHandler>
	...

Disassembly of section .bootloader:

08000800 <bootloader>:
bl_func void TOASTER_ask_for_packet(uint8_t packet_number);
bl_func void msgToUART(msg_t * msg);

//seule fonction publique de ce fichier !
__attribute__((section(".bootloader.begin"))) void bootloader(uint32_t version_of_toaster)
{
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8000806:	b088      	sub	sp, #32
 8000808:	4604      	mov	r4, r0
	//return;
	RCC->AHB1ENR |= RCC_AHB1ENR_FLASHEN;
 800080a:	4b8f      	ldr	r3, [pc, #572]	; (8000a48 <bootloader+0x248>)
 800080c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800080e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000812:	649a      	str	r2, [r3, #72]	; 0x48
	RCC->APB2ENR = 1;
 8000814:	2201      	movs	r2, #1
 8000816:	661a      	str	r2, [r3, #96]	; 0x60
	RCC->APB1ENR1 |= 1<<28;
 8000818:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800081a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800081e:	659a      	str	r2, [r3, #88]	; 0x58
	RCC->ICSCR = 0x40950000;
 8000820:	4a8a      	ldr	r2, [pc, #552]	; (8000a4c <bootloader+0x24c>)
 8000822:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = 0x10005532;
 8000824:	4a8a      	ldr	r2, [pc, #552]	; (8000a50 <bootloader+0x250>)
 8000826:	60da      	str	r2, [r3, #12]
    RCC->CR = 0x03000500;
 8000828:	4a8a      	ldr	r2, [pc, #552]	; (8000a54 <bootloader+0x254>)
 800082a:	601a      	str	r2, [r3, #0]
    RCC->PLLCFGR = 0x11005532;
 800082c:	4a8a      	ldr	r2, [pc, #552]	; (8000a58 <bootloader+0x258>)
 800082e:	60da      	str	r2, [r3, #12]
    while ((RCC->CR & RCC_CR_PLLRDY) == 0U);
 8000830:	4b85      	ldr	r3, [pc, #532]	; (8000a48 <bootloader+0x248>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000838:	d0fa      	beq.n	8000830 <bootloader+0x30>
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLASH_LATENCY_4);
 800083a:	4a88      	ldr	r2, [pc, #544]	; (8000a5c <bootloader+0x25c>)
 800083c:	6813      	ldr	r3, [r2, #0]
 800083e:	f023 030f 	bic.w	r3, r3, #15
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	6013      	str	r3, [r2, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8000848:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 800084c:	6893      	ldr	r3, [r2, #8]
 800084e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000856:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, 0x03);
 8000858:	6893      	ldr	r3, [r2, #8]
 800085a:	f043 0303 	orr.w	r3, r3, #3
 800085e:	6093      	str	r3, [r2, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (0x03 << RCC_CFGR_SWS_Pos));
 8000860:	4b79      	ldr	r3, [pc, #484]	; (8000a48 <bootloader+0x248>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	f003 030c 	and.w	r3, r3, #12
 8000868:	2b0c      	cmp	r3, #12
 800086a:	d1f9      	bne.n	8000860 <bootloader+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800086c:	4b76      	ldr	r3, [pc, #472]	; (8000a48 <bootloader+0x248>)
 800086e:	689a      	ldr	r2, [r3, #8]
 8000870:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8000874:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800087c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8000880:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, 0x00);
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000888:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, 0x00);
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000890:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((0x00) << 3U));
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000898:	609a      	str	r2, [r3, #8]

    SET_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOAEN);	//GPIOA CLK ON
 800089a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800089c:	f042 0201 	orr.w	r2, r2, #1
 80008a0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USART1_CONFIG(0);
 80008a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80008a6:	f022 0203 	bic.w	r2, r2, #3
 80008aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    GPIOA->AFR[1]=0x0770;
 80008ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008b2:	f44f 61ee 	mov.w	r1, #1904	; 0x770
 80008b6:	6251      	str	r1, [r2, #36]	; 0x24
    GPIOA->MODER=0xABEBFFFF;
 80008b8:	4969      	ldr	r1, [pc, #420]	; (8000a60 <bootloader+0x260>)
 80008ba:	6011      	str	r1, [r2, #0]
    SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN); //USART1 CLK ON
 80008bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008c2:	661a      	str	r2, [r3, #96]	; 0x60
    USART1->CR1 &= ~USART_CR1_UE;		//USART1 OFF
 80008c4:	f5a3 4358 	sub.w	r3, r3, #55296	; 0xd800
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	f022 0201 	bic.w	r2, r2, #1
 80008ce:	601a      	str	r2, [r3, #0]
    USART1->CR1 = 0x0000000C;
 80008d0:	220c      	movs	r2, #12
 80008d2:	601a      	str	r2, [r3, #0]
    USART1->CR2 = 0x00000000;
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
    USART1->CR3 = 0x00000000;
 80008d8:	609a      	str	r2, [r3, #8]
    USART1->BRR = 0x00000171;
 80008da:	f240 1171 	movw	r1, #369	; 0x171
 80008de:	60d9      	str	r1, [r3, #12]
    USART1->PRESC = 0x00000000;
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
    CLEAR_BIT(USART1->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80008e8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(USART1->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80008f0:	609a      	str	r2, [r3, #8]
    USART1->CR1 |= USART_CR1_UE;		//USART1 ON
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	f042 0201 	orr.w	r2, r2, #1
 80008f8:	601a      	str	r2, [r3, #0]
	msg_t msg;
	uint32_t nb_packets;
	uint32_t program_size;
	uint32_t toaster_version_available;

	if(TOASTER_receive_B0(400000) == 0)
 80008fa:	485a      	ldr	r0, [pc, #360]	; (8000a64 <bootloader+0x264>)
 80008fc:	f000 fa73 	bl	8000de6 <TOASTER_receive_B0>
 8000900:	b9a8      	cbnz	r0, 800092e <bootloader+0x12e>
	{
		USART1->CR1 = 0;
 8000902:	2200      	movs	r2, #0
 8000904:	4b58      	ldr	r3, [pc, #352]	; (8000a68 <bootloader+0x268>)
 8000906:	601a      	str	r2, [r3, #0]
		RCC->APB2ENR = 0;
 8000908:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800090c:	661a      	str	r2, [r3, #96]	; 0x60
		RCC->APB1ENR1 &= ~(1<<28);
 800090e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000910:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000914:	659a      	str	r2, [r3, #88]	; 0x58
		CLEAR_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOAEN);	//GPIOA CLK OFF
 8000916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000918:	f022 0201 	bic.w	r2, r2, #1
 800091c:	64da      	str	r2, [r3, #76]	; 0x4c
		CLEAR_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN); 	//USART1 CLK OFF
 800091e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000920:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000924:	661a      	str	r2, [r3, #96]	; 0x60
	__asm volatile ("dsb");   /* Ensure all outstanding memory accesses included buffered write are completed before reset */
	SCB->AIRCR  = ((0x5FA << 16) | (SCB->AIRCR & (7<<8)) | (1UL << 2));    /* Keep priority group unchanged */
	__asm volatile ("dsb");
	return;
	//test_flash();
}
 8000926:	f50d 4d80 	add.w	sp, sp, #16384	; 0x4000
 800092a:	b008      	add	sp, #32
 800092c:	bd70      	pop	{r4, r5, r6, pc}
	TOASTER_send_request_for_program();
 800092e:	f000 fa8c 	bl	8000e4a <TOASTER_send_request_for_program>
	res = TOASTER_receive(&msg, NULL, 40000000);//40000);	//fonction blocante avec timeout.
 8000932:	4a4e      	ldr	r2, [pc, #312]	; (8000a6c <bootloader+0x26c>)
 8000934:	2100      	movs	r1, #0
 8000936:	f50d 4080 	add.w	r0, sp, #16384	; 0x4000
 800093a:	3014      	adds	r0, #20
 800093c:	f000 f998 	bl	8000c70 <TOASTER_receive>
	if(res == 1 && msg.sid == SID_BOOTLOADER_PROGRAM_AVAILABLE && msg.size >= 8)
 8000940:	2801      	cmp	r0, #1
 8000942:	d1f0      	bne.n	8000926 <bootloader+0x126>
 8000944:	f50d 4380 	add.w	r3, sp, #16384	; 0x4000
 8000948:	3314      	adds	r3, #20
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b71      	cmp	r3, #113	; 0x71
 800094e:	d1ea      	bne.n	8000926 <bootloader+0x126>
 8000950:	f50d 4380 	add.w	r3, sp, #16384	; 0x4000
 8000954:	3315      	adds	r3, #21
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b07      	cmp	r3, #7
 800095a:	d9e4      	bls.n	8000926 <bootloader+0x126>
		toaster_version_available = msg.data[0];
 800095c:	f50d 4380 	add.w	r3, sp, #16384	; 0x4000
 8000960:	3316      	adds	r3, #22
 8000962:	781a      	ldrb	r2, [r3, #0]
		nb_packets = U32FROMU8(0x00, msg.data[1], msg.data[2], msg.data[3]);
 8000964:	f50d 4380 	add.w	r3, sp, #16384	; 0x4000
 8000968:	3317      	adds	r3, #23
 800096a:	7819      	ldrb	r1, [r3, #0]
 800096c:	f50d 4380 	add.w	r3, sp, #16384	; 0x4000
 8000970:	3318      	adds	r3, #24
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	021b      	lsls	r3, r3, #8
 8000976:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800097a:	f50d 4180 	add.w	r1, sp, #16384	; 0x4000
 800097e:	3119      	adds	r1, #25
 8000980:	780e      	ldrb	r6, [r1, #0]
 8000982:	431e      	orrs	r6, r3
		program_size = U32FROMU8(msg.data[4], msg.data[5], msg.data[6], msg.data[7]);
 8000984:	f50d 4380 	add.w	r3, sp, #16384	; 0x4000
 8000988:	331a      	adds	r3, #26
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	f50d 4180 	add.w	r1, sp, #16384	; 0x4000
 8000990:	311b      	adds	r1, #27
 8000992:	780d      	ldrb	r5, [r1, #0]
 8000994:	042d      	lsls	r5, r5, #16
 8000996:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 800099a:	f50d 4380 	add.w	r3, sp, #16384	; 0x4000
 800099e:	331c      	adds	r3, #28
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 80009a6:	f50d 4380 	add.w	r3, sp, #16384	; 0x4000
 80009aa:	331d      	adds	r3, #29
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	431d      	orrs	r5, r3
	if(version_of_toaster == toaster_version_available)
 80009b0:	42a2      	cmp	r2, r4
 80009b2:	d0b8      	beq.n	8000926 <bootloader+0x126>
	if (program_size > 120*1024)
 80009b4:	f5b5 3ff0 	cmp.w	r5, #122880	; 0x1e000
 80009b8:	d8b5      	bhi.n	8000926 <bootloader+0x126>
	Unlock();
 80009ba:	f000 f85f 	bl	8000a7c <Unlock>
	BL_FLASH_Erase(program_size);
 80009be:	4628      	mov	r0, r5
 80009c0:	f000 f88e 	bl	8000ae0 <BL_FLASH_Erase>
	for(int p = nb_packets-1; p>=0; )	//pas de p-- ici, on dï¿½crï¿½mente qu'aprï¿½s vï¿½rification de validitï¿½ du packet.
 80009c4:	3e01      	subs	r6, #1
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	db1b      	blt.n	8000a02 <bootloader+0x202>
		TOASTER_ask_for_packet(p);
 80009ca:	b2f0      	uxtb	r0, r6
 80009cc:	f000 fa55 	bl	8000e7a <TOASTER_ask_for_packet>
		if(TOASTER_receive(&msg, &packet, 400000000) && msg.sid == SID_TOASTER_PACKET)
 80009d0:	4a27      	ldr	r2, [pc, #156]	; (8000a70 <bootloader+0x270>)
 80009d2:	a901      	add	r1, sp, #4
 80009d4:	f50d 4080 	add.w	r0, sp, #16384	; 0x4000
 80009d8:	3014      	adds	r0, #20
 80009da:	f000 f949 	bl	8000c70 <TOASTER_receive>
 80009de:	2800      	cmp	r0, #0
 80009e0:	d0f1      	beq.n	80009c6 <bootloader+0x1c6>
 80009e2:	f50d 4380 	add.w	r3, sp, #16384	; 0x4000
 80009e6:	3314      	adds	r3, #20
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b74      	cmp	r3, #116	; 0x74
 80009ec:	d1eb      	bne.n	80009c6 <bootloader+0x1c6>
			address = (uint32_t *)(0x08000000 + p * PACKET_DATA_SIZE);
 80009ee:	f506 5000 	add.w	r0, r6, #8192	; 0x2000
			status = FLASH_write_packet(address, &packet);
 80009f2:	a901      	add	r1, sp, #4
 80009f4:	0380      	lsls	r0, r0, #14
 80009f6:	f000 f8a9 	bl	8000b4c <FLASH_write_packet>
			if (status == BL_FLASH_COMPLETE)
 80009fa:	2809      	cmp	r0, #9
 80009fc:	d1e3      	bne.n	80009c6 <bootloader+0x1c6>
				p--;
 80009fe:	3e01      	subs	r6, #1
 8000a00:	e7e1      	b.n	80009c6 <bootloader+0x1c6>
	Lock();
 8000a02:	f000 f84b 	bl	8000a9c <Lock>
	while((USART1->ISR & USART_ISR_TC) == 0);	//attendre que la transmission soit terminï¿½e !
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <bootloader+0x268>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000a0e:	d0fa      	beq.n	8000a06 <bootloader+0x206>
	RCC->APB2ENR = 0;
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <bootloader+0x248>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	661a      	str	r2, [r3, #96]	; 0x60
	RCC->APB1ENR1 &= ~(1<<28);
 8000a16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a18:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000a1c:	659a      	str	r2, [r3, #88]	; 0x58
	CLEAR_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOAEN);	//GPIOA CLK OFF
 8000a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a20:	f022 0201 	bic.w	r2, r2, #1
 8000a24:	64da      	str	r2, [r3, #76]	; 0x4c
	CLEAR_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN); 	//USART1 CLK OFF
 8000a26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a2c:	661a      	str	r2, [r3, #96]	; 0x60
	__asm volatile ("dsb");   /* Ensure all outstanding memory accesses included buffered write are completed before reset */
 8000a2e:	f3bf 8f4f 	dsb	sy
	SCB->AIRCR  = ((0x5FA << 16) | (SCB->AIRCR & (7<<8)) | (1UL << 2));    /* Keep priority group unchanged */
 8000a32:	4910      	ldr	r1, [pc, #64]	; (8000a74 <bootloader+0x274>)
 8000a34:	68ca      	ldr	r2, [r1, #12]
 8000a36:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <bootloader+0x278>)
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	60cb      	str	r3, [r1, #12]
	__asm volatile ("dsb");
 8000a40:	f3bf 8f4f 	dsb	sy
	return;
 8000a44:	e76f      	b.n	8000926 <bootloader+0x126>
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40950000 	.word	0x40950000
 8000a50:	10005532 	.word	0x10005532
 8000a54:	03000500 	.word	0x03000500
 8000a58:	11005532 	.word	0x11005532
 8000a5c:	40022000 	.word	0x40022000
 8000a60:	abebffff 	.word	0xabebffff
 8000a64:	00061a80 	.word	0x00061a80
 8000a68:	40013800 	.word	0x40013800
 8000a6c:	02625a00 	.word	0x02625a00
 8000a70:	17d78400 	.word	0x17d78400
 8000a74:	e000ed00 	.word	0xe000ed00
 8000a78:	05fa0004 	.word	0x05fa0004

08000a7c <Unlock>:
	return status;
}

static void Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != 0)
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <Unlock+0x18>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db00      	blt.n	8000a86 <Unlock+0xa>
  {
    FLASH->KEYR = FLASH_KEY1;
    FLASH->KEYR = FLASH_KEY2;
  }
}
 8000a84:	4770      	bx	lr
    FLASH->KEYR = FLASH_KEY1;
 8000a86:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <Unlock+0x18>)
 8000a88:	4a03      	ldr	r2, [pc, #12]	; (8000a98 <Unlock+0x1c>)
 8000a8a:	609a      	str	r2, [r3, #8]
    FLASH->KEYR = FLASH_KEY2;
 8000a8c:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000a90:	609a      	str	r2, [r3, #8]
}
 8000a92:	e7f7      	b.n	8000a84 <Unlock+0x8>
 8000a94:	40022000 	.word	0x40022000
 8000a98:	45670123 	.word	0x45670123

08000a9c <Lock>:

static void Lock(void)
{
  FLASH->CR |= FLASH_CR_LOCK;
 8000a9c:	4a02      	ldr	r2, [pc, #8]	; (8000aa8 <Lock+0xc>)
 8000a9e:	6953      	ldr	r3, [r2, #20]
 8000aa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa4:	6153      	str	r3, [r2, #20]
}
 8000aa6:	4770      	bx	lr
 8000aa8:	40022000 	.word	0x40022000

08000aac <GetStatus>:


static FLASH_Status GetStatus(void)
{
	uint32_t sr;
	sr = FLASH->SR;
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <GetStatus+0x30>)
 8000aae:	691b      	ldr	r3, [r3, #16]
	if(sr & FLASH_FLAG_BSY)
 8000ab0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000ab4:	d10a      	bne.n	8000acc <GetStatus+0x20>
		return BL_FLASH_BUSY;
	if(sr & FLASH_FLAG_WRPERR)
 8000ab6:	f013 0f10 	tst.w	r3, #16
 8000aba:	d109      	bne.n	8000ad0 <GetStatus+0x24>
		return BL_FLASH_ERROR_WRP;
	if(sr & (uint32_t)0xEF)
 8000abc:	f013 0fef 	tst.w	r3, #239	; 0xef
 8000ac0:	d108      	bne.n	8000ad4 <GetStatus+0x28>
		return BL_FLASH_ERROR_PROGRAM;
	if(sr & FLASH_FLAG_OPERR)
 8000ac2:	f013 0f02 	tst.w	r3, #2
 8000ac6:	d107      	bne.n	8000ad8 <GetStatus+0x2c>
		return BL_FLASH_ERROR_OPERATION;
	return BL_FLASH_COMPLETE;
 8000ac8:	2009      	movs	r0, #9
 8000aca:	4770      	bx	lr
		return BL_FLASH_BUSY;
 8000acc:	2001      	movs	r0, #1
 8000ace:	4770      	bx	lr
		return BL_FLASH_ERROR_WRP;
 8000ad0:	2005      	movs	r0, #5
 8000ad2:	4770      	bx	lr
		return BL_FLASH_ERROR_PROGRAM;
 8000ad4:	2006      	movs	r0, #6
 8000ad6:	4770      	bx	lr
		return BL_FLASH_ERROR_OPERATION;
 8000ad8:	2007      	movs	r0, #7
}
 8000ada:	4770      	bx	lr
 8000adc:	40022000 	.word	0x40022000

08000ae0 <BL_FLASH_Erase>:
{
 8000ae0:	b538      	push	{r3, r4, r5, lr}
	last_used_sector = ((program_size/PACKET_DATA_SIZE+1)*PACKET_DATA_SIZE / 0x800) + 1;
 8000ae2:	0b85      	lsrs	r5, r0, #14
 8000ae4:	3501      	adds	r5, #1
 8000ae6:	03ad      	lsls	r5, r5, #14
 8000ae8:	0aed      	lsrs	r5, r5, #11
 8000aea:	3501      	adds	r5, #1
	for(uint32_t s = 2; s<=last_used_sector; s++)
 8000aec:	2402      	movs	r4, #2
 8000aee:	e018      	b.n	8000b22 <BL_FLASH_Erase+0x42>
		MODIFY_REG(FLASH->CR, FLASH_CR_PNB, (s << FLASH_CR_PNB_Pos));
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <BL_FLASH_Erase+0x48>)
 8000af2:	695a      	ldr	r2, [r3, #20]
 8000af4:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 8000af8:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
 8000afc:	615a      	str	r2, [r3, #20]
		FLASH->CR |= FLASH_CR_PER;
 8000afe:	695a      	ldr	r2, [r3, #20]
 8000b00:	f042 0202 	orr.w	r2, r2, #2
 8000b04:	615a      	str	r2, [r3, #20]
		FLASH->CR |= FLASH_CR_STRT;
 8000b06:	695a      	ldr	r2, [r3, #20]
 8000b08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b0c:	615a      	str	r2, [r3, #20]
		while(GetStatus() == BL_FLASH_BUSY);
 8000b0e:	f7ff ffcd 	bl	8000aac <GetStatus>
 8000b12:	2801      	cmp	r0, #1
 8000b14:	d0fb      	beq.n	8000b0e <BL_FLASH_Erase+0x2e>
		CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8000b16:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <BL_FLASH_Erase+0x48>)
 8000b18:	6953      	ldr	r3, [r2, #20]
 8000b1a:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8000b1e:	6153      	str	r3, [r2, #20]
	for(uint32_t s = 2; s<=last_used_sector; s++)
 8000b20:	3401      	adds	r4, #1
 8000b22:	42ac      	cmp	r4, r5
 8000b24:	d9e4      	bls.n	8000af0 <BL_FLASH_Erase+0x10>
}
 8000b26:	bd38      	pop	{r3, r4, r5, pc}
 8000b28:	40022000 	.word	0x40022000

08000b2c <WaitForLastOperation>:
{
 8000b2c:	b500      	push	{lr}
 8000b2e:	b083      	sub	sp, #12
	  status = GetStatus();
 8000b30:	f7ff ffbc 	bl	8000aac <GetStatus>
 8000b34:	f88d 0007 	strb.w	r0, [sp, #7]
  }while(status == BL_FLASH_BUSY);
 8000b38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d0f6      	beq.n	8000b30 <WaitForLastOperation+0x4>
  return status;
 8000b42:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000b46:	b003      	add	sp, #12
 8000b48:	f85d fb04 	ldr.w	pc, [sp], #4

08000b4c <FLASH_write_packet>:
{
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	4607      	mov	r7, r0
 8000b52:	4688      	mov	r8, r1
	status = WaitForLastOperation();
 8000b54:	f7ff ffea 	bl	8000b2c <WaitForLastOperation>
 8000b58:	4605      	mov	r5, r0
	if(address == (uint32_t *)(0x08000000))
 8000b5a:	f1b7 6f00 	cmp.w	r7, #134217728	; 0x8000000
 8000b5e:	d004      	beq.n	8000b6a <FLASH_write_packet+0x1e>
	if(status == BL_FLASH_COMPLETE)
 8000b60:	2d09      	cmp	r5, #9
 8000b62:	d019      	beq.n	8000b98 <FLASH_write_packet+0x4c>
}
 8000b64:	4628      	mov	r0, r5
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		MODIFY_REG(FLASH->CR, FLASH_CR_PNB, (0 << FLASH_CR_PNB_Pos));
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <FLASH_write_packet+0xd8>)
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 8000b72:	615a      	str	r2, [r3, #20]
		FLASH->CR |= FLASH_CR_PER;
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	f042 0202 	orr.w	r2, r2, #2
 8000b7a:	615a      	str	r2, [r3, #20]
		FLASH->CR |= FLASH_CR_STRT;		//on efface le secteur 0
 8000b7c:	695a      	ldr	r2, [r3, #20]
 8000b7e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b82:	615a      	str	r2, [r3, #20]
		while(GetStatus() == BL_FLASH_BUSY);
 8000b84:	f7ff ff92 	bl	8000aac <GetStatus>
 8000b88:	2801      	cmp	r0, #1
 8000b8a:	d0fb      	beq.n	8000b84 <FLASH_write_packet+0x38>
		CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8000b8c:	4a25      	ldr	r2, [pc, #148]	; (8000c24 <FLASH_write_packet+0xd8>)
 8000b8e:	6953      	ldr	r3, [r2, #20]
 8000b90:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8000b94:	6153      	str	r3, [r2, #20]
 8000b96:	e7e3      	b.n	8000b60 <FLASH_write_packet+0x14>
		    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000b98:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <FLASH_write_packet+0xd8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000ba0:	d004      	beq.n	8000bac <FLASH_write_packet+0x60>
		      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000ba2:	4a20      	ldr	r2, [pc, #128]	; (8000c24 <FLASH_write_packet+0xd8>)
 8000ba4:	6813      	ldr	r3, [r2, #0]
 8000ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000baa:	6013      	str	r3, [r2, #0]
		FLASH->CR |= FLASH_CR_PG;
 8000bac:	4a1d      	ldr	r2, [pc, #116]	; (8000c24 <FLASH_write_packet+0xd8>)
 8000bae:	6953      	ldr	r3, [r2, #20]
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6153      	str	r3, [r2, #20]
		data = (uint32_t *)packet->data;
 8000bb6:	f108 090d 	add.w	r9, r8, #13
		for(uint32_t i = 0; i<packet->size/8; i++)
 8000bba:	2400      	movs	r4, #0
 8000bbc:	e002      	b.n	8000bc4 <FLASH_write_packet+0x78>
			if (status != BL_FLASH_COMPLETE)
 8000bbe:	2d09      	cmp	r5, #9
 8000bc0:	d129      	bne.n	8000c16 <FLASH_write_packet+0xca>
		for(uint32_t i = 0; i<packet->size/8; i++)
 8000bc2:	3401      	adds	r4, #1
 8000bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8000bc8:	ebb4 0fd3 	cmp.w	r4, r3, lsr #3
 8000bcc:	d223      	bcs.n	8000c16 <FLASH_write_packet+0xca>
			a = (uint32_t*)(address+2*i);
 8000bce:	00e2      	lsls	r2, r4, #3
 8000bd0:	eb07 06c4 	add.w	r6, r7, r4, lsl #3
			if (a < (uint32_t *)0x08000800 || a >= (uint32_t *)0x08001000)	//on ï¿½crase pas le secteur 1 (bootloader)!
 8000bd4:	f1a6 2308 	sub.w	r3, r6, #134219776	; 0x8000800
 8000bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bdc:	d3ef      	bcc.n	8000bbe <FLASH_write_packet+0x72>
				*a = data[2*i];
 8000bde:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8000be2:	f847 3034 	str.w	r3, [r7, r4, lsl #3]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000be6:	f3bf 8f6f 	isb	sy
				*(a+1) = data[2*i+1];
 8000bea:	f102 0a04 	add.w	sl, r2, #4
 8000bee:	f859 300a 	ldr.w	r3, [r9, sl]
 8000bf2:	6073      	str	r3, [r6, #4]
				status = WaitForLastOperation();
 8000bf4:	f7ff ff9a 	bl	8000b2c <WaitForLastOperation>
 8000bf8:	4605      	mov	r5, r0
				if(*a != data[2*i] || *(a+1) != data[2*i+1])
 8000bfa:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
 8000bfe:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d106      	bne.n	8000c14 <FLASH_write_packet+0xc8>
 8000c06:	6872      	ldr	r2, [r6, #4]
 8000c08:	f859 300a 	ldr.w	r3, [r9, sl]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d0d6      	beq.n	8000bbe <FLASH_write_packet+0x72>
					status = BL_FLASH_ERROR_PROGRAM;
 8000c10:	2506      	movs	r5, #6
 8000c12:	e000      	b.n	8000c16 <FLASH_write_packet+0xca>
 8000c14:	2506      	movs	r5, #6
		FLASH->CR &= (~FLASH_CR_PG);
 8000c16:	4a03      	ldr	r2, [pc, #12]	; (8000c24 <FLASH_write_packet+0xd8>)
 8000c18:	6953      	ldr	r3, [r2, #20]
 8000c1a:	f023 0301 	bic.w	r3, r3, #1
 8000c1e:	6153      	str	r3, [r2, #20]
 8000c20:	e7a0      	b.n	8000b64 <FLASH_write_packet+0x18>
 8000c22:	bf00      	nop
 8000c24:	40022000 	.word	0x40022000

08000c28 <UART_write>:
	while((USART1->ISR & USART_ISR_TXE) == 0);
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <UART_write+0x10>)
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000c30:	d0fa      	beq.n	8000c28 <UART_write>
	USART1->TDR = (uint16_t)(c);
 8000c32:	4b01      	ldr	r3, [pc, #4]	; (8000c38 <UART_write+0x10>)
 8000c34:	6298      	str	r0, [r3, #40]	; 0x28
}
 8000c36:	4770      	bx	lr
 8000c38:	40013800 	.word	0x40013800

08000c3c <UART_read>:
{
 8000c3c:	b410      	push	{r4}
 8000c3e:	4604      	mov	r4, r0
	uint8_t ret = 0;
 8000c40:	2000      	movs	r0, #0
 8000c42:	e003      	b.n	8000c4c <UART_read+0x10>
			USART1->ICR = USART_FLAG_ERRORS;
 8000c44:	4a09      	ldr	r2, [pc, #36]	; (8000c6c <UART_read+0x30>)
 8000c46:	210f      	movs	r1, #15
 8000c48:	6211      	str	r1, [r2, #32]
	}while(status & USART_FLAG_ERRORS);
 8000c4a:	b163      	cbz	r3, 8000c66 <UART_read+0x2a>
		status = USART1->ISR;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <UART_read+0x30>)
 8000c4e:	69db      	ldr	r3, [r3, #28]
		if (status & USART_ISR_RXNE)
 8000c50:	f013 0f20 	tst.w	r3, #32
 8000c54:	d003      	beq.n	8000c5e <UART_read+0x22>
			*c = (uint8_t) (USART1->RDR);
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <UART_read+0x30>)
 8000c58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c5a:	7022      	strb	r2, [r4, #0]
			ret = 1;
 8000c5c:	2001      	movs	r0, #1
		if (status & USART_FLAG_ERRORS)
 8000c5e:	f013 030f 	ands.w	r3, r3, #15
 8000c62:	d0f2      	beq.n	8000c4a <UART_read+0xe>
 8000c64:	e7ee      	b.n	8000c44 <UART_read+0x8>
}
 8000c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	40013800 	.word	0x40013800

08000c70 <TOASTER_receive>:
{
 8000c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c74:	b083      	sub	sp, #12
 8000c76:	4680      	mov	r8, r0
 8000c78:	460f      	mov	r7, r1
 8000c7a:	4614      	mov	r4, r2
 8000c7c:	2600      	movs	r6, #0
	state = WAIT_SOH;
 8000c7e:	4635      	mov	r5, r6
 8000c80:	e00f      	b.n	8000ca2 <TOASTER_receive+0x32>
					if(c == SOH)
 8000c82:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d106      	bne.n	8000c98 <TOASTER_receive+0x28>
						state = WAIT_SID;
 8000c8a:	461d      	mov	r5, r3
 8000c8c:	e004      	b.n	8000c98 <TOASTER_receive+0x28>
					msg->sid = c;
 8000c8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000c92:	f888 3000 	strb.w	r3, [r8]
					state = WAIT_SIZE;
 8000c96:	2502      	movs	r5, #2
	}while(timeout_nb_loops--);
 8000c98:	1e63      	subs	r3, r4, #1
 8000c9a:	2c00      	cmp	r4, #0
 8000c9c:	f000 809d 	beq.w	8000dda <TOASTER_receive+0x16a>
 8000ca0:	461c      	mov	r4, r3
		if(UART_read(&c))
 8000ca2:	f10d 0007 	add.w	r0, sp, #7
 8000ca6:	f7ff ffc9 	bl	8000c3c <UART_read>
 8000caa:	2800      	cmp	r0, #0
 8000cac:	d0f4      	beq.n	8000c98 <TOASTER_receive+0x28>
			switch(state)
 8000cae:	2d05      	cmp	r5, #5
 8000cb0:	f200 808b 	bhi.w	8000dca <TOASTER_receive+0x15a>
 8000cb4:	a301      	add	r3, pc, #4	; (adr r3, 8000cbc <TOASTER_receive+0x4c>)
 8000cb6:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8000cba:	bf00      	nop
 8000cbc:	08000c83 	.word	0x08000c83
 8000cc0:	08000c8f 	.word	0x08000c8f
 8000cc4:	08000cd5 	.word	0x08000cd5
 8000cc8:	08000ce9 	.word	0x08000ce9
 8000ccc:	08000d5b 	.word	0x08000d5b
 8000cd0:	08000db9 	.word	0x08000db9
					msg->size = c;
 8000cd4:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8000cd8:	f888 6001 	strb.w	r6, [r8, #1]
					if(msg->size == 0)
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d076      	beq.n	8000dce <TOASTER_receive+0x15e>
					else if(msg->size <= 8)
 8000ce0:	2e08      	cmp	r6, #8
 8000ce2:	d876      	bhi.n	8000dd2 <TOASTER_receive+0x162>
						state = RECEIVE_DATA;
 8000ce4:	2503      	movs	r5, #3
 8000ce6:	e7d7      	b.n	8000c98 <TOASTER_receive+0x28>
					msg->data[msg->size - remaining_data] = c;
 8000ce8:	f898 2001 	ldrb.w	r2, [r8, #1]
 8000cec:	1b93      	subs	r3, r2, r6
 8000cee:	4443      	add	r3, r8
 8000cf0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000cf4:	7099      	strb	r1, [r3, #2]
					remaining_data--;
 8000cf6:	3e01      	subs	r6, #1
					if(remaining_data == 0)
 8000cf8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8000cfc:	d1cc      	bne.n	8000c98 <TOASTER_receive+0x28>
						if(msg->sid == SID_TOASTER_PACKET && msg->size == 8)
 8000cfe:	f898 3000 	ldrb.w	r3, [r8]
 8000d02:	2b74      	cmp	r3, #116	; 0x74
 8000d04:	d001      	beq.n	8000d0a <TOASTER_receive+0x9a>
						state = WAIT_EOT;
 8000d06:	2505      	movs	r5, #5
 8000d08:	e7c6      	b.n	8000c98 <TOASTER_receive+0x28>
						if(msg->sid == SID_TOASTER_PACKET && msg->size == 8)
 8000d0a:	2a08      	cmp	r2, #8
 8000d0c:	d001      	beq.n	8000d12 <TOASTER_receive+0xa2>
						state = WAIT_EOT;
 8000d0e:	2505      	movs	r5, #5
 8000d10:	e7c2      	b.n	8000c98 <TOASTER_receive+0x28>
							if(packet != NULL)
 8000d12:	2f00      	cmp	r7, #0
 8000d14:	d05f      	beq.n	8000dd6 <TOASTER_receive+0x166>
								packet->packet_nb = msg->data[0];
 8000d16:	f898 3002 	ldrb.w	r3, [r8, #2]
 8000d1a:	733b      	strb	r3, [r7, #12]
								packet->size = U32FROMU8(0x00, msg->data[1], msg->data[2], msg->data[3]);
 8000d1c:	f898 2003 	ldrb.w	r2, [r8, #3]
 8000d20:	f898 3004 	ldrb.w	r3, [r8, #4]
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	f898 2005 	ldrb.w	r2, [r8, #5]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	603b      	str	r3, [r7, #0]
								packet->crc = U32FROMU8(msg->data[4], msg->data[5], msg->data[6], msg->data[7]);
 8000d32:	f898 2006 	ldrb.w	r2, [r8, #6]
 8000d36:	f898 3007 	ldrb.w	r3, [r8, #7]
 8000d3a:	041b      	lsls	r3, r3, #16
 8000d3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d40:	f898 2008 	ldrb.w	r2, [r8, #8]
 8000d44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d48:	f898 2009 	ldrb.w	r2, [r8, #9]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	607b      	str	r3, [r7, #4]
								packet->crc_calculated = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
								packet_index = 0;
 8000d54:	4699      	mov	r9, r3
								state = RECEIVE_PACKET;
 8000d56:	2504      	movs	r5, #4
 8000d58:	e79e      	b.n	8000c98 <TOASTER_receive+0x28>
					packet->data[packet_index] = c;
 8000d5a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000d5e:	eb07 0309 	add.w	r3, r7, r9
 8000d62:	7359      	strb	r1, [r3, #13]
					packet_index++;
 8000d64:	f109 0201 	add.w	r2, r9, #1
					if(packet_index % 4 == 0)
 8000d68:	f012 0f03 	tst.w	r2, #3
 8000d6c:	d115      	bne.n	8000d9a <TOASTER_receive+0x12a>
						packet->crc_calculated ^= U32FROMU8(packet->data[packet_index-1], packet->data[packet_index-2], packet->data[packet_index-3], packet->data[packet_index-4]);
 8000d6e:	f109 33ff 	add.w	r3, r9, #4294967295
 8000d72:	443b      	add	r3, r7
 8000d74:	7b5b      	ldrb	r3, [r3, #13]
 8000d76:	041b      	lsls	r3, r3, #16
 8000d78:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000d7c:	f1a9 0102 	sub.w	r1, r9, #2
 8000d80:	4439      	add	r1, r7
 8000d82:	7b49      	ldrb	r1, [r1, #13]
 8000d84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000d88:	f1a9 0903 	sub.w	r9, r9, #3
 8000d8c:	44b9      	add	r9, r7
 8000d8e:	f899 100d 	ldrb.w	r1, [r9, #13]
 8000d92:	430b      	orrs	r3, r1
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	404b      	eors	r3, r1
 8000d98:	60bb      	str	r3, [r7, #8]
					if (packet_index == packet->size)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d001      	beq.n	8000da4 <TOASTER_receive+0x134>
					packet_index++;
 8000da0:	4691      	mov	r9, r2
 8000da2:	e779      	b.n	8000c98 <TOASTER_receive+0x28>
						if(packet->crc == packet->crc_calculated)
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d002      	beq.n	8000db2 <TOASTER_receive+0x142>
					packet_index++;
 8000dac:	4691      	mov	r9, r2
							state = WAIT_SOH;
 8000dae:	2500      	movs	r5, #0
 8000db0:	e772      	b.n	8000c98 <TOASTER_receive+0x28>
					packet_index++;
 8000db2:	4691      	mov	r9, r2
							state = WAIT_EOT;
 8000db4:	2505      	movs	r5, #5
 8000db6:	e76f      	b.n	8000c98 <TOASTER_receive+0x28>
					if(c == EOT)
 8000db8:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8000dbc:	2d04      	cmp	r5, #4
 8000dbe:	d010      	beq.n	8000de2 <TOASTER_receive+0x172>
					else if(c == SOH)
 8000dc0:	2d01      	cmp	r5, #1
 8000dc2:	f43f af69 	beq.w	8000c98 <TOASTER_receive+0x28>
						state = WAIT_SOH;
 8000dc6:	2500      	movs	r5, #0
 8000dc8:	e766      	b.n	8000c98 <TOASTER_receive+0x28>
		if(UART_read(&c))
 8000dca:	2500      	movs	r5, #0
 8000dcc:	e764      	b.n	8000c98 <TOASTER_receive+0x28>
						state = WAIT_EOT;
 8000dce:	2505      	movs	r5, #5
 8000dd0:	e762      	b.n	8000c98 <TOASTER_receive+0x28>
						state = WAIT_SOH;
 8000dd2:	2500      	movs	r5, #0
 8000dd4:	e760      	b.n	8000c98 <TOASTER_receive+0x28>
						state = WAIT_EOT;
 8000dd6:	2505      	movs	r5, #5
 8000dd8:	e75e      	b.n	8000c98 <TOASTER_receive+0x28>
	return 0;
 8000dda:	2000      	movs	r0, #0
}
 8000ddc:	b003      	add	sp, #12
 8000dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						return 1;
 8000de2:	2001      	movs	r0, #1
 8000de4:	e7fa      	b.n	8000ddc <TOASTER_receive+0x16c>

08000de6 <TOASTER_receive_B0>:
{
 8000de6:	b510      	push	{r4, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	4604      	mov	r4, r0
 8000dec:	e002      	b.n	8000df4 <TOASTER_receive_B0+0xe>
	}while(timeout_nb_loops--);
 8000dee:	1e63      	subs	r3, r4, #1
 8000df0:	b164      	cbz	r4, 8000e0c <TOASTER_receive_B0+0x26>
 8000df2:	461c      	mov	r4, r3
		if(UART_read(&c))
 8000df4:	f10d 0007 	add.w	r0, sp, #7
 8000df8:	f7ff ff20 	bl	8000c3c <UART_read>
 8000dfc:	2800      	cmp	r0, #0
 8000dfe:	d0f6      	beq.n	8000dee <TOASTER_receive_B0+0x8>
			if(c == 0xB0)
 8000e00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000e04:	2bb0      	cmp	r3, #176	; 0xb0
 8000e06:	d1f2      	bne.n	8000dee <TOASTER_receive_B0+0x8>
				return 1;
 8000e08:	2001      	movs	r0, #1
 8000e0a:	e000      	b.n	8000e0e <TOASTER_receive_B0+0x28>
	return 0;
 8000e0c:	2000      	movs	r0, #0
}
 8000e0e:	b002      	add	sp, #8
 8000e10:	bd10      	pop	{r4, pc}

08000e12 <msgToUART>:
{
 8000e12:	b538      	push	{r3, r4, r5, lr}
 8000e14:	4605      	mov	r5, r0
	UART_write(SOH);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff ff06 	bl	8000c28 <UART_write>
	UART_write(msg->sid);
 8000e1c:	7828      	ldrb	r0, [r5, #0]
 8000e1e:	f7ff ff03 	bl	8000c28 <UART_write>
	UART_write(msg->size);
 8000e22:	7868      	ldrb	r0, [r5, #1]
 8000e24:	f7ff ff00 	bl	8000c28 <UART_write>
	for (j=0; j<msg->size && j<8; j++)
 8000e28:	2400      	movs	r4, #0
 8000e2a:	e005      	b.n	8000e38 <msgToUART+0x26>
		UART_write(msg->data[j]);
 8000e2c:	192b      	adds	r3, r5, r4
 8000e2e:	7898      	ldrb	r0, [r3, #2]
 8000e30:	f7ff fefa 	bl	8000c28 <UART_write>
	for (j=0; j<msg->size && j<8; j++)
 8000e34:	3401      	adds	r4, #1
 8000e36:	b2e4      	uxtb	r4, r4
 8000e38:	786b      	ldrb	r3, [r5, #1]
 8000e3a:	42a3      	cmp	r3, r4
 8000e3c:	d901      	bls.n	8000e42 <msgToUART+0x30>
 8000e3e:	2c07      	cmp	r4, #7
 8000e40:	d9f4      	bls.n	8000e2c <msgToUART+0x1a>
	UART_write(EOT);
 8000e42:	2004      	movs	r0, #4
 8000e44:	f7ff fef0 	bl	8000c28 <UART_write>
}
 8000e48:	bd38      	pop	{r3, r4, r5, pc}

08000e4a <TOASTER_send_request_for_program>:
{
 8000e4a:	b500      	push	{lr}
 8000e4c:	b085      	sub	sp, #20
	msg.sid = SID_TOASTER_REQUEST_FOR_PROGRAM;
 8000e4e:	2370      	movs	r3, #112	; 0x70
 8000e50:	f88d 3004 	strb.w	r3, [sp, #4]
	msg.size = 4;
 8000e54:	2304      	movs	r3, #4
 8000e56:	f88d 3005 	strb.w	r3, [sp, #5]
	msg.data[0] = PACKET_DATA_SIZE>>24 & 0xFF;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f88d 3006 	strb.w	r3, [sp, #6]
	msg.data[1] = PACKET_DATA_SIZE>>16 & 0xFF;
 8000e60:	f88d 3007 	strb.w	r3, [sp, #7]
	msg.data[2] = PACKET_DATA_SIZE>>8 & 0xFF;
 8000e64:	2240      	movs	r2, #64	; 0x40
 8000e66:	f88d 2008 	strb.w	r2, [sp, #8]
	msg.data[3] = PACKET_DATA_SIZE & 0xFF;
 8000e6a:	f88d 3009 	strb.w	r3, [sp, #9]
	msgToUART(&msg);
 8000e6e:	a801      	add	r0, sp, #4
 8000e70:	f7ff ffcf 	bl	8000e12 <msgToUART>
}
 8000e74:	b005      	add	sp, #20
 8000e76:	f85d fb04 	ldr.w	pc, [sp], #4

08000e7a <TOASTER_ask_for_packet>:
{
 8000e7a:	b500      	push	{lr}
 8000e7c:	b085      	sub	sp, #20
	msg.sid = SID_TOASTER_ASK_FOR_PACKET;
 8000e7e:	2373      	movs	r3, #115	; 0x73
 8000e80:	f88d 3004 	strb.w	r3, [sp, #4]
	msg.size = 1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	f88d 3005 	strb.w	r3, [sp, #5]
	msg.data[0] = packet_number;
 8000e8a:	f88d 0006 	strb.w	r0, [sp, #6]
	msgToUART(&msg);
 8000e8e:	a801      	add	r0, sp, #4
 8000e90:	f7ff ffbf 	bl	8000e12 <msgToUART>
}
 8000e94:	b005      	add	sp, #20
 8000e96:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e9a:	bf00      	nop

Disassembly of section .text:

08001000 <__do_global_dtors_aux>:
 8001000:	b510      	push	{r4, lr}
 8001002:	4c05      	ldr	r4, [pc, #20]	; (8001018 <__do_global_dtors_aux+0x18>)
 8001004:	7823      	ldrb	r3, [r4, #0]
 8001006:	b933      	cbnz	r3, 8001016 <__do_global_dtors_aux+0x16>
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__do_global_dtors_aux+0x1c>)
 800100a:	b113      	cbz	r3, 8001012 <__do_global_dtors_aux+0x12>
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <__do_global_dtors_aux+0x20>)
 800100e:	f3af 8000 	nop.w
 8001012:	2301      	movs	r3, #1
 8001014:	7023      	strb	r3, [r4, #0]
 8001016:	bd10      	pop	{r4, pc}
 8001018:	200001e0 	.word	0x200001e0
 800101c:	00000000 	.word	0x00000000
 8001020:	0800a02c 	.word	0x0800a02c

08001024 <frame_dummy>:
 8001024:	b508      	push	{r3, lr}
 8001026:	4b03      	ldr	r3, [pc, #12]	; (8001034 <frame_dummy+0x10>)
 8001028:	b11b      	cbz	r3, 8001032 <frame_dummy+0xe>
 800102a:	4903      	ldr	r1, [pc, #12]	; (8001038 <frame_dummy+0x14>)
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <frame_dummy+0x18>)
 800102e:	f3af 8000 	nop.w
 8001032:	bd08      	pop	{r3, pc}
 8001034:	00000000 	.word	0x00000000
 8001038:	200001e4 	.word	0x200001e4
 800103c:	0800a02c 	.word	0x0800a02c

08001040 <strlen>:
 8001040:	4603      	mov	r3, r0
 8001042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001046:	2a00      	cmp	r2, #0
 8001048:	d1fb      	bne.n	8001042 <strlen+0x2>
 800104a:	1a18      	subs	r0, r3, r0
 800104c:	3801      	subs	r0, #1
 800104e:	4770      	bx	lr

08001050 <memchr>:
 8001050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001054:	2a10      	cmp	r2, #16
 8001056:	db2b      	blt.n	80010b0 <memchr+0x60>
 8001058:	f010 0f07 	tst.w	r0, #7
 800105c:	d008      	beq.n	8001070 <memchr+0x20>
 800105e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001062:	3a01      	subs	r2, #1
 8001064:	428b      	cmp	r3, r1
 8001066:	d02d      	beq.n	80010c4 <memchr+0x74>
 8001068:	f010 0f07 	tst.w	r0, #7
 800106c:	b342      	cbz	r2, 80010c0 <memchr+0x70>
 800106e:	d1f6      	bne.n	800105e <memchr+0xe>
 8001070:	b4f0      	push	{r4, r5, r6, r7}
 8001072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800107a:	f022 0407 	bic.w	r4, r2, #7
 800107e:	f07f 0700 	mvns.w	r7, #0
 8001082:	2300      	movs	r3, #0
 8001084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001088:	3c08      	subs	r4, #8
 800108a:	ea85 0501 	eor.w	r5, r5, r1
 800108e:	ea86 0601 	eor.w	r6, r6, r1
 8001092:	fa85 f547 	uadd8	r5, r5, r7
 8001096:	faa3 f587 	sel	r5, r3, r7
 800109a:	fa86 f647 	uadd8	r6, r6, r7
 800109e:	faa5 f687 	sel	r6, r5, r7
 80010a2:	b98e      	cbnz	r6, 80010c8 <memchr+0x78>
 80010a4:	d1ee      	bne.n	8001084 <memchr+0x34>
 80010a6:	bcf0      	pop	{r4, r5, r6, r7}
 80010a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80010ac:	f002 0207 	and.w	r2, r2, #7
 80010b0:	b132      	cbz	r2, 80010c0 <memchr+0x70>
 80010b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80010b6:	3a01      	subs	r2, #1
 80010b8:	ea83 0301 	eor.w	r3, r3, r1
 80010bc:	b113      	cbz	r3, 80010c4 <memchr+0x74>
 80010be:	d1f8      	bne.n	80010b2 <memchr+0x62>
 80010c0:	2000      	movs	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	3801      	subs	r0, #1
 80010c6:	4770      	bx	lr
 80010c8:	2d00      	cmp	r5, #0
 80010ca:	bf06      	itte	eq
 80010cc:	4635      	moveq	r5, r6
 80010ce:	3803      	subeq	r0, #3
 80010d0:	3807      	subne	r0, #7
 80010d2:	f015 0f01 	tst.w	r5, #1
 80010d6:	d107      	bne.n	80010e8 <memchr+0x98>
 80010d8:	3001      	adds	r0, #1
 80010da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80010de:	bf02      	ittt	eq
 80010e0:	3001      	addeq	r0, #1
 80010e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80010e6:	3001      	addeq	r0, #1
 80010e8:	bcf0      	pop	{r4, r5, r6, r7}
 80010ea:	3801      	subs	r0, #1
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_drsub>:
 80010f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80010f4:	e002      	b.n	80010fc <__adddf3>
 80010f6:	bf00      	nop

080010f8 <__aeabi_dsub>:
 80010f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080010fc <__adddf3>:
 80010fc:	b530      	push	{r4, r5, lr}
 80010fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8001102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8001106:	ea94 0f05 	teq	r4, r5
 800110a:	bf08      	it	eq
 800110c:	ea90 0f02 	teqeq	r0, r2
 8001110:	bf1f      	itttt	ne
 8001112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8001116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800111a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800111e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001122:	f000 80e2 	beq.w	80012ea <__adddf3+0x1ee>
 8001126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800112a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800112e:	bfb8      	it	lt
 8001130:	426d      	neglt	r5, r5
 8001132:	dd0c      	ble.n	800114e <__adddf3+0x52>
 8001134:	442c      	add	r4, r5
 8001136:	ea80 0202 	eor.w	r2, r0, r2
 800113a:	ea81 0303 	eor.w	r3, r1, r3
 800113e:	ea82 0000 	eor.w	r0, r2, r0
 8001142:	ea83 0101 	eor.w	r1, r3, r1
 8001146:	ea80 0202 	eor.w	r2, r0, r2
 800114a:	ea81 0303 	eor.w	r3, r1, r3
 800114e:	2d36      	cmp	r5, #54	; 0x36
 8001150:	bf88      	it	hi
 8001152:	bd30      	pophi	{r4, r5, pc}
 8001154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800115c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8001160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8001164:	d002      	beq.n	800116c <__adddf3+0x70>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8001170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8001178:	d002      	beq.n	8001180 <__adddf3+0x84>
 800117a:	4252      	negs	r2, r2
 800117c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001180:	ea94 0f05 	teq	r4, r5
 8001184:	f000 80a7 	beq.w	80012d6 <__adddf3+0x1da>
 8001188:	f1a4 0401 	sub.w	r4, r4, #1
 800118c:	f1d5 0e20 	rsbs	lr, r5, #32
 8001190:	db0d      	blt.n	80011ae <__adddf3+0xb2>
 8001192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8001196:	fa22 f205 	lsr.w	r2, r2, r5
 800119a:	1880      	adds	r0, r0, r2
 800119c:	f141 0100 	adc.w	r1, r1, #0
 80011a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80011a4:	1880      	adds	r0, r0, r2
 80011a6:	fa43 f305 	asr.w	r3, r3, r5
 80011aa:	4159      	adcs	r1, r3
 80011ac:	e00e      	b.n	80011cc <__adddf3+0xd0>
 80011ae:	f1a5 0520 	sub.w	r5, r5, #32
 80011b2:	f10e 0e20 	add.w	lr, lr, #32
 80011b6:	2a01      	cmp	r2, #1
 80011b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80011bc:	bf28      	it	cs
 80011be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80011c2:	fa43 f305 	asr.w	r3, r3, r5
 80011c6:	18c0      	adds	r0, r0, r3
 80011c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80011cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80011d0:	d507      	bpl.n	80011e2 <__adddf3+0xe6>
 80011d2:	f04f 0e00 	mov.w	lr, #0
 80011d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80011da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80011de:	eb6e 0101 	sbc.w	r1, lr, r1
 80011e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80011e6:	d31b      	bcc.n	8001220 <__adddf3+0x124>
 80011e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80011ec:	d30c      	bcc.n	8001208 <__adddf3+0x10c>
 80011ee:	0849      	lsrs	r1, r1, #1
 80011f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80011f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80011f8:	f104 0401 	add.w	r4, r4, #1
 80011fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8001200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8001204:	f080 809a 	bcs.w	800133c <__adddf3+0x240>
 8001208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800120c:	bf08      	it	eq
 800120e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001212:	f150 0000 	adcs.w	r0, r0, #0
 8001216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800121a:	ea41 0105 	orr.w	r1, r1, r5
 800121e:	bd30      	pop	{r4, r5, pc}
 8001220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8001224:	4140      	adcs	r0, r0
 8001226:	eb41 0101 	adc.w	r1, r1, r1
 800122a:	3c01      	subs	r4, #1
 800122c:	bf28      	it	cs
 800122e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8001232:	d2e9      	bcs.n	8001208 <__adddf3+0x10c>
 8001234:	f091 0f00 	teq	r1, #0
 8001238:	bf04      	itt	eq
 800123a:	4601      	moveq	r1, r0
 800123c:	2000      	moveq	r0, #0
 800123e:	fab1 f381 	clz	r3, r1
 8001242:	bf08      	it	eq
 8001244:	3320      	addeq	r3, #32
 8001246:	f1a3 030b 	sub.w	r3, r3, #11
 800124a:	f1b3 0220 	subs.w	r2, r3, #32
 800124e:	da0c      	bge.n	800126a <__adddf3+0x16e>
 8001250:	320c      	adds	r2, #12
 8001252:	dd08      	ble.n	8001266 <__adddf3+0x16a>
 8001254:	f102 0c14 	add.w	ip, r2, #20
 8001258:	f1c2 020c 	rsb	r2, r2, #12
 800125c:	fa01 f00c 	lsl.w	r0, r1, ip
 8001260:	fa21 f102 	lsr.w	r1, r1, r2
 8001264:	e00c      	b.n	8001280 <__adddf3+0x184>
 8001266:	f102 0214 	add.w	r2, r2, #20
 800126a:	bfd8      	it	le
 800126c:	f1c2 0c20 	rsble	ip, r2, #32
 8001270:	fa01 f102 	lsl.w	r1, r1, r2
 8001274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8001278:	bfdc      	itt	le
 800127a:	ea41 010c 	orrle.w	r1, r1, ip
 800127e:	4090      	lslle	r0, r2
 8001280:	1ae4      	subs	r4, r4, r3
 8001282:	bfa2      	ittt	ge
 8001284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8001288:	4329      	orrge	r1, r5
 800128a:	bd30      	popge	{r4, r5, pc}
 800128c:	ea6f 0404 	mvn.w	r4, r4
 8001290:	3c1f      	subs	r4, #31
 8001292:	da1c      	bge.n	80012ce <__adddf3+0x1d2>
 8001294:	340c      	adds	r4, #12
 8001296:	dc0e      	bgt.n	80012b6 <__adddf3+0x1ba>
 8001298:	f104 0414 	add.w	r4, r4, #20
 800129c:	f1c4 0220 	rsb	r2, r4, #32
 80012a0:	fa20 f004 	lsr.w	r0, r0, r4
 80012a4:	fa01 f302 	lsl.w	r3, r1, r2
 80012a8:	ea40 0003 	orr.w	r0, r0, r3
 80012ac:	fa21 f304 	lsr.w	r3, r1, r4
 80012b0:	ea45 0103 	orr.w	r1, r5, r3
 80012b4:	bd30      	pop	{r4, r5, pc}
 80012b6:	f1c4 040c 	rsb	r4, r4, #12
 80012ba:	f1c4 0220 	rsb	r2, r4, #32
 80012be:	fa20 f002 	lsr.w	r0, r0, r2
 80012c2:	fa01 f304 	lsl.w	r3, r1, r4
 80012c6:	ea40 0003 	orr.w	r0, r0, r3
 80012ca:	4629      	mov	r1, r5
 80012cc:	bd30      	pop	{r4, r5, pc}
 80012ce:	fa21 f004 	lsr.w	r0, r1, r4
 80012d2:	4629      	mov	r1, r5
 80012d4:	bd30      	pop	{r4, r5, pc}
 80012d6:	f094 0f00 	teq	r4, #0
 80012da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80012de:	bf06      	itte	eq
 80012e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80012e4:	3401      	addeq	r4, #1
 80012e6:	3d01      	subne	r5, #1
 80012e8:	e74e      	b.n	8001188 <__adddf3+0x8c>
 80012ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80012ee:	bf18      	it	ne
 80012f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80012f4:	d029      	beq.n	800134a <__adddf3+0x24e>
 80012f6:	ea94 0f05 	teq	r4, r5
 80012fa:	bf08      	it	eq
 80012fc:	ea90 0f02 	teqeq	r0, r2
 8001300:	d005      	beq.n	800130e <__adddf3+0x212>
 8001302:	ea54 0c00 	orrs.w	ip, r4, r0
 8001306:	bf04      	itt	eq
 8001308:	4619      	moveq	r1, r3
 800130a:	4610      	moveq	r0, r2
 800130c:	bd30      	pop	{r4, r5, pc}
 800130e:	ea91 0f03 	teq	r1, r3
 8001312:	bf1e      	ittt	ne
 8001314:	2100      	movne	r1, #0
 8001316:	2000      	movne	r0, #0
 8001318:	bd30      	popne	{r4, r5, pc}
 800131a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800131e:	d105      	bne.n	800132c <__adddf3+0x230>
 8001320:	0040      	lsls	r0, r0, #1
 8001322:	4149      	adcs	r1, r1
 8001324:	bf28      	it	cs
 8001326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800132a:	bd30      	pop	{r4, r5, pc}
 800132c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8001330:	bf3c      	itt	cc
 8001332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8001336:	bd30      	popcc	{r4, r5, pc}
 8001338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800133c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8001340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001344:	f04f 0000 	mov.w	r0, #0
 8001348:	bd30      	pop	{r4, r5, pc}
 800134a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800134e:	bf1a      	itte	ne
 8001350:	4619      	movne	r1, r3
 8001352:	4610      	movne	r0, r2
 8001354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8001358:	bf1c      	itt	ne
 800135a:	460b      	movne	r3, r1
 800135c:	4602      	movne	r2, r0
 800135e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001362:	bf06      	itte	eq
 8001364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8001368:	ea91 0f03 	teqeq	r1, r3
 800136c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8001370:	bd30      	pop	{r4, r5, pc}
 8001372:	bf00      	nop

08001374 <__aeabi_ui2d>:
 8001374:	f090 0f00 	teq	r0, #0
 8001378:	bf04      	itt	eq
 800137a:	2100      	moveq	r1, #0
 800137c:	4770      	bxeq	lr
 800137e:	b530      	push	{r4, r5, lr}
 8001380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001388:	f04f 0500 	mov.w	r5, #0
 800138c:	f04f 0100 	mov.w	r1, #0
 8001390:	e750      	b.n	8001234 <__adddf3+0x138>
 8001392:	bf00      	nop

08001394 <__aeabi_i2d>:
 8001394:	f090 0f00 	teq	r0, #0
 8001398:	bf04      	itt	eq
 800139a:	2100      	moveq	r1, #0
 800139c:	4770      	bxeq	lr
 800139e:	b530      	push	{r4, r5, lr}
 80013a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80013a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80013a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80013ac:	bf48      	it	mi
 80013ae:	4240      	negmi	r0, r0
 80013b0:	f04f 0100 	mov.w	r1, #0
 80013b4:	e73e      	b.n	8001234 <__adddf3+0x138>
 80013b6:	bf00      	nop

080013b8 <__aeabi_f2d>:
 80013b8:	0042      	lsls	r2, r0, #1
 80013ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80013be:	ea4f 0131 	mov.w	r1, r1, rrx
 80013c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80013c6:	bf1f      	itttt	ne
 80013c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80013cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80013d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80013d4:	4770      	bxne	lr
 80013d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80013da:	bf08      	it	eq
 80013dc:	4770      	bxeq	lr
 80013de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80013e2:	bf04      	itt	eq
 80013e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80013e8:	4770      	bxeq	lr
 80013ea:	b530      	push	{r4, r5, lr}
 80013ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80013f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80013f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80013f8:	e71c      	b.n	8001234 <__adddf3+0x138>
 80013fa:	bf00      	nop

080013fc <__aeabi_ul2d>:
 80013fc:	ea50 0201 	orrs.w	r2, r0, r1
 8001400:	bf08      	it	eq
 8001402:	4770      	bxeq	lr
 8001404:	b530      	push	{r4, r5, lr}
 8001406:	f04f 0500 	mov.w	r5, #0
 800140a:	e00a      	b.n	8001422 <__aeabi_l2d+0x16>

0800140c <__aeabi_l2d>:
 800140c:	ea50 0201 	orrs.w	r2, r0, r1
 8001410:	bf08      	it	eq
 8001412:	4770      	bxeq	lr
 8001414:	b530      	push	{r4, r5, lr}
 8001416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800141a:	d502      	bpl.n	8001422 <__aeabi_l2d+0x16>
 800141c:	4240      	negs	r0, r0
 800141e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800142a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800142e:	f43f aed8 	beq.w	80011e2 <__adddf3+0xe6>
 8001432:	f04f 0203 	mov.w	r2, #3
 8001436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800143a:	bf18      	it	ne
 800143c:	3203      	addne	r2, #3
 800143e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001442:	bf18      	it	ne
 8001444:	3203      	addne	r2, #3
 8001446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800144a:	f1c2 0320 	rsb	r3, r2, #32
 800144e:	fa00 fc03 	lsl.w	ip, r0, r3
 8001452:	fa20 f002 	lsr.w	r0, r0, r2
 8001456:	fa01 fe03 	lsl.w	lr, r1, r3
 800145a:	ea40 000e 	orr.w	r0, r0, lr
 800145e:	fa21 f102 	lsr.w	r1, r1, r2
 8001462:	4414      	add	r4, r2
 8001464:	e6bd      	b.n	80011e2 <__adddf3+0xe6>
 8001466:	bf00      	nop

08001468 <__aeabi_dmul>:
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800146e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001476:	bf1d      	ittte	ne
 8001478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800147c:	ea94 0f0c 	teqne	r4, ip
 8001480:	ea95 0f0c 	teqne	r5, ip
 8001484:	f000 f8de 	bleq	8001644 <__aeabi_dmul+0x1dc>
 8001488:	442c      	add	r4, r5
 800148a:	ea81 0603 	eor.w	r6, r1, r3
 800148e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8001492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8001496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800149a:	bf18      	it	ne
 800149c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80014a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80014a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014a8:	d038      	beq.n	800151c <__aeabi_dmul+0xb4>
 80014aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80014ae:	f04f 0500 	mov.w	r5, #0
 80014b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80014b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80014ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80014be:	f04f 0600 	mov.w	r6, #0
 80014c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80014c6:	f09c 0f00 	teq	ip, #0
 80014ca:	bf18      	it	ne
 80014cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80014d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80014d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80014d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80014dc:	d204      	bcs.n	80014e8 <__aeabi_dmul+0x80>
 80014de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80014e2:	416d      	adcs	r5, r5
 80014e4:	eb46 0606 	adc.w	r6, r6, r6
 80014e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80014ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80014f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80014f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80014f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80014fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8001500:	bf88      	it	hi
 8001502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001506:	d81e      	bhi.n	8001546 <__aeabi_dmul+0xde>
 8001508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800150c:	bf08      	it	eq
 800150e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8001512:	f150 0000 	adcs.w	r0, r0, #0
 8001516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800151a:	bd70      	pop	{r4, r5, r6, pc}
 800151c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8001520:	ea46 0101 	orr.w	r1, r6, r1
 8001524:	ea40 0002 	orr.w	r0, r0, r2
 8001528:	ea81 0103 	eor.w	r1, r1, r3
 800152c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001530:	bfc2      	ittt	gt
 8001532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800153a:	bd70      	popgt	{r4, r5, r6, pc}
 800153c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001540:	f04f 0e00 	mov.w	lr, #0
 8001544:	3c01      	subs	r4, #1
 8001546:	f300 80ab 	bgt.w	80016a0 <__aeabi_dmul+0x238>
 800154a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800154e:	bfde      	ittt	le
 8001550:	2000      	movle	r0, #0
 8001552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8001556:	bd70      	pople	{r4, r5, r6, pc}
 8001558:	f1c4 0400 	rsb	r4, r4, #0
 800155c:	3c20      	subs	r4, #32
 800155e:	da35      	bge.n	80015cc <__aeabi_dmul+0x164>
 8001560:	340c      	adds	r4, #12
 8001562:	dc1b      	bgt.n	800159c <__aeabi_dmul+0x134>
 8001564:	f104 0414 	add.w	r4, r4, #20
 8001568:	f1c4 0520 	rsb	r5, r4, #32
 800156c:	fa00 f305 	lsl.w	r3, r0, r5
 8001570:	fa20 f004 	lsr.w	r0, r0, r4
 8001574:	fa01 f205 	lsl.w	r2, r1, r5
 8001578:	ea40 0002 	orr.w	r0, r0, r2
 800157c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8001580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001588:	fa21 f604 	lsr.w	r6, r1, r4
 800158c:	eb42 0106 	adc.w	r1, r2, r6
 8001590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001594:	bf08      	it	eq
 8001596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800159a:	bd70      	pop	{r4, r5, r6, pc}
 800159c:	f1c4 040c 	rsb	r4, r4, #12
 80015a0:	f1c4 0520 	rsb	r5, r4, #32
 80015a4:	fa00 f304 	lsl.w	r3, r0, r4
 80015a8:	fa20 f005 	lsr.w	r0, r0, r5
 80015ac:	fa01 f204 	lsl.w	r2, r1, r4
 80015b0:	ea40 0002 	orr.w	r0, r0, r2
 80015b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80015b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80015bc:	f141 0100 	adc.w	r1, r1, #0
 80015c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80015c4:	bf08      	it	eq
 80015c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80015ca:	bd70      	pop	{r4, r5, r6, pc}
 80015cc:	f1c4 0520 	rsb	r5, r4, #32
 80015d0:	fa00 f205 	lsl.w	r2, r0, r5
 80015d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80015d8:	fa20 f304 	lsr.w	r3, r0, r4
 80015dc:	fa01 f205 	lsl.w	r2, r1, r5
 80015e0:	ea43 0302 	orr.w	r3, r3, r2
 80015e4:	fa21 f004 	lsr.w	r0, r1, r4
 80015e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80015ec:	fa21 f204 	lsr.w	r2, r1, r4
 80015f0:	ea20 0002 	bic.w	r0, r0, r2
 80015f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80015f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80015fc:	bf08      	it	eq
 80015fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001602:	bd70      	pop	{r4, r5, r6, pc}
 8001604:	f094 0f00 	teq	r4, #0
 8001608:	d10f      	bne.n	800162a <__aeabi_dmul+0x1c2>
 800160a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800160e:	0040      	lsls	r0, r0, #1
 8001610:	eb41 0101 	adc.w	r1, r1, r1
 8001614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001618:	bf08      	it	eq
 800161a:	3c01      	subeq	r4, #1
 800161c:	d0f7      	beq.n	800160e <__aeabi_dmul+0x1a6>
 800161e:	ea41 0106 	orr.w	r1, r1, r6
 8001622:	f095 0f00 	teq	r5, #0
 8001626:	bf18      	it	ne
 8001628:	4770      	bxne	lr
 800162a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800162e:	0052      	lsls	r2, r2, #1
 8001630:	eb43 0303 	adc.w	r3, r3, r3
 8001634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001638:	bf08      	it	eq
 800163a:	3d01      	subeq	r5, #1
 800163c:	d0f7      	beq.n	800162e <__aeabi_dmul+0x1c6>
 800163e:	ea43 0306 	orr.w	r3, r3, r6
 8001642:	4770      	bx	lr
 8001644:	ea94 0f0c 	teq	r4, ip
 8001648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800164c:	bf18      	it	ne
 800164e:	ea95 0f0c 	teqne	r5, ip
 8001652:	d00c      	beq.n	800166e <__aeabi_dmul+0x206>
 8001654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001658:	bf18      	it	ne
 800165a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800165e:	d1d1      	bne.n	8001604 <__aeabi_dmul+0x19c>
 8001660:	ea81 0103 	eor.w	r1, r1, r3
 8001664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001668:	f04f 0000 	mov.w	r0, #0
 800166c:	bd70      	pop	{r4, r5, r6, pc}
 800166e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001672:	bf06      	itte	eq
 8001674:	4610      	moveq	r0, r2
 8001676:	4619      	moveq	r1, r3
 8001678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800167c:	d019      	beq.n	80016b2 <__aeabi_dmul+0x24a>
 800167e:	ea94 0f0c 	teq	r4, ip
 8001682:	d102      	bne.n	800168a <__aeabi_dmul+0x222>
 8001684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001688:	d113      	bne.n	80016b2 <__aeabi_dmul+0x24a>
 800168a:	ea95 0f0c 	teq	r5, ip
 800168e:	d105      	bne.n	800169c <__aeabi_dmul+0x234>
 8001690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001694:	bf1c      	itt	ne
 8001696:	4610      	movne	r0, r2
 8001698:	4619      	movne	r1, r3
 800169a:	d10a      	bne.n	80016b2 <__aeabi_dmul+0x24a>
 800169c:	ea81 0103 	eor.w	r1, r1, r3
 80016a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80016a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80016a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
 80016b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80016b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80016ba:	bd70      	pop	{r4, r5, r6, pc}

080016bc <__aeabi_ddiv>:
 80016bc:	b570      	push	{r4, r5, r6, lr}
 80016be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80016c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80016c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80016ca:	bf1d      	ittte	ne
 80016cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80016d0:	ea94 0f0c 	teqne	r4, ip
 80016d4:	ea95 0f0c 	teqne	r5, ip
 80016d8:	f000 f8a7 	bleq	800182a <__aeabi_ddiv+0x16e>
 80016dc:	eba4 0405 	sub.w	r4, r4, r5
 80016e0:	ea81 0e03 	eor.w	lr, r1, r3
 80016e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80016e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80016ec:	f000 8088 	beq.w	8001800 <__aeabi_ddiv+0x144>
 80016f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80016f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80016f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80016fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8001700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8001704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8001708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800170c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8001710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8001714:	429d      	cmp	r5, r3
 8001716:	bf08      	it	eq
 8001718:	4296      	cmpeq	r6, r2
 800171a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800171e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8001722:	d202      	bcs.n	800172a <__aeabi_ddiv+0x6e>
 8001724:	085b      	lsrs	r3, r3, #1
 8001726:	ea4f 0232 	mov.w	r2, r2, rrx
 800172a:	1ab6      	subs	r6, r6, r2
 800172c:	eb65 0503 	sbc.w	r5, r5, r3
 8001730:	085b      	lsrs	r3, r3, #1
 8001732:	ea4f 0232 	mov.w	r2, r2, rrx
 8001736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800173a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800173e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001746:	bf22      	ittt	cs
 8001748:	1ab6      	subcs	r6, r6, r2
 800174a:	4675      	movcs	r5, lr
 800174c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001750:	085b      	lsrs	r3, r3, #1
 8001752:	ea4f 0232 	mov.w	r2, r2, rrx
 8001756:	ebb6 0e02 	subs.w	lr, r6, r2
 800175a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800175e:	bf22      	ittt	cs
 8001760:	1ab6      	subcs	r6, r6, r2
 8001762:	4675      	movcs	r5, lr
 8001764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	ea4f 0232 	mov.w	r2, r2, rrx
 800176e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001776:	bf22      	ittt	cs
 8001778:	1ab6      	subcs	r6, r6, r2
 800177a:	4675      	movcs	r5, lr
 800177c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	ea4f 0232 	mov.w	r2, r2, rrx
 8001786:	ebb6 0e02 	subs.w	lr, r6, r2
 800178a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800178e:	bf22      	ittt	cs
 8001790:	1ab6      	subcs	r6, r6, r2
 8001792:	4675      	movcs	r5, lr
 8001794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001798:	ea55 0e06 	orrs.w	lr, r5, r6
 800179c:	d018      	beq.n	80017d0 <__aeabi_ddiv+0x114>
 800179e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80017a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80017a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80017aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80017ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80017b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80017b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80017ba:	d1c0      	bne.n	800173e <__aeabi_ddiv+0x82>
 80017bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80017c0:	d10b      	bne.n	80017da <__aeabi_ddiv+0x11e>
 80017c2:	ea41 0100 	orr.w	r1, r1, r0
 80017c6:	f04f 0000 	mov.w	r0, #0
 80017ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80017ce:	e7b6      	b.n	800173e <__aeabi_ddiv+0x82>
 80017d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80017d4:	bf04      	itt	eq
 80017d6:	4301      	orreq	r1, r0
 80017d8:	2000      	moveq	r0, #0
 80017da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80017de:	bf88      	it	hi
 80017e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80017e4:	f63f aeaf 	bhi.w	8001546 <__aeabi_dmul+0xde>
 80017e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80017ec:	bf04      	itt	eq
 80017ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80017f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80017f6:	f150 0000 	adcs.w	r0, r0, #0
 80017fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80017fe:	bd70      	pop	{r4, r5, r6, pc}
 8001800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8001804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800180c:	bfc2      	ittt	gt
 800180e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001816:	bd70      	popgt	{r4, r5, r6, pc}
 8001818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800181c:	f04f 0e00 	mov.w	lr, #0
 8001820:	3c01      	subs	r4, #1
 8001822:	e690      	b.n	8001546 <__aeabi_dmul+0xde>
 8001824:	ea45 0e06 	orr.w	lr, r5, r6
 8001828:	e68d      	b.n	8001546 <__aeabi_dmul+0xde>
 800182a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800182e:	ea94 0f0c 	teq	r4, ip
 8001832:	bf08      	it	eq
 8001834:	ea95 0f0c 	teqeq	r5, ip
 8001838:	f43f af3b 	beq.w	80016b2 <__aeabi_dmul+0x24a>
 800183c:	ea94 0f0c 	teq	r4, ip
 8001840:	d10a      	bne.n	8001858 <__aeabi_ddiv+0x19c>
 8001842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001846:	f47f af34 	bne.w	80016b2 <__aeabi_dmul+0x24a>
 800184a:	ea95 0f0c 	teq	r5, ip
 800184e:	f47f af25 	bne.w	800169c <__aeabi_dmul+0x234>
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	e72c      	b.n	80016b2 <__aeabi_dmul+0x24a>
 8001858:	ea95 0f0c 	teq	r5, ip
 800185c:	d106      	bne.n	800186c <__aeabi_ddiv+0x1b0>
 800185e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001862:	f43f aefd 	beq.w	8001660 <__aeabi_dmul+0x1f8>
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	e722      	b.n	80016b2 <__aeabi_dmul+0x24a>
 800186c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001870:	bf18      	it	ne
 8001872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001876:	f47f aec5 	bne.w	8001604 <__aeabi_dmul+0x19c>
 800187a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800187e:	f47f af0d 	bne.w	800169c <__aeabi_dmul+0x234>
 8001882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001886:	f47f aeeb 	bne.w	8001660 <__aeabi_dmul+0x1f8>
 800188a:	e712      	b.n	80016b2 <__aeabi_dmul+0x24a>

0800188c <__gedf2>:
 800188c:	f04f 3cff 	mov.w	ip, #4294967295
 8001890:	e006      	b.n	80018a0 <__cmpdf2+0x4>
 8001892:	bf00      	nop

08001894 <__ledf2>:
 8001894:	f04f 0c01 	mov.w	ip, #1
 8001898:	e002      	b.n	80018a0 <__cmpdf2+0x4>
 800189a:	bf00      	nop

0800189c <__cmpdf2>:
 800189c:	f04f 0c01 	mov.w	ip, #1
 80018a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80018a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80018a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80018ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80018b0:	bf18      	it	ne
 80018b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80018b6:	d01b      	beq.n	80018f0 <__cmpdf2+0x54>
 80018b8:	b001      	add	sp, #4
 80018ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80018be:	bf0c      	ite	eq
 80018c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80018c4:	ea91 0f03 	teqne	r1, r3
 80018c8:	bf02      	ittt	eq
 80018ca:	ea90 0f02 	teqeq	r0, r2
 80018ce:	2000      	moveq	r0, #0
 80018d0:	4770      	bxeq	lr
 80018d2:	f110 0f00 	cmn.w	r0, #0
 80018d6:	ea91 0f03 	teq	r1, r3
 80018da:	bf58      	it	pl
 80018dc:	4299      	cmppl	r1, r3
 80018de:	bf08      	it	eq
 80018e0:	4290      	cmpeq	r0, r2
 80018e2:	bf2c      	ite	cs
 80018e4:	17d8      	asrcs	r0, r3, #31
 80018e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80018ea:	f040 0001 	orr.w	r0, r0, #1
 80018ee:	4770      	bx	lr
 80018f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80018f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80018f8:	d102      	bne.n	8001900 <__cmpdf2+0x64>
 80018fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80018fe:	d107      	bne.n	8001910 <__cmpdf2+0x74>
 8001900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001908:	d1d6      	bne.n	80018b8 <__cmpdf2+0x1c>
 800190a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800190e:	d0d3      	beq.n	80018b8 <__cmpdf2+0x1c>
 8001910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop

08001918 <__aeabi_cdrcmple>:
 8001918:	4684      	mov	ip, r0
 800191a:	4610      	mov	r0, r2
 800191c:	4662      	mov	r2, ip
 800191e:	468c      	mov	ip, r1
 8001920:	4619      	mov	r1, r3
 8001922:	4663      	mov	r3, ip
 8001924:	e000      	b.n	8001928 <__aeabi_cdcmpeq>
 8001926:	bf00      	nop

08001928 <__aeabi_cdcmpeq>:
 8001928:	b501      	push	{r0, lr}
 800192a:	f7ff ffb7 	bl	800189c <__cmpdf2>
 800192e:	2800      	cmp	r0, #0
 8001930:	bf48      	it	mi
 8001932:	f110 0f00 	cmnmi.w	r0, #0
 8001936:	bd01      	pop	{r0, pc}

08001938 <__aeabi_dcmpeq>:
 8001938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800193c:	f7ff fff4 	bl	8001928 <__aeabi_cdcmpeq>
 8001940:	bf0c      	ite	eq
 8001942:	2001      	moveq	r0, #1
 8001944:	2000      	movne	r0, #0
 8001946:	f85d fb08 	ldr.w	pc, [sp], #8
 800194a:	bf00      	nop

0800194c <__aeabi_dcmplt>:
 800194c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001950:	f7ff ffea 	bl	8001928 <__aeabi_cdcmpeq>
 8001954:	bf34      	ite	cc
 8001956:	2001      	movcc	r0, #1
 8001958:	2000      	movcs	r0, #0
 800195a:	f85d fb08 	ldr.w	pc, [sp], #8
 800195e:	bf00      	nop

08001960 <__aeabi_dcmple>:
 8001960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001964:	f7ff ffe0 	bl	8001928 <__aeabi_cdcmpeq>
 8001968:	bf94      	ite	ls
 800196a:	2001      	movls	r0, #1
 800196c:	2000      	movhi	r0, #0
 800196e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001972:	bf00      	nop

08001974 <__aeabi_dcmpge>:
 8001974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001978:	f7ff ffce 	bl	8001918 <__aeabi_cdrcmple>
 800197c:	bf94      	ite	ls
 800197e:	2001      	movls	r0, #1
 8001980:	2000      	movhi	r0, #0
 8001982:	f85d fb08 	ldr.w	pc, [sp], #8
 8001986:	bf00      	nop

08001988 <__aeabi_dcmpgt>:
 8001988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800198c:	f7ff ffc4 	bl	8001918 <__aeabi_cdrcmple>
 8001990:	bf34      	ite	cc
 8001992:	2001      	movcc	r0, #1
 8001994:	2000      	movcs	r0, #0
 8001996:	f85d fb08 	ldr.w	pc, [sp], #8
 800199a:	bf00      	nop

0800199c <__aeabi_dcmpun>:
 800199c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80019a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80019a4:	d102      	bne.n	80019ac <__aeabi_dcmpun+0x10>
 80019a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80019aa:	d10a      	bne.n	80019c2 <__aeabi_dcmpun+0x26>
 80019ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80019b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80019b4:	d102      	bne.n	80019bc <__aeabi_dcmpun+0x20>
 80019b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80019ba:	d102      	bne.n	80019c2 <__aeabi_dcmpun+0x26>
 80019bc:	f04f 0000 	mov.w	r0, #0
 80019c0:	4770      	bx	lr
 80019c2:	f04f 0001 	mov.w	r0, #1
 80019c6:	4770      	bx	lr

080019c8 <__aeabi_d2iz>:
 80019c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80019cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80019d0:	d215      	bcs.n	80019fe <__aeabi_d2iz+0x36>
 80019d2:	d511      	bpl.n	80019f8 <__aeabi_d2iz+0x30>
 80019d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80019d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80019dc:	d912      	bls.n	8001a04 <__aeabi_d2iz+0x3c>
 80019de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80019e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80019ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80019ee:	fa23 f002 	lsr.w	r0, r3, r2
 80019f2:	bf18      	it	ne
 80019f4:	4240      	negne	r0, r0
 80019f6:	4770      	bx	lr
 80019f8:	f04f 0000 	mov.w	r0, #0
 80019fc:	4770      	bx	lr
 80019fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001a02:	d105      	bne.n	8001a10 <__aeabi_d2iz+0x48>
 8001a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001a08:	bf08      	it	eq
 8001a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001a0e:	4770      	bx	lr
 8001a10:	f04f 0000 	mov.w	r0, #0
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop

08001a18 <__aeabi_d2f>:
 8001a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8001a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8001a20:	bf24      	itt	cs
 8001a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8001a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8001a2a:	d90d      	bls.n	8001a48 <__aeabi_d2f+0x30>
 8001a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8001a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8001a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8001a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8001a40:	bf08      	it	eq
 8001a42:	f020 0001 	biceq.w	r0, r0, #1
 8001a46:	4770      	bx	lr
 8001a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8001a4c:	d121      	bne.n	8001a92 <__aeabi_d2f+0x7a>
 8001a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8001a52:	bfbc      	itt	lt
 8001a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8001a58:	4770      	bxlt	lr
 8001a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8001a62:	f1c2 0218 	rsb	r2, r2, #24
 8001a66:	f1c2 0c20 	rsb	ip, r2, #32
 8001a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8001a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8001a72:	bf18      	it	ne
 8001a74:	f040 0001 	orrne.w	r0, r0, #1
 8001a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8001a84:	ea40 000c 	orr.w	r0, r0, ip
 8001a88:	fa23 f302 	lsr.w	r3, r3, r2
 8001a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001a90:	e7cc      	b.n	8001a2c <__aeabi_d2f+0x14>
 8001a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8001a96:	d107      	bne.n	8001aa8 <__aeabi_d2f+0x90>
 8001a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8001a9c:	bf1e      	ittt	ne
 8001a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8001aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8001aa6:	4770      	bxne	lr
 8001aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8001aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop

08001ab8 <__aeabi_ldivmod>:
 8001ab8:	b97b      	cbnz	r3, 8001ada <__aeabi_ldivmod+0x22>
 8001aba:	b972      	cbnz	r2, 8001ada <__aeabi_ldivmod+0x22>
 8001abc:	2900      	cmp	r1, #0
 8001abe:	bfbe      	ittt	lt
 8001ac0:	2000      	movlt	r0, #0
 8001ac2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8001ac6:	e006      	blt.n	8001ad6 <__aeabi_ldivmod+0x1e>
 8001ac8:	bf08      	it	eq
 8001aca:	2800      	cmpeq	r0, #0
 8001acc:	bf1c      	itt	ne
 8001ace:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8001ad2:	f04f 30ff 	movne.w	r0, #4294967295
 8001ad6:	f000 b9b9 	b.w	8001e4c <__aeabi_idiv0>
 8001ada:	f1ad 0c08 	sub.w	ip, sp, #8
 8001ade:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001ae2:	2900      	cmp	r1, #0
 8001ae4:	db09      	blt.n	8001afa <__aeabi_ldivmod+0x42>
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db1a      	blt.n	8001b20 <__aeabi_ldivmod+0x68>
 8001aea:	f000 f84d 	bl	8001b88 <__udivmoddi4>
 8001aee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001af2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001af6:	b004      	add	sp, #16
 8001af8:	4770      	bx	lr
 8001afa:	4240      	negs	r0, r0
 8001afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db1b      	blt.n	8001b3c <__aeabi_ldivmod+0x84>
 8001b04:	f000 f840 	bl	8001b88 <__udivmoddi4>
 8001b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001b10:	b004      	add	sp, #16
 8001b12:	4240      	negs	r0, r0
 8001b14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001b18:	4252      	negs	r2, r2
 8001b1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001b1e:	4770      	bx	lr
 8001b20:	4252      	negs	r2, r2
 8001b22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001b26:	f000 f82f 	bl	8001b88 <__udivmoddi4>
 8001b2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001b2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001b32:	b004      	add	sp, #16
 8001b34:	4240      	negs	r0, r0
 8001b36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001b3a:	4770      	bx	lr
 8001b3c:	4252      	negs	r2, r2
 8001b3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001b42:	f000 f821 	bl	8001b88 <__udivmoddi4>
 8001b46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001b4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001b4e:	b004      	add	sp, #16
 8001b50:	4252      	negs	r2, r2
 8001b52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001b56:	4770      	bx	lr

08001b58 <__aeabi_uldivmod>:
 8001b58:	b953      	cbnz	r3, 8001b70 <__aeabi_uldivmod+0x18>
 8001b5a:	b94a      	cbnz	r2, 8001b70 <__aeabi_uldivmod+0x18>
 8001b5c:	2900      	cmp	r1, #0
 8001b5e:	bf08      	it	eq
 8001b60:	2800      	cmpeq	r0, #0
 8001b62:	bf1c      	itt	ne
 8001b64:	f04f 31ff 	movne.w	r1, #4294967295
 8001b68:	f04f 30ff 	movne.w	r0, #4294967295
 8001b6c:	f000 b96e 	b.w	8001e4c <__aeabi_idiv0>
 8001b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8001b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001b78:	f000 f806 	bl	8001b88 <__udivmoddi4>
 8001b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001b84:	b004      	add	sp, #16
 8001b86:	4770      	bx	lr

08001b88 <__udivmoddi4>:
 8001b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b8c:	9d08      	ldr	r5, [sp, #32]
 8001b8e:	4604      	mov	r4, r0
 8001b90:	468c      	mov	ip, r1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 8083 	bne.w	8001c9e <__udivmoddi4+0x116>
 8001b98:	428a      	cmp	r2, r1
 8001b9a:	4617      	mov	r7, r2
 8001b9c:	d947      	bls.n	8001c2e <__udivmoddi4+0xa6>
 8001b9e:	fab2 f282 	clz	r2, r2
 8001ba2:	b142      	cbz	r2, 8001bb6 <__udivmoddi4+0x2e>
 8001ba4:	f1c2 0020 	rsb	r0, r2, #32
 8001ba8:	fa24 f000 	lsr.w	r0, r4, r0
 8001bac:	4091      	lsls	r1, r2
 8001bae:	4097      	lsls	r7, r2
 8001bb0:	ea40 0c01 	orr.w	ip, r0, r1
 8001bb4:	4094      	lsls	r4, r2
 8001bb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001bba:	0c23      	lsrs	r3, r4, #16
 8001bbc:	fbbc f6f8 	udiv	r6, ip, r8
 8001bc0:	fa1f fe87 	uxth.w	lr, r7
 8001bc4:	fb08 c116 	mls	r1, r8, r6, ip
 8001bc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001bcc:	fb06 f10e 	mul.w	r1, r6, lr
 8001bd0:	4299      	cmp	r1, r3
 8001bd2:	d909      	bls.n	8001be8 <__udivmoddi4+0x60>
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8001bda:	f080 8119 	bcs.w	8001e10 <__udivmoddi4+0x288>
 8001bde:	4299      	cmp	r1, r3
 8001be0:	f240 8116 	bls.w	8001e10 <__udivmoddi4+0x288>
 8001be4:	3e02      	subs	r6, #2
 8001be6:	443b      	add	r3, r7
 8001be8:	1a5b      	subs	r3, r3, r1
 8001bea:	b2a4      	uxth	r4, r4
 8001bec:	fbb3 f0f8 	udiv	r0, r3, r8
 8001bf0:	fb08 3310 	mls	r3, r8, r0, r3
 8001bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001bf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8001bfc:	45a6      	cmp	lr, r4
 8001bfe:	d909      	bls.n	8001c14 <__udivmoddi4+0x8c>
 8001c00:	193c      	adds	r4, r7, r4
 8001c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8001c06:	f080 8105 	bcs.w	8001e14 <__udivmoddi4+0x28c>
 8001c0a:	45a6      	cmp	lr, r4
 8001c0c:	f240 8102 	bls.w	8001e14 <__udivmoddi4+0x28c>
 8001c10:	3802      	subs	r0, #2
 8001c12:	443c      	add	r4, r7
 8001c14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001c18:	eba4 040e 	sub.w	r4, r4, lr
 8001c1c:	2600      	movs	r6, #0
 8001c1e:	b11d      	cbz	r5, 8001c28 <__udivmoddi4+0xa0>
 8001c20:	40d4      	lsrs	r4, r2
 8001c22:	2300      	movs	r3, #0
 8001c24:	e9c5 4300 	strd	r4, r3, [r5]
 8001c28:	4631      	mov	r1, r6
 8001c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c2e:	b902      	cbnz	r2, 8001c32 <__udivmoddi4+0xaa>
 8001c30:	deff      	udf	#255	; 0xff
 8001c32:	fab2 f282 	clz	r2, r2
 8001c36:	2a00      	cmp	r2, #0
 8001c38:	d150      	bne.n	8001cdc <__udivmoddi4+0x154>
 8001c3a:	1bcb      	subs	r3, r1, r7
 8001c3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001c40:	fa1f f887 	uxth.w	r8, r7
 8001c44:	2601      	movs	r6, #1
 8001c46:	fbb3 fcfe 	udiv	ip, r3, lr
 8001c4a:	0c21      	lsrs	r1, r4, #16
 8001c4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8001c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001c54:	fb08 f30c 	mul.w	r3, r8, ip
 8001c58:	428b      	cmp	r3, r1
 8001c5a:	d907      	bls.n	8001c6c <__udivmoddi4+0xe4>
 8001c5c:	1879      	adds	r1, r7, r1
 8001c5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8001c62:	d202      	bcs.n	8001c6a <__udivmoddi4+0xe2>
 8001c64:	428b      	cmp	r3, r1
 8001c66:	f200 80e9 	bhi.w	8001e3c <__udivmoddi4+0x2b4>
 8001c6a:	4684      	mov	ip, r0
 8001c6c:	1ac9      	subs	r1, r1, r3
 8001c6e:	b2a3      	uxth	r3, r4
 8001c70:	fbb1 f0fe 	udiv	r0, r1, lr
 8001c74:	fb0e 1110 	mls	r1, lr, r0, r1
 8001c78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8001c7c:	fb08 f800 	mul.w	r8, r8, r0
 8001c80:	45a0      	cmp	r8, r4
 8001c82:	d907      	bls.n	8001c94 <__udivmoddi4+0x10c>
 8001c84:	193c      	adds	r4, r7, r4
 8001c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8001c8a:	d202      	bcs.n	8001c92 <__udivmoddi4+0x10a>
 8001c8c:	45a0      	cmp	r8, r4
 8001c8e:	f200 80d9 	bhi.w	8001e44 <__udivmoddi4+0x2bc>
 8001c92:	4618      	mov	r0, r3
 8001c94:	eba4 0408 	sub.w	r4, r4, r8
 8001c98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001c9c:	e7bf      	b.n	8001c1e <__udivmoddi4+0x96>
 8001c9e:	428b      	cmp	r3, r1
 8001ca0:	d909      	bls.n	8001cb6 <__udivmoddi4+0x12e>
 8001ca2:	2d00      	cmp	r5, #0
 8001ca4:	f000 80b1 	beq.w	8001e0a <__udivmoddi4+0x282>
 8001ca8:	2600      	movs	r6, #0
 8001caa:	e9c5 0100 	strd	r0, r1, [r5]
 8001cae:	4630      	mov	r0, r6
 8001cb0:	4631      	mov	r1, r6
 8001cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cb6:	fab3 f683 	clz	r6, r3
 8001cba:	2e00      	cmp	r6, #0
 8001cbc:	d14a      	bne.n	8001d54 <__udivmoddi4+0x1cc>
 8001cbe:	428b      	cmp	r3, r1
 8001cc0:	d302      	bcc.n	8001cc8 <__udivmoddi4+0x140>
 8001cc2:	4282      	cmp	r2, r0
 8001cc4:	f200 80b8 	bhi.w	8001e38 <__udivmoddi4+0x2b0>
 8001cc8:	1a84      	subs	r4, r0, r2
 8001cca:	eb61 0103 	sbc.w	r1, r1, r3
 8001cce:	2001      	movs	r0, #1
 8001cd0:	468c      	mov	ip, r1
 8001cd2:	2d00      	cmp	r5, #0
 8001cd4:	d0a8      	beq.n	8001c28 <__udivmoddi4+0xa0>
 8001cd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8001cda:	e7a5      	b.n	8001c28 <__udivmoddi4+0xa0>
 8001cdc:	f1c2 0320 	rsb	r3, r2, #32
 8001ce0:	fa20 f603 	lsr.w	r6, r0, r3
 8001ce4:	4097      	lsls	r7, r2
 8001ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8001cea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001cee:	40d9      	lsrs	r1, r3
 8001cf0:	4330      	orrs	r0, r6
 8001cf2:	0c03      	lsrs	r3, r0, #16
 8001cf4:	fbb1 f6fe 	udiv	r6, r1, lr
 8001cf8:	fa1f f887 	uxth.w	r8, r7
 8001cfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8001d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001d04:	fb06 f108 	mul.w	r1, r6, r8
 8001d08:	4299      	cmp	r1, r3
 8001d0a:	fa04 f402 	lsl.w	r4, r4, r2
 8001d0e:	d909      	bls.n	8001d24 <__udivmoddi4+0x19c>
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	f106 3cff 	add.w	ip, r6, #4294967295
 8001d16:	f080 808d 	bcs.w	8001e34 <__udivmoddi4+0x2ac>
 8001d1a:	4299      	cmp	r1, r3
 8001d1c:	f240 808a 	bls.w	8001e34 <__udivmoddi4+0x2ac>
 8001d20:	3e02      	subs	r6, #2
 8001d22:	443b      	add	r3, r7
 8001d24:	1a5b      	subs	r3, r3, r1
 8001d26:	b281      	uxth	r1, r0
 8001d28:	fbb3 f0fe 	udiv	r0, r3, lr
 8001d2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8001d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001d34:	fb00 f308 	mul.w	r3, r0, r8
 8001d38:	428b      	cmp	r3, r1
 8001d3a:	d907      	bls.n	8001d4c <__udivmoddi4+0x1c4>
 8001d3c:	1879      	adds	r1, r7, r1
 8001d3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8001d42:	d273      	bcs.n	8001e2c <__udivmoddi4+0x2a4>
 8001d44:	428b      	cmp	r3, r1
 8001d46:	d971      	bls.n	8001e2c <__udivmoddi4+0x2a4>
 8001d48:	3802      	subs	r0, #2
 8001d4a:	4439      	add	r1, r7
 8001d4c:	1acb      	subs	r3, r1, r3
 8001d4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001d52:	e778      	b.n	8001c46 <__udivmoddi4+0xbe>
 8001d54:	f1c6 0c20 	rsb	ip, r6, #32
 8001d58:	fa03 f406 	lsl.w	r4, r3, r6
 8001d5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8001d60:	431c      	orrs	r4, r3
 8001d62:	fa20 f70c 	lsr.w	r7, r0, ip
 8001d66:	fa01 f306 	lsl.w	r3, r1, r6
 8001d6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8001d6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8001d72:	431f      	orrs	r7, r3
 8001d74:	0c3b      	lsrs	r3, r7, #16
 8001d76:	fbb1 f9fe 	udiv	r9, r1, lr
 8001d7a:	fa1f f884 	uxth.w	r8, r4
 8001d7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8001d82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001d86:	fb09 fa08 	mul.w	sl, r9, r8
 8001d8a:	458a      	cmp	sl, r1
 8001d8c:	fa02 f206 	lsl.w	r2, r2, r6
 8001d90:	fa00 f306 	lsl.w	r3, r0, r6
 8001d94:	d908      	bls.n	8001da8 <__udivmoddi4+0x220>
 8001d96:	1861      	adds	r1, r4, r1
 8001d98:	f109 30ff 	add.w	r0, r9, #4294967295
 8001d9c:	d248      	bcs.n	8001e30 <__udivmoddi4+0x2a8>
 8001d9e:	458a      	cmp	sl, r1
 8001da0:	d946      	bls.n	8001e30 <__udivmoddi4+0x2a8>
 8001da2:	f1a9 0902 	sub.w	r9, r9, #2
 8001da6:	4421      	add	r1, r4
 8001da8:	eba1 010a 	sub.w	r1, r1, sl
 8001dac:	b2bf      	uxth	r7, r7
 8001dae:	fbb1 f0fe 	udiv	r0, r1, lr
 8001db2:	fb0e 1110 	mls	r1, lr, r0, r1
 8001db6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001dba:	fb00 f808 	mul.w	r8, r0, r8
 8001dbe:	45b8      	cmp	r8, r7
 8001dc0:	d907      	bls.n	8001dd2 <__udivmoddi4+0x24a>
 8001dc2:	19e7      	adds	r7, r4, r7
 8001dc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8001dc8:	d22e      	bcs.n	8001e28 <__udivmoddi4+0x2a0>
 8001dca:	45b8      	cmp	r8, r7
 8001dcc:	d92c      	bls.n	8001e28 <__udivmoddi4+0x2a0>
 8001dce:	3802      	subs	r0, #2
 8001dd0:	4427      	add	r7, r4
 8001dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001dd6:	eba7 0708 	sub.w	r7, r7, r8
 8001dda:	fba0 8902 	umull	r8, r9, r0, r2
 8001dde:	454f      	cmp	r7, r9
 8001de0:	46c6      	mov	lr, r8
 8001de2:	4649      	mov	r1, r9
 8001de4:	d31a      	bcc.n	8001e1c <__udivmoddi4+0x294>
 8001de6:	d017      	beq.n	8001e18 <__udivmoddi4+0x290>
 8001de8:	b15d      	cbz	r5, 8001e02 <__udivmoddi4+0x27a>
 8001dea:	ebb3 020e 	subs.w	r2, r3, lr
 8001dee:	eb67 0701 	sbc.w	r7, r7, r1
 8001df2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001df6:	40f2      	lsrs	r2, r6
 8001df8:	ea4c 0202 	orr.w	r2, ip, r2
 8001dfc:	40f7      	lsrs	r7, r6
 8001dfe:	e9c5 2700 	strd	r2, r7, [r5]
 8001e02:	2600      	movs	r6, #0
 8001e04:	4631      	mov	r1, r6
 8001e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e0a:	462e      	mov	r6, r5
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	e70b      	b.n	8001c28 <__udivmoddi4+0xa0>
 8001e10:	4606      	mov	r6, r0
 8001e12:	e6e9      	b.n	8001be8 <__udivmoddi4+0x60>
 8001e14:	4618      	mov	r0, r3
 8001e16:	e6fd      	b.n	8001c14 <__udivmoddi4+0x8c>
 8001e18:	4543      	cmp	r3, r8
 8001e1a:	d2e5      	bcs.n	8001de8 <__udivmoddi4+0x260>
 8001e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8001e20:	eb69 0104 	sbc.w	r1, r9, r4
 8001e24:	3801      	subs	r0, #1
 8001e26:	e7df      	b.n	8001de8 <__udivmoddi4+0x260>
 8001e28:	4608      	mov	r0, r1
 8001e2a:	e7d2      	b.n	8001dd2 <__udivmoddi4+0x24a>
 8001e2c:	4660      	mov	r0, ip
 8001e2e:	e78d      	b.n	8001d4c <__udivmoddi4+0x1c4>
 8001e30:	4681      	mov	r9, r0
 8001e32:	e7b9      	b.n	8001da8 <__udivmoddi4+0x220>
 8001e34:	4666      	mov	r6, ip
 8001e36:	e775      	b.n	8001d24 <__udivmoddi4+0x19c>
 8001e38:	4630      	mov	r0, r6
 8001e3a:	e74a      	b.n	8001cd2 <__udivmoddi4+0x14a>
 8001e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001e40:	4439      	add	r1, r7
 8001e42:	e713      	b.n	8001c6c <__udivmoddi4+0xe4>
 8001e44:	3802      	subs	r0, #2
 8001e46:	443c      	add	r4, r7
 8001e48:	e724      	b.n	8001c94 <__udivmoddi4+0x10c>
 8001e4a:	bf00      	nop

08001e4c <__aeabi_idiv0>:
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop

08001e50 <InitGame>:

/**
 * @brief Initialize the game, configure callbacks, and prepare the game environment.
 * @return GAME_SUCCESS on success, GAME_FAILURE on failure.
 */
uint8_t InitGame () {
 8001e50:	b510      	push	{r4, lr}
	uint8_t error = 0;
	CalculateAngle();
 8001e52:	f000 f929 	bl	80020a8 <CalculateAngle>
    error += MovePixel();
 8001e56:	f000 fae5 	bl	8002424 <MovePixel>

    if (error != MATRIX_SUCCESS) {
 8001e5a:	b958      	cbnz	r0, 8001e74 <InitGame+0x24>
 8001e5c:	4604      	mov	r4, r0
        printf("[GAME][InitGame][error] Failed to move pixel.\r\n");
        return GAME_FAILURE;
    }

	BSP_systick_add_callback_function(&DetectButtonAndExecuteCallback);
 8001e5e:	4808      	ldr	r0, [pc, #32]	; (8001e80 <InitGame+0x30>)
 8001e60:	f001 f96e 	bl	8003140 <BSP_systick_add_callback_function>
	BSP_systick_add_callback_function(&joystick_button_process_ms);
 8001e64:	4807      	ldr	r0, [pc, #28]	; (8001e84 <InitGame+0x34>)
 8001e66:	f001 f96b 	bl	8003140 <BSP_systick_add_callback_function>
	SetButtonCallback(&ToggleCurrentPixel);
 8001e6a:	4807      	ldr	r0, [pc, #28]	; (8001e88 <InitGame+0x38>)
 8001e6c:	f000 fa7a 	bl	8002364 <SetButtonCallback>
	return GAME_SUCCESS;
}
 8001e70:	4620      	mov	r0, r4
 8001e72:	bd10      	pop	{r4, pc}
        printf("[GAME][InitGame][error] Failed to move pixel.\r\n");
 8001e74:	4805      	ldr	r0, [pc, #20]	; (8001e8c <InitGame+0x3c>)
 8001e76:	f005 fefb 	bl	8007c70 <puts>
        return GAME_FAILURE;
 8001e7a:	24ff      	movs	r4, #255	; 0xff
 8001e7c:	e7f8      	b.n	8001e70 <InitGame+0x20>
 8001e7e:	bf00      	nop
 8001e80:	08002291 	.word	0x08002291
 8001e84:	0800207d 	.word	0x0800207d
 8001e88:	0800294d 	.word	0x0800294d
 8001e8c:	0800a050 	.word	0x0800a050

08001e90 <MakeMove>:

/**
 * @brief Make a move on the matrix and temporarily disable movement.
 * @return void
 */
void MakeMove() {
 8001e90:	b508      	push	{r3, lr}
	SetJoystickAllowMove(false);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f000 fa60 	bl	8002358 <SetJoystickAllowMove>
    MovePixel();
 8001e98:	f000 fac4 	bl	8002424 <MovePixel>
}
 8001e9c:	bd08      	pop	{r3, pc}
	...

08001ea0 <MainGame>:

/**
 * @brief Main game loop, handles joystick input and pixel movement.
 * @return void
 */
void MainGame() {
 8001ea0:	b510      	push	{r4, lr}

    /* Update joystick values */
    UpdateJoystickX();
 8001ea2:	f000 f955 	bl	8002150 <UpdateJoystickX>
    UpdateJoystickY();
 8001ea6:	f000 f95d 	bl	8002164 <UpdateJoystickY>

    /* Calculate angle of the joystick if allowed to move */
    if (GetJoystickAllowMove() == true) {
 8001eaa:	f000 fa4f 	bl	800234c <GetJoystickAllowMove>
 8001eae:	b9c8      	cbnz	r0, 8001ee4 <MainGame+0x44>
    	CalculateAngle();
    }

    /* If joystick button is press handle it */
    if (GetButtonState() == BUTTON_PRESS) {
 8001eb0:	f000 fa5e 	bl	8002370 <GetButtonState>
 8001eb4:	2801      	cmp	r0, #1
 8001eb6:	d018      	beq.n	8001eea <MainGame+0x4a>
    	SetJoystickAllowMove(false);
    }

    /* Else if, check if joystick is in the central zone */
    else if ((GetJoystickX() >= (GetJoystickXCalib() - JOYSTICK_TOLERANCE)) &&
 8001eb8:	f000 fa3c 	bl	8002334 <GetJoystickX>
 8001ebc:	4604      	mov	r4, r0
 8001ebe:	f000 fa2d 	bl	800231c <GetJoystickXCalib>
 8001ec2:	f5a0 7316 	sub.w	r3, r0, #600	; 0x258
 8001ec6:	429c      	cmp	r4, r3
 8001ec8:	db08      	blt.n	8001edc <MainGame+0x3c>
             (GetJoystickX() <= (GetJoystickXCalib() + JOYSTICK_TOLERANCE)) &&
 8001eca:	f000 fa33 	bl	8002334 <GetJoystickX>
 8001ece:	4604      	mov	r4, r0
 8001ed0:	f000 fa24 	bl	800231c <GetJoystickXCalib>
 8001ed4:	f500 7316 	add.w	r3, r0, #600	; 0x258
    else if ((GetJoystickX() >= (GetJoystickXCalib() - JOYSTICK_TOLERANCE)) &&
 8001ed8:	429c      	cmp	r4, r3
 8001eda:	dd0a      	ble.n	8001ef2 <MainGame+0x52>
    	SetJoystickAllowMove(true);
        HAL_Delay(50);
    }

    /* Else if, joystick is not in the central zone, move the pixel */
    else if (GetJoystickAllowMove()) {
 8001edc:	f000 fa36 	bl	800234c <GetJoystickAllowMove>
 8001ee0:	bb00      	cbnz	r0, 8001f24 <MainGame+0x84>
				MakeMove();
				//printf("[GAME][StartGame][debug] Right\r\n");
			}
		}
    }
}
 8001ee2:	bd10      	pop	{r4, pc}
    	CalculateAngle();
 8001ee4:	f000 f8e0 	bl	80020a8 <CalculateAngle>
 8001ee8:	e7e2      	b.n	8001eb0 <MainGame+0x10>
    	SetJoystickAllowMove(false);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f000 fa34 	bl	8002358 <SetJoystickAllowMove>
 8001ef0:	e7f7      	b.n	8001ee2 <MainGame+0x42>
             (GetJoystickY() >= (GetJoystickYCalib() - JOYSTICK_TOLERANCE)) &&
 8001ef2:	f000 fa25 	bl	8002340 <GetJoystickY>
 8001ef6:	4604      	mov	r4, r0
 8001ef8:	f000 fa16 	bl	8002328 <GetJoystickYCalib>
 8001efc:	f5a0 7316 	sub.w	r3, r0, #600	; 0x258
             (GetJoystickX() <= (GetJoystickXCalib() + JOYSTICK_TOLERANCE)) &&
 8001f00:	429c      	cmp	r4, r3
 8001f02:	dbeb      	blt.n	8001edc <MainGame+0x3c>
             (GetJoystickY() <= (GetJoystickYCalib() + JOYSTICK_TOLERANCE))) {
 8001f04:	f000 fa1c 	bl	8002340 <GetJoystickY>
 8001f08:	4604      	mov	r4, r0
 8001f0a:	f000 fa0d 	bl	8002328 <GetJoystickYCalib>
 8001f0e:	f500 7316 	add.w	r3, r0, #600	; 0x258
             (GetJoystickY() >= (GetJoystickYCalib() - JOYSTICK_TOLERANCE)) &&
 8001f12:	429c      	cmp	r4, r3
 8001f14:	dce2      	bgt.n	8001edc <MainGame+0x3c>
    	SetJoystickAllowMove(true);
 8001f16:	2001      	movs	r0, #1
 8001f18:	f000 fa1e 	bl	8002358 <SetJoystickAllowMove>
        HAL_Delay(50);
 8001f1c:	2032      	movs	r0, #50	; 0x32
 8001f1e:	f001 fd63 	bl	80039e8 <HAL_Delay>
 8001f22:	e7de      	b.n	8001ee2 <MainGame+0x42>
    	if (GetAngle() >= -45 && GetAngle() <= 45) { /* Left */
 8001f24:	f000 f90e 	bl	8002144 <GetAngle>
 8001f28:	eddf 7a36 	vldr	s15, [pc, #216]	; 8002004 <MainGame+0x164>
 8001f2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	db08      	blt.n	8001f48 <MainGame+0xa8>
 8001f36:	f000 f905 	bl	8002144 <GetAngle>
 8001f3a:	eddf 7a33 	vldr	s15, [pc, #204]	; 8002008 <MainGame+0x168>
 8001f3e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f46:	d931      	bls.n	8001fac <MainGame+0x10c>
		} else if (GetAngle() > 45 && GetAngle() <= 135) { /* Bottom */
 8001f48:	f000 f8fc 	bl	8002144 <GetAngle>
 8001f4c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8002008 <MainGame+0x168>
 8001f50:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f58:	dd08      	ble.n	8001f6c <MainGame+0xcc>
 8001f5a:	f000 f8f3 	bl	8002144 <GetAngle>
 8001f5e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800200c <MainGame+0x16c>
 8001f62:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6a:	d92d      	bls.n	8001fc8 <MainGame+0x128>
		} else if (GetAngle() < -45 && GetAngle() >= -135) { /* Top */
 8001f6c:	f000 f8ea 	bl	8002144 <GetAngle>
 8001f70:	eddf 7a24 	vldr	s15, [pc, #144]	; 8002004 <MainGame+0x164>
 8001f74:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7c:	d508      	bpl.n	8001f90 <MainGame+0xf0>
 8001f7e:	f000 f8e1 	bl	8002144 <GetAngle>
 8001f82:	eddf 7a23 	vldr	s15, [pc, #140]	; 8002010 <MainGame+0x170>
 8001f86:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8e:	da29      	bge.n	8001fe4 <MainGame+0x144>
			if (GetPixelX() < 7) { /* Right */
 8001f90:	f000 fa3c 	bl	800240c <GetPixelX>
 8001f94:	2806      	cmp	r0, #6
 8001f96:	dca4      	bgt.n	8001ee2 <MainGame+0x42>
				SetPixelX(GetPixelX()+1);
 8001f98:	f000 fa38 	bl	800240c <GetPixelX>
 8001f9c:	b2c0      	uxtb	r0, r0
 8001f9e:	3001      	adds	r0, #1
 8001fa0:	b240      	sxtb	r0, r0
 8001fa2:	f000 fa71 	bl	8002488 <SetPixelX>
				MakeMove();
 8001fa6:	f7ff ff73 	bl	8001e90 <MakeMove>
}
 8001faa:	e79a      	b.n	8001ee2 <MainGame+0x42>
    		if (GetPixelX() > 0) {
 8001fac:	f000 fa2e 	bl	800240c <GetPixelX>
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	dd96      	ble.n	8001ee2 <MainGame+0x42>
    			SetPixelX(GetPixelX()-1);
 8001fb4:	f000 fa2a 	bl	800240c <GetPixelX>
 8001fb8:	b2c0      	uxtb	r0, r0
 8001fba:	3801      	subs	r0, #1
 8001fbc:	b240      	sxtb	r0, r0
 8001fbe:	f000 fa63 	bl	8002488 <SetPixelX>
    			MakeMove();
 8001fc2:	f7ff ff65 	bl	8001e90 <MakeMove>
 8001fc6:	e78c      	b.n	8001ee2 <MainGame+0x42>
			if (GetPixelY() < 7) {
 8001fc8:	f000 fa26 	bl	8002418 <GetPixelY>
 8001fcc:	2806      	cmp	r0, #6
 8001fce:	dc88      	bgt.n	8001ee2 <MainGame+0x42>
				SetPixelY(GetPixelY()+1);
 8001fd0:	f000 fa22 	bl	8002418 <GetPixelY>
 8001fd4:	b2c0      	uxtb	r0, r0
 8001fd6:	3001      	adds	r0, #1
 8001fd8:	b240      	sxtb	r0, r0
 8001fda:	f000 fa67 	bl	80024ac <SetPixelY>
				MakeMove();
 8001fde:	f7ff ff57 	bl	8001e90 <MakeMove>
 8001fe2:	e77e      	b.n	8001ee2 <MainGame+0x42>
			if (GetPixelY() > 0) {
 8001fe4:	f000 fa18 	bl	8002418 <GetPixelY>
 8001fe8:	2800      	cmp	r0, #0
 8001fea:	f77f af7a 	ble.w	8001ee2 <MainGame+0x42>
				SetPixelY(GetPixelY()-1);
 8001fee:	f000 fa13 	bl	8002418 <GetPixelY>
 8001ff2:	b2c0      	uxtb	r0, r0
 8001ff4:	3801      	subs	r0, #1
 8001ff6:	b240      	sxtb	r0, r0
 8001ff8:	f000 fa58 	bl	80024ac <SetPixelY>
				MakeMove();
 8001ffc:	f7ff ff48 	bl	8001e90 <MakeMove>
 8002000:	e76f      	b.n	8001ee2 <MainGame+0x42>
 8002002:	bf00      	nop
 8002004:	c2340000 	.word	0xc2340000
 8002008:	42340000 	.word	0x42340000
 800200c:	43070000 	.word	0x43070000
 8002010:	c3070000 	.word	0xc3070000

08002014 <EndGame>:

/**
* @brief  End the game and release associated resources.
* @return void
*/
void EndGame () {
 8002014:	b508      	push	{r3, lr}
	BSP_systick_remove_callback_function(&DetectButtonAndExecuteCallback);
 8002016:	4805      	ldr	r0, [pc, #20]	; (800202c <EndGame+0x18>)
 8002018:	f001 f8b0 	bl	800317c <BSP_systick_remove_callback_function>
	BSP_systick_remove_callback_function(&joystick_button_process_ms);
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <EndGame+0x1c>)
 800201e:	f001 f8ad 	bl	800317c <BSP_systick_remove_callback_function>
	SetButtonCallback(NULL);
 8002022:	2000      	movs	r0, #0
 8002024:	f000 f99e 	bl	8002364 <SetButtonCallback>
}
 8002028:	bd08      	pop	{r3, pc}
 800202a:	bf00      	nop
 800202c:	08002291 	.word	0x08002291
 8002030:	0800207d 	.word	0x0800207d

08002034 <StartGame>:

/**
 * @brief  Start the game by initializing it and running the main game loop.
 * @return GAME_SUCCESS on success, GAME_FAILURE on failure.
 */
uint8_t StartGame() {
 8002034:	b510      	push	{r4, lr}
	uint8_t error = InitGame();
 8002036:	f7ff ff0b 	bl	8001e50 <InitGame>
	if (error != GAME_SUCCESS) {
 800203a:	b918      	cbnz	r0, 8002044 <StartGame+0x10>
 800203c:	4604      	mov	r4, r0
		printf("[GAME][StartGame][error] Failed to initialize the game.\r\n");
		return GAME_FAILURE;
	}

	/* Generate takuzu */
	mainTakuzu();
 800203e:	f000 fcb3 	bl	80029a8 <mainTakuzu>

	/* Playing while takuzu is not solve */
	while(!CompareGrids(takuzuGenerated, takuzuToPlay)) {
 8002042:	e006      	b.n	8002052 <StartGame+0x1e>
		printf("[GAME][StartGame][error] Failed to initialize the game.\r\n");
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <StartGame+0x38>)
 8002046:	f005 fe13 	bl	8007c70 <puts>
		return GAME_FAILURE;
 800204a:	24ff      	movs	r4, #255	; 0xff
 800204c:	e00c      	b.n	8002068 <StartGame+0x34>
		MainGame();
 800204e:	f7ff ff27 	bl	8001ea0 <MainGame>
	while(!CompareGrids(takuzuGenerated, takuzuToPlay)) {
 8002052:	4907      	ldr	r1, [pc, #28]	; (8002070 <StartGame+0x3c>)
 8002054:	4807      	ldr	r0, [pc, #28]	; (8002074 <StartGame+0x40>)
 8002056:	f000 fc84 	bl	8002962 <CompareGrids>
 800205a:	2800      	cmp	r0, #0
 800205c:	d0f7      	beq.n	800204e <StartGame+0x1a>
	}

	EndGame();
 800205e:	f7ff ffd9 	bl	8002014 <EndGame>

	printf("[GAME][StartGame][info] Win !\n\r");
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <StartGame+0x44>)
 8002064:	f005 fd7e 	bl	8007b64 <iprintf>
	return GAME_SUCCESS;
}
 8002068:	4620      	mov	r0, r4
 800206a:	bd10      	pop	{r4, pc}
 800206c:	0800a080 	.word	0x0800a080
 8002070:	200008e8 	.word	0x200008e8
 8002074:	20000868 	.word	0x20000868
 8002078:	0800a0bc 	.word	0x0800a0bc

0800207c <joystick_button_process_ms>:
 * This function is intended to be called periodically (e.g., every millisecond)
 * to handle button debouncing and long press detection.
 * @return void
 */
void joystick_button_process_ms(void) {
    if (debounce_timer > 0) debounce_timer--;
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <joystick_button_process_ms+0x20>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	b11b      	cbz	r3, 800208a <joystick_button_process_ms+0xe>
 8002082:	4a06      	ldr	r2, [pc, #24]	; (800209c <joystick_button_process_ms+0x20>)
 8002084:	6813      	ldr	r3, [r2, #0]
 8002086:	3b01      	subs	r3, #1
 8002088:	6013      	str	r3, [r2, #0]
    if (button_press_duration > 0) button_press_duration++;
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <joystick_button_process_ms+0x24>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	b11b      	cbz	r3, 8002098 <joystick_button_process_ms+0x1c>
 8002090:	4a03      	ldr	r2, [pc, #12]	; (80020a0 <joystick_button_process_ms+0x24>)
 8002092:	6813      	ldr	r3, [r2, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	6013      	str	r3, [r2, #0]
}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	2000020c 	.word	0x2000020c
 80020a0:	20000204 	.word	0x20000204
 80020a4:	00000000 	.word	0x00000000

080020a8 <CalculateAngle>:
 *
 * @note The angle is calculated using the formula:
 *       angle = atan2(dy, dx) * (180.0 / M_PI)
 * @return void
 */
void CalculateAngle() {
 80020a8:	b508      	push	{r3, lr}
 80020aa:	ed2d 8b04 	vpush	{d8-d9}
    dx = joystick_x - joystick_x_calib;
 80020ae:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <CalculateAngle+0x80>)
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	4a1e      	ldr	r2, [pc, #120]	; (800212c <CalculateAngle+0x84>)
 80020b4:	8812      	ldrh	r2, [r2, #0]
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <CalculateAngle+0x88>)
 80020c2:	edc3 7a00 	vstr	s15, [r3]
    dy = joystick_y - joystick_y_calib;
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <CalculateAngle+0x8c>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	4a1b      	ldr	r2, [pc, #108]	; (8002138 <CalculateAngle+0x90>)
 80020cc:	8812      	ldrh	r2, [r2, #0]
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	ee07 3a10 	vmov	s14, r3
 80020d4:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <CalculateAngle+0x94>)
 80020da:	ed83 8a00 	vstr	s16, [r3]
    angle = atan2(dy, dx) * (180.0 / M_PI);
 80020de:	ee17 0a90 	vmov	r0, s15
 80020e2:	f7ff f969 	bl	80013b8 <__aeabi_f2d>
 80020e6:	ec41 0b19 	vmov	d9, r0, r1
 80020ea:	ee18 0a10 	vmov	r0, s16
 80020ee:	f7ff f963 	bl	80013b8 <__aeabi_f2d>
 80020f2:	eeb0 1a49 	vmov.f32	s2, s18
 80020f6:	eef0 1a69 	vmov.f32	s3, s19
 80020fa:	ec41 0b10 	vmov	d0, r0, r1
 80020fe:	f007 fec8 	bl	8009e92 <atan2>
 8002102:	ec51 0b10 	vmov	r0, r1, d0
 8002106:	a306      	add	r3, pc, #24	; (adr r3, 8002120 <CalculateAngle+0x78>)
 8002108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210c:	f7ff f9ac 	bl	8001468 <__aeabi_dmul>
 8002110:	f7ff fc82 	bl	8001a18 <__aeabi_d2f>
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <CalculateAngle+0x98>)
 8002116:	6018      	str	r0, [r3, #0]
}
 8002118:	ecbd 8b04 	vpop	{d8-d9}
 800211c:	bd08      	pop	{r3, pc}
 800211e:	bf00      	nop
 8002120:	1a63c1f8 	.word	0x1a63c1f8
 8002124:	404ca5dc 	.word	0x404ca5dc
 8002128:	20000758 	.word	0x20000758
 800212c:	20000756 	.word	0x20000756
 8002130:	2000075c 	.word	0x2000075c
 8002134:	20000752 	.word	0x20000752
 8002138:	20000754 	.word	0x20000754
 800213c:	20000764 	.word	0x20000764
 8002140:	20000760 	.word	0x20000760

08002144 <GetAngle>:
 *
 * @return void.
 */
float GetAngle() {
	return angle;
}
 8002144:	4b01      	ldr	r3, [pc, #4]	; (800214c <GetAngle+0x8>)
 8002146:	ed93 0a00 	vldr	s0, [r3]
 800214a:	4770      	bx	lr
 800214c:	20000760 	.word	0x20000760

08002150 <UpdateJoystickX>:
 *
 * This function retrieves the current ADC value for the joystick's X axis using `BSP_ADC_getValue()`
 * and updates the `joystick_x` variable.
 * @return void
 */
void UpdateJoystickX() {
 8002150:	b508      	push	{r3, lr}
    joystick_x = BSP_ADC_getValue(ADC_1);
 8002152:	2000      	movs	r0, #0
 8002154:	f000 fe30 	bl	8002db8 <BSP_ADC_getValue>
 8002158:	4b01      	ldr	r3, [pc, #4]	; (8002160 <UpdateJoystickX+0x10>)
 800215a:	8018      	strh	r0, [r3, #0]
}
 800215c:	bd08      	pop	{r3, pc}
 800215e:	bf00      	nop
 8002160:	20000758 	.word	0x20000758

08002164 <UpdateJoystickY>:
 *
 * This function retrieves the current ADC value for the joystick's Y axis using `BSP_ADC_getValue()`
 * and updates the `joystick_y` variable.
 * return void
 */
void UpdateJoystickY() {
 8002164:	b508      	push	{r3, lr}
    joystick_y = BSP_ADC_getValue(ADC_2);
 8002166:	2001      	movs	r0, #1
 8002168:	f000 fe26 	bl	8002db8 <BSP_ADC_getValue>
 800216c:	4b01      	ldr	r3, [pc, #4]	; (8002174 <UpdateJoystickY+0x10>)
 800216e:	8018      	strh	r0, [r3, #0]
}
 8002170:	bd08      	pop	{r3, pc}
 8002172:	bf00      	nop
 8002174:	20000752 	.word	0x20000752

08002178 <Calibrate>:
uint8_t Calibrate() {
 8002178:	b570      	push	{r4, r5, r6, lr}
    printf("[JOYSTICK][Calibrate][info][init] Joystick calibration.\n\r");
 800217a:	481e      	ldr	r0, [pc, #120]	; (80021f4 <Calibrate+0x7c>)
 800217c:	f005 fcf2 	bl	8007b64 <iprintf>
    BSP_WS2812_display_full(WS2812_COLOR_LIGHT_RED, 64);
 8002180:	2140      	movs	r1, #64	; 0x40
 8002182:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002186:	f000 fcf5 	bl	8002b74 <BSP_WS2812_display_full>
    printf("[JOYSTICK][Calibrate][info][processing] Processing joystick calibration.\n\r");
 800218a:	481b      	ldr	r0, [pc, #108]	; (80021f8 <Calibrate+0x80>)
 800218c:	f005 fcea 	bl	8007b64 <iprintf>
    for (uint8_t i = 0; i < JOYSTICK_CALIBRATION; i++) {
 8002190:	2400      	movs	r4, #0
    uint32_t sum_x = 0, sum_y = 0;
 8002192:	4625      	mov	r5, r4
 8002194:	4626      	mov	r6, r4
    for (uint8_t i = 0; i < JOYSTICK_CALIBRATION; i++) {
 8002196:	2c63      	cmp	r4, #99	; 0x63
 8002198:	d80f      	bhi.n	80021ba <Calibrate+0x42>
        HAL_Delay(10);
 800219a:	200a      	movs	r0, #10
 800219c:	f001 fc24 	bl	80039e8 <HAL_Delay>
        UpdateJoystickX();
 80021a0:	f7ff ffd6 	bl	8002150 <UpdateJoystickX>
        UpdateJoystickY();
 80021a4:	f7ff ffde 	bl	8002164 <UpdateJoystickY>
        sum_x += joystick_x;
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <Calibrate+0x84>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	441e      	add	r6, r3
        sum_y += joystick_y;
 80021ae:	4b14      	ldr	r3, [pc, #80]	; (8002200 <Calibrate+0x88>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	441d      	add	r5, r3
    for (uint8_t i = 0; i < JOYSTICK_CALIBRATION; i++) {
 80021b4:	3401      	adds	r4, #1
 80021b6:	b2e4      	uxtb	r4, r4
 80021b8:	e7ed      	b.n	8002196 <Calibrate+0x1e>
    joystick_x_calib = sum_x / JOYSTICK_CALIBRATION;
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <Calibrate+0x8c>)
 80021bc:	fba2 1306 	umull	r1, r3, r2, r6
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	4e11      	ldr	r6, [pc, #68]	; (8002208 <Calibrate+0x90>)
 80021c4:	8033      	strh	r3, [r6, #0]
    joystick_y_calib = sum_y / JOYSTICK_CALIBRATION;
 80021c6:	fba2 2305 	umull	r2, r3, r2, r5
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	4c0f      	ldr	r4, [pc, #60]	; (800220c <Calibrate+0x94>)
 80021ce:	8023      	strh	r3, [r4, #0]
    printf("[JOYSTICK][Calibrate][info][complete] Joyctick calibration completed.\n\r");
 80021d0:	480f      	ldr	r0, [pc, #60]	; (8002210 <Calibrate+0x98>)
 80021d2:	f005 fcc7 	bl	8007b64 <iprintf>
    printf("X calibre: %d\n\r", joystick_x_calib);
 80021d6:	8831      	ldrh	r1, [r6, #0]
 80021d8:	480e      	ldr	r0, [pc, #56]	; (8002214 <Calibrate+0x9c>)
 80021da:	f005 fcc3 	bl	8007b64 <iprintf>
    printf("Y calibre: %d\n\r", joystick_y_calib);
 80021de:	8821      	ldrh	r1, [r4, #0]
 80021e0:	480d      	ldr	r0, [pc, #52]	; (8002218 <Calibrate+0xa0>)
 80021e2:	f005 fcbf 	bl	8007b64 <iprintf>
    BSP_WS2812_display_full(WS2812_COLOR_BLACK, 64);
 80021e6:	2140      	movs	r1, #64	; 0x40
 80021e8:	2000      	movs	r0, #0
 80021ea:	f000 fcc3 	bl	8002b74 <BSP_WS2812_display_full>
}
 80021ee:	2000      	movs	r0, #0
 80021f0:	bd70      	pop	{r4, r5, r6, pc}
 80021f2:	bf00      	nop
 80021f4:	0800a0dc 	.word	0x0800a0dc
 80021f8:	0800a118 	.word	0x0800a118
 80021fc:	20000758 	.word	0x20000758
 8002200:	20000752 	.word	0x20000752
 8002204:	51eb851f 	.word	0x51eb851f
 8002208:	20000756 	.word	0x20000756
 800220c:	20000754 	.word	0x20000754
 8002210:	0800a164 	.word	0x0800a164
 8002214:	0800a1ac 	.word	0x0800a1ac
 8002218:	0800a1bc 	.word	0x0800a1bc

0800221c <InitJoystick>:
uint8_t InitJoystick (){
 800221c:	b510      	push	{r4, lr}
 800221e:	b082      	sub	sp, #8
	BSP_GPIO_pin_config(JOYSTICK_KEY_PORT, JOYSTICK_KEY_PIN, GPIO_MODE_INPUT, GPIO_PULLUP, GPIO_SPEED_FREQ_LOW, GPIO_NO_AF);
 8002220:	2400      	movs	r4, #0
 8002222:	9401      	str	r4, [sp, #4]
 8002224:	9400      	str	r4, [sp, #0]
 8002226:	2301      	movs	r3, #1
 8002228:	4622      	mov	r2, r4
 800222a:	2108      	movs	r1, #8
 800222c:	4810      	ldr	r0, [pc, #64]	; (8002270 <InitJoystick+0x54>)
 800222e:	f000 fe89 	bl	8002f44 <BSP_GPIO_pin_config>
	BSP_ADC_init();
 8002232:	f000 fd03 	bl	8002c3c <BSP_ADC_init>
	BSP_GPIO_pin_config(JOYSTICK_X_Y_PORT, JOYSTICK_X_PIN, GPIO_MODE_ANALOG, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_NO_AF);
 8002236:	9401      	str	r4, [sp, #4]
 8002238:	9400      	str	r4, [sp, #0]
 800223a:	4623      	mov	r3, r4
 800223c:	2203      	movs	r2, #3
 800223e:	2101      	movs	r1, #1
 8002240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002244:	f000 fe7e 	bl	8002f44 <BSP_GPIO_pin_config>
	BSP_GPIO_pin_config(JOYSTICK_X_Y_PORT, JOYSTICK_Y_PIN, GPIO_MODE_ANALOG, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_NO_AF);
 8002248:	9401      	str	r4, [sp, #4]
 800224a:	9400      	str	r4, [sp, #0]
 800224c:	4623      	mov	r3, r4
 800224e:	2203      	movs	r2, #3
 8002250:	2102      	movs	r1, #2
 8002252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002256:	f000 fe75 	bl	8002f44 <BSP_GPIO_pin_config>
	error += Calibrate();
 800225a:	f7ff ff8d 	bl	8002178 <Calibrate>
	if (error != JOYSTICK_SUCCESS) {
 800225e:	b908      	cbnz	r0, 8002264 <InitJoystick+0x48>
}
 8002260:	b002      	add	sp, #8
 8002262:	bd10      	pop	{r4, pc}
	    printf("[JOYSTICK][InitJoystick][error] %d errors occured during Calibrate.\n\r", error);
 8002264:	4601      	mov	r1, r0
 8002266:	4803      	ldr	r0, [pc, #12]	; (8002274 <InitJoystick+0x58>)
 8002268:	f005 fc7c 	bl	8007b64 <iprintf>
		return JOYSTICK_FAILURE;
 800226c:	20ff      	movs	r0, #255	; 0xff
 800226e:	e7f7      	b.n	8002260 <InitJoystick+0x44>
 8002270:	48000400 	.word	0x48000400
 8002274:	0800a1cc 	.word	0x0800a1cc

08002278 <UpdateJoystickButton>:
 * and updates the `joystick_button` variable.
 *
 * @note `GPIO_PIN_RESET` (LOW), `GPIO_PIN_SET` (HIGH).
 * @return void
 */
void UpdateJoystickButton() {
 8002278:	b508      	push	{r3, lr}
	joystick_button = HAL_GPIO_ReadPin(JOYSTICK_KEY_PORT, JOYSTICK_KEY_PIN);
 800227a:	2108      	movs	r1, #8
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <UpdateJoystickButton+0x10>)
 800227e:	f002 fd0b 	bl	8004c98 <HAL_GPIO_ReadPin>
 8002282:	4b02      	ldr	r3, [pc, #8]	; (800228c <UpdateJoystickButton+0x14>)
 8002284:	7018      	strb	r0, [r3, #0]
}
 8002286:	bd08      	pop	{r3, pc}
 8002288:	48000400 	.word	0x48000400
 800228c:	20000750 	.word	0x20000750

08002290 <DetectButtonAndExecuteCallback>:
void DetectButtonAndExecuteCallback() {
 8002290:	b508      	push	{r3, lr}
	UpdateJoystickButton();
 8002292:	f7ff fff1 	bl	8002278 <UpdateJoystickButton>
    if (joystick_button == GPIO_PIN_RESET && debounce_timer == 0 && button_state == 0) {
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <DetectButtonAndExecuteCallback+0x74>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	b96b      	cbnz	r3, 80022b8 <DetectButtonAndExecuteCallback+0x28>
 800229c:	4a1a      	ldr	r2, [pc, #104]	; (8002308 <DetectButtonAndExecuteCallback+0x78>)
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	b952      	cbnz	r2, 80022b8 <DetectButtonAndExecuteCallback+0x28>
 80022a2:	4a1a      	ldr	r2, [pc, #104]	; (800230c <DetectButtonAndExecuteCallback+0x7c>)
 80022a4:	7812      	ldrb	r2, [r2, #0]
 80022a6:	b93a      	cbnz	r2, 80022b8 <DetectButtonAndExecuteCallback+0x28>
        button_state = BUTTON_PRESS;
 80022a8:	2201      	movs	r2, #1
 80022aa:	4918      	ldr	r1, [pc, #96]	; (800230c <DetectButtonAndExecuteCallback+0x7c>)
 80022ac:	700a      	strb	r2, [r1, #0]
        debounce_timer = JOYSTICK_BUTTON_DEBOUNCE_DELAY_MS;
 80022ae:	4916      	ldr	r1, [pc, #88]	; (8002308 <DetectButtonAndExecuteCallback+0x78>)
 80022b0:	2032      	movs	r0, #50	; 0x32
 80022b2:	6008      	str	r0, [r1, #0]
        button_press_duration = 1;
 80022b4:	4916      	ldr	r1, [pc, #88]	; (8002310 <DetectButtonAndExecuteCallback+0x80>)
 80022b6:	600a      	str	r2, [r1, #0]
    if (joystick_button == GPIO_PIN_SET && button_state == 1) {
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d005      	beq.n	80022c8 <DetectButtonAndExecuteCallback+0x38>
    if (button_event_pending == JOYSTICK_BUTTON_LONG_PRESS_FLAG_UP) {
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <DetectButtonAndExecuteCallback+0x84>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d017      	beq.n	80022f6 <DetectButtonAndExecuteCallback+0x66>
}
 80022c6:	bd08      	pop	{r3, pc}
    if (joystick_button == GPIO_PIN_SET && button_state == 1) {
 80022c8:	4b10      	ldr	r3, [pc, #64]	; (800230c <DetectButtonAndExecuteCallback+0x7c>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d1f4      	bne.n	80022bc <DetectButtonAndExecuteCallback+0x2c>
        button_state = BUTTON_RELEASE;
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <DetectButtonAndExecuteCallback+0x7c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
        debounce_timer = JOYSTICK_BUTTON_DEBOUNCE_DELAY_MS;
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <DetectButtonAndExecuteCallback+0x78>)
 80022da:	2232      	movs	r2, #50	; 0x32
 80022dc:	601a      	str	r2, [r3, #0]
        if (button_press_duration >= JOYSTICK_BUTTON_LONG_PRESS_DELAY_MS) {
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <DetectButtonAndExecuteCallback+0x80>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80022e6:	d302      	bcc.n	80022ee <DetectButtonAndExecuteCallback+0x5e>
            button_event_pending = JOYSTICK_BUTTON_LONG_PRESS_FLAG_UP;
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <DetectButtonAndExecuteCallback+0x84>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
        button_press_duration = 0;
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <DetectButtonAndExecuteCallback+0x80>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	e7e2      	b.n	80022bc <DetectButtonAndExecuteCallback+0x2c>
        button_callback();
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <DetectButtonAndExecuteCallback+0x88>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4798      	blx	r3
        button_event_pending = JOYSTICK_BUTTON_LONG_PRESS_FLAG_DOWN;
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <DetectButtonAndExecuteCallback+0x84>)
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
}
 8002302:	e7e0      	b.n	80022c6 <DetectButtonAndExecuteCallback+0x36>
 8002304:	20000750 	.word	0x20000750
 8002308:	2000020c 	.word	0x2000020c
 800230c:	20000208 	.word	0x20000208
 8002310:	20000204 	.word	0x20000204
 8002314:	20000200 	.word	0x20000200
 8002318:	200001fc 	.word	0x200001fc

0800231c <GetJoystickXCalib>:
 *
 * @return uint16_t The calibrated X value.
 */
uint16_t GetJoystickXCalib(void) {
    return joystick_x_calib;
}
 800231c:	4b01      	ldr	r3, [pc, #4]	; (8002324 <GetJoystickXCalib+0x8>)
 800231e:	8818      	ldrh	r0, [r3, #0]
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000756 	.word	0x20000756

08002328 <GetJoystickYCalib>:
 *
 * @return uint16_t The calibrated Y value.
 */
uint16_t GetJoystickYCalib(void) {
    return joystick_y_calib;
}
 8002328:	4b01      	ldr	r3, [pc, #4]	; (8002330 <GetJoystickYCalib+0x8>)
 800232a:	8818      	ldrh	r0, [r3, #0]
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000754 	.word	0x20000754

08002334 <GetJoystickX>:
 *
 * @return uint16_t The current X position.
 */
uint16_t GetJoystickX(void) {
    return joystick_x;
}
 8002334:	4b01      	ldr	r3, [pc, #4]	; (800233c <GetJoystickX+0x8>)
 8002336:	8818      	ldrh	r0, [r3, #0]
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000758 	.word	0x20000758

08002340 <GetJoystickY>:
 *
 * @return uint16_t The current Y position.
 */
uint16_t GetJoystickY(void) {
    return joystick_y;
}
 8002340:	4b01      	ldr	r3, [pc, #4]	; (8002348 <GetJoystickY+0x8>)
 8002342:	8818      	ldrh	r0, [r3, #0]
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000752 	.word	0x20000752

0800234c <GetJoystickAllowMove>:
 *
 * @return void.
 */
bool GetJoystickAllowMove() {
	return joystick_allow_move;
}
 800234c:	4b01      	ldr	r3, [pc, #4]	; (8002354 <GetJoystickAllowMove+0x8>)
 800234e:	7818      	ldrb	r0, [r3, #0]
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000210 	.word	0x20000210

08002358 <SetJoystickAllowMove>:
 * @brief Sets if a move is allowed.
 *
 * @param bool allow move.
 */
void SetJoystickAllowMove(bool allow_move) {
	joystick_allow_move = allow_move;
 8002358:	4b01      	ldr	r3, [pc, #4]	; (8002360 <SetJoystickAllowMove+0x8>)
 800235a:	7018      	strb	r0, [r3, #0]
}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000210 	.word	0x20000210

08002364 <SetButtonCallback>:
 *
 * @param GenericCallback callback.
 * @return void.
 */
void SetButtonCallback(GenericCallback callback) {
	button_callback = callback;
 8002364:	4b01      	ldr	r3, [pc, #4]	; (800236c <SetButtonCallback+0x8>)
 8002366:	6018      	str	r0, [r3, #0]
}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	200001fc 	.word	0x200001fc

08002370 <GetButtonState>:
 * @brief Gets joystick button state.
 *
 * @return uint8_t
 */
uint8_t GetButtonState() {
	return button_state;
 8002370:	4b01      	ldr	r3, [pc, #4]	; (8002378 <GetButtonState+0x8>)
 8002372:	7818      	ldrb	r0, [r3, #0]
}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000208 	.word	0x20000208

0800237c <main>:
 * Initializes all hardware peripherals (GPIO, UART, Joystick, LED Matrix) and starts the game loop.
 *
 * @return int Returns 0 on success, -1 on failure.
 */
int main(void)
{
 800237c:	b510      	push	{r4, lr}
	/* This line must remain the first in your main!
	 * It initializes all the low-level layers of the drivers (Hardware Abstraction Layer),
	 * which is a necessary prerequisite for the execution of the following lines.
	 */
	HAL_Init();
 800237e:	f001 fb11 	bl	80039a4 <HAL_Init>

	/* Initialization of the peripherals used in your program */
	BSP_GPIO_enable();
 8002382:	f000 fdab 	bl	8002edc <BSP_GPIO_enable>
	BSP_UART_init(UART2_ID,115200);
 8002386:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800238a:	2001      	movs	r0, #1
 800238c:	f001 f97c 	bl	8003688 <BSP_UART_init>

	/* Indicates that printf outputs are redirected to UART2 */
	BSP_SYS_set_std_usart(UART2_ID, UART2_ID, UART2_ID);
 8002390:	2201      	movs	r2, #1
 8002392:	4611      	mov	r1, r2
 8002394:	4610      	mov	r0, r2
 8002396:	f000 fdf9 	bl	8002f8c <BSP_SYS_set_std_usart>
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r"
 800239a:	4811      	ldr	r0, [pc, #68]	; (80023e0 <main+0x64>)
 800239c:	f005 fbe2 	bl	8007b64 <iprintf>
	          "                                      y:::::y\n\r"
	          "                                     y:::::y\n\r"
	          "                                    yyyyyyy\n\r\n\r");


	uint8_t errorMatrice = InitMatrix();
 80023a0:	f000 f82a 	bl	80023f8 <InitMatrix>
 80023a4:	4604      	mov	r4, r0
	uint8_t errorJoystick = InitJoystick();
 80023a6:	f7ff ff39 	bl	800221c <InitJoystick>

    if (errorMatrice != MATRIX_SUCCESS) {
 80023aa:	b924      	cbnz	r4, 80023b6 <main+0x3a>
        printf("[MAIN][main][error] Failed to initialize the matrix.\n\r");
        return MAIN_FAILURE;
    }

    if (errorJoystick != JOYSTICK_SUCCESS) {
 80023ac:	b138      	cbz	r0, 80023be <main+0x42>
        printf("[MAIN][main][error] Failed to initialize the joystick.\n\r");
 80023ae:	480d      	ldr	r0, [pc, #52]	; (80023e4 <main+0x68>)
 80023b0:	f005 fbd8 	bl	8007b64 <iprintf>
        return MAIN_FAILURE;
 80023b4:	e010      	b.n	80023d8 <main+0x5c>
        printf("[MAIN][main][error] Failed to initialize the matrix.\n\r");
 80023b6:	480c      	ldr	r0, [pc, #48]	; (80023e8 <main+0x6c>)
 80023b8:	f005 fbd4 	bl	8007b64 <iprintf>
        return MAIN_FAILURE;
 80023bc:	e00c      	b.n	80023d8 <main+0x5c>
    }

    printf("[MAIN][main][info] Successfully initialized components!\r\n\r\n");
 80023be:	480b      	ldr	r0, [pc, #44]	; (80023ec <main+0x70>)
 80023c0:	f005 fc56 	bl	8007c70 <puts>

    /* Background task, infinite loop... whatever you call it, you're never getting out of it */
	while (1)
	{
		uint8_t errorStartGame = StartGame();
 80023c4:	f7ff fe36 	bl	8002034 <StartGame>
		if (errorStartGame != GAME_SUCCESS) {
 80023c8:	b918      	cbnz	r0, 80023d2 <main+0x56>
			printf("[MAIN][main][error] Failed to start the game.\r\n");
			return GAME_FAILURE;
		}
		printf("Game Won, Preparring next game !");
 80023ca:	4809      	ldr	r0, [pc, #36]	; (80023f0 <main+0x74>)
 80023cc:	f005 fbca 	bl	8007b64 <iprintf>
	{
 80023d0:	e7f8      	b.n	80023c4 <main+0x48>
			printf("[MAIN][main][error] Failed to start the game.\r\n");
 80023d2:	4808      	ldr	r0, [pc, #32]	; (80023f4 <main+0x78>)
 80023d4:	f005 fc4c 	bl	8007c70 <puts>
	}
}
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	bd10      	pop	{r4, pc}
 80023de:	bf00      	nop
 80023e0:	0800a214 	.word	0x0800a214
 80023e4:	0800ac6c 	.word	0x0800ac6c
 80023e8:	0800ac34 	.word	0x0800ac34
 80023ec:	0800aca8 	.word	0x0800aca8
 80023f0:	0800ad14 	.word	0x0800ad14
 80023f4:	0800ace4 	.word	0x0800ace4

080023f8 <InitMatrix>:
 * with a full matrix set to light red. It can be used to verify that the matrix
 * hardware is properly connected and functional.
 *
 * @return MATRIX_SUCCESS on success or MATRIX_FAILURE on failure.
 */
uint8_t InitMatrix (){
 80023f8:	b508      	push	{r3, lr}
	BSP_WS2812_init();
 80023fa:	f000 fb89 	bl	8002b10 <BSP_WS2812_init>
	BSP_WS2812_display_full(WS2812_COLOR_LIGHT_RED, 64);
 80023fe:	2140      	movs	r1, #64	; 0x40
 8002400:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002404:	f000 fbb6 	bl	8002b74 <BSP_WS2812_display_full>
	return MATRIX_SUCCESS;
}
 8002408:	2000      	movs	r0, #0
 800240a:	bd08      	pop	{r3, pc}

0800240c <GetPixelX>:
 *
 * @return int8_t Current X position.
 */
int8_t GetPixelX(){
	return matrix_pixel_x;
}
 800240c:	4b01      	ldr	r3, [pc, #4]	; (8002414 <GetPixelX+0x8>)
 800240e:	f993 0000 	ldrsb.w	r0, [r3]
 8002412:	4770      	bx	lr
 8002414:	20000000 	.word	0x20000000

08002418 <GetPixelY>:
 *
 * @return int8_t Current Y position.
 */
int8_t GetPixelY(){
	return matrix_pixel_y;
}
 8002418:	4b01      	ldr	r3, [pc, #4]	; (8002420 <GetPixelY+0x8>)
 800241a:	f993 0000 	ldrsb.w	r0, [r3]
 800241e:	4770      	bx	lr
 8002420:	20000001 	.word	0x20000001

08002424 <MovePixel>:
uint8_t MovePixel() {
 8002424:	b538      	push	{r3, r4, r5, lr}
	if (GetPixelX() < 0 || GetPixelX() > 7 || GetPixelY() < 0 || GetPixelY() > 7) {
 8002426:	f7ff fff1 	bl	800240c <GetPixelX>
 800242a:	1e04      	subs	r4, r0, #0
 800242c:	db1c      	blt.n	8002468 <MovePixel+0x44>
 800242e:	2c07      	cmp	r4, #7
 8002430:	dc1a      	bgt.n	8002468 <MovePixel+0x44>
 8002432:	f7ff fff1 	bl	8002418 <GetPixelY>
 8002436:	2800      	cmp	r0, #0
 8002438:	db16      	blt.n	8002468 <MovePixel+0x44>
 800243a:	2807      	cmp	r0, #7
 800243c:	dc14      	bgt.n	8002468 <MovePixel+0x44>
	TakuzuToMatrix(pixels, takuzuToPlay);
 800243e:	4d0f      	ldr	r5, [pc, #60]	; (800247c <MovePixel+0x58>)
 8002440:	490f      	ldr	r1, [pc, #60]	; (8002480 <MovePixel+0x5c>)
 8002442:	4628      	mov	r0, r5
 8002444:	f000 fa20 	bl	8002888 <TakuzuToMatrix>
	pixels[8*GetPixelY() + GetPixelX()] = CURSOR_COLOR;
 8002448:	f7ff ffe6 	bl	8002418 <GetPixelY>
 800244c:	00c4      	lsls	r4, r0, #3
 800244e:	f7ff ffdd 	bl	800240c <GetPixelX>
 8002452:	4404      	add	r4, r0
 8002454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002458:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
    BSP_WS2812_display(pixels, MATRIX_SIZE);
 800245c:	2140      	movs	r1, #64	; 0x40
 800245e:	4628      	mov	r0, r5
 8002460:	f000 fb72 	bl	8002b48 <BSP_WS2812_display>
	return MATRIX_SUCCESS;
 8002464:	2000      	movs	r0, #0
 8002466:	e007      	b.n	8002478 <MovePixel+0x54>
		printf("[MATRIX][MovePixel][warning] Could not move to (%d, %d).\n\r", GetPixelX(), GetPixelY());
 8002468:	f7ff ffd6 	bl	8002418 <GetPixelY>
 800246c:	4602      	mov	r2, r0
 800246e:	4621      	mov	r1, r4
 8002470:	4804      	ldr	r0, [pc, #16]	; (8002484 <MovePixel+0x60>)
 8002472:	f005 fb77 	bl	8007b64 <iprintf>
		return MATRIX_FAILURE;
 8002476:	20ff      	movs	r0, #255	; 0xff
}
 8002478:	bd38      	pop	{r3, r4, r5, pc}
 800247a:	bf00      	nop
 800247c:	20000768 	.word	0x20000768
 8002480:	200008e8 	.word	0x200008e8
 8002484:	0800ad38 	.word	0x0800ad38

08002488 <SetPixelX>:
 * ensuring it stays within the valid range (0 to 7).
 *
 * @param x New X coordinate.
 * @return MATRIX_SUCCESS on success or MATRIX_FAILURE on failure.
 */
uint8_t SetPixelX(int8_t x){
 8002488:	b508      	push	{r3, lr}
	uint8_t error = 0;
	if (x < 0 || x > 7) {
 800248a:	b2c3      	uxtb	r3, r0
 800248c:	2b07      	cmp	r3, #7
 800248e:	d803      	bhi.n	8002498 <SetPixelX+0x10>
	}
	if (error != 0) {
		printf("[MATRIX][SetPixelX][error] Could not set X to (%d).\n\r", x);
		return MATRIX_FAILURE;
	}
	matrix_pixel_x = x;
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <SetPixelX+0x1c>)
 8002492:	7018      	strb	r0, [r3, #0]
	return MATRIX_SUCCESS;
 8002494:	2000      	movs	r0, #0
}
 8002496:	bd08      	pop	{r3, pc}
		printf("[MATRIX][SetPixelX][error] Could not set X to (%d).\n\r", x);
 8002498:	4601      	mov	r1, r0
 800249a:	4803      	ldr	r0, [pc, #12]	; (80024a8 <SetPixelX+0x20>)
 800249c:	f005 fb62 	bl	8007b64 <iprintf>
		return MATRIX_FAILURE;
 80024a0:	20ff      	movs	r0, #255	; 0xff
 80024a2:	e7f8      	b.n	8002496 <SetPixelX+0xe>
 80024a4:	20000000 	.word	0x20000000
 80024a8:	0800ad74 	.word	0x0800ad74

080024ac <SetPixelY>:
 * ensuring it stays within the valid range (0 to 7).
 *
 * @param y New Y coordinate.
 * @return MATRIX_SUCCESS on success or MATRIX_FAILURE on failure.
 */
uint8_t SetPixelY(int8_t y){
 80024ac:	b508      	push	{r3, lr}
	uint8_t error = 0;
	if (y < 0 || y > 7) {
 80024ae:	b2c3      	uxtb	r3, r0
 80024b0:	2b07      	cmp	r3, #7
 80024b2:	d803      	bhi.n	80024bc <SetPixelY+0x10>
	}
	if (error != 0) {
		printf("[MATRIX][SetPixelY][error] Could not set Y to (%d).\n\r", y);
		return MATRIX_FAILURE;
	}
	matrix_pixel_y = y;
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <SetPixelY+0x1c>)
 80024b6:	7018      	strb	r0, [r3, #0]
	return MATRIX_SUCCESS;
 80024b8:	2000      	movs	r0, #0
}
 80024ba:	bd08      	pop	{r3, pc}
		printf("[MATRIX][SetPixelY][error] Could not set Y to (%d).\n\r", y);
 80024bc:	4601      	mov	r1, r0
 80024be:	4803      	ldr	r0, [pc, #12]	; (80024cc <SetPixelY+0x20>)
 80024c0:	f005 fb50 	bl	8007b64 <iprintf>
		return MATRIX_FAILURE;
 80024c4:	20ff      	movs	r0, #255	; 0xff
 80024c6:	e7f8      	b.n	80024ba <SetPixelY+0xe>
 80024c8:	20000001 	.word	0x20000001
 80024cc:	0800adac 	.word	0x0800adac

080024d0 <resetSeed>:
 *
 * This function sets the random seed to the current system tick using `HAL_GetTick()`,
 * ensuring randomness for Takuzu generation.
 * @return void
 */
void resetSeed() {
 80024d0:	b510      	push	{r4, lr}
	startDate = HAL_GetTick();
 80024d2:	f001 fa83 	bl	80039dc <HAL_GetTick>
 80024d6:	4c04      	ldr	r4, [pc, #16]	; (80024e8 <resetSeed+0x18>)
 80024d8:	6020      	str	r0, [r4, #0]
    srand(startDate);  // set the random seed to the current 'HAL_GetTick()'
 80024da:	f005 fbd1 	bl	8007c80 <srand>
    printf("[TAKUZU][resetSeed][info] New random seed : %lu\n\r", (unsigned long)startDate);
 80024de:	6821      	ldr	r1, [r4, #0]
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <resetSeed+0x1c>)
 80024e2:	f005 fb3f 	bl	8007b64 <iprintf>
}
 80024e6:	bd10      	pop	{r4, pc}
 80024e8:	20000928 	.word	0x20000928
 80024ec:	0800ade4 	.word	0x0800ade4

080024f0 <isTimeExceeded>:
/**
 * @brief Checks if the allowed time for Takuzu generation has been exceeded.
 *
 * @return true if 200ms has passed since the seed was reset, otherwise false.
 */
bool isTimeExceeded() {
 80024f0:	b508      	push	{r3, lr}
    uint32_t currentTime = HAL_GetTick();
 80024f2:	f001 fa73 	bl	80039dc <HAL_GetTick>
    return (currentTime - startDate) >= 200;
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <isTimeExceeded+0x18>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	1ac0      	subs	r0, r0, r3
}
 80024fc:	28c7      	cmp	r0, #199	; 0xc7
 80024fe:	bf94      	ite	ls
 8002500:	2000      	movls	r0, #0
 8002502:	2001      	movhi	r0, #1
 8002504:	bd08      	pop	{r3, pc}
 8002506:	bf00      	nop
 8002508:	20000928 	.word	0x20000928

0800250c <max2OnColJusquaLigne>:
 * @param col The column index.
 * @param ligneMax The row index up to which the check is performed.
 *
 * @return true if no repeated sequences exist, false otherwise.
 */
bool max2OnColJusquaLigne(uint8_t col, uint8_t ligneMax) {
 800250c:	b470      	push	{r4, r5, r6}
    for (uint8_t i = 0; i < ligneMax - 1; i++) {
 800250e:	2300      	movs	r3, #0
 8002510:	e001      	b.n	8002516 <max2OnColJusquaLigne+0xa>
 8002512:	3301      	adds	r3, #1
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461e      	mov	r6, r3
 8002518:	1e4a      	subs	r2, r1, #1
 800251a:	4293      	cmp	r3, r2
 800251c:	da14      	bge.n	8002548 <max2OnColJusquaLigne+0x3c>
        if (takuzuGenerated[i][col] != EMPTY &&
 800251e:	4a0c      	ldr	r2, [pc, #48]	; (8002550 <max2OnColJusquaLigne+0x44>)
 8002520:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002524:	5c12      	ldrb	r2, [r2, r0]
 8002526:	2a02      	cmp	r2, #2
 8002528:	d0f3      	beq.n	8002512 <max2OnColJusquaLigne+0x6>
            takuzuGenerated[i][col] == takuzuGenerated[i+1][col] &&
 800252a:	1c74      	adds	r4, r6, #1
 800252c:	4d08      	ldr	r5, [pc, #32]	; (8002550 <max2OnColJusquaLigne+0x44>)
 800252e:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8002532:	5c24      	ldrb	r4, [r4, r0]
        if (takuzuGenerated[i][col] != EMPTY &&
 8002534:	42a2      	cmp	r2, r4
 8002536:	d1ec      	bne.n	8002512 <max2OnColJusquaLigne+0x6>
            takuzuGenerated[i+1][col] == takuzuGenerated[i+2][col]) {
 8002538:	3602      	adds	r6, #2
 800253a:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800253e:	5c32      	ldrb	r2, [r6, r0]
            takuzuGenerated[i][col] == takuzuGenerated[i+1][col] &&
 8002540:	4294      	cmp	r4, r2
 8002542:	d1e6      	bne.n	8002512 <max2OnColJusquaLigne+0x6>
            return false;
 8002544:	2000      	movs	r0, #0
 8002546:	e000      	b.n	800254a <max2OnColJusquaLigne+0x3e>
        }
    }
    return true;
 8002548:	2001      	movs	r0, #1
}
 800254a:	bc70      	pop	{r4, r5, r6}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000868 	.word	0x20000868

08002554 <compteEtVerifieColJusquaLigne>:
 * @param col The column index.
 * @param ligneMax The row index up to which the check is performed.
 *
 * @return true if the count of 0's and 1's is valid, false otherwise.
 */
bool compteEtVerifieColJusquaLigne(uint8_t col, uint8_t ligneMax) {
 8002554:	b430      	push	{r4, r5}
	uint8_t count0 = 0, count1 = 0;
    for (uint8_t i = 0; i <= ligneMax; i++) {
 8002556:	2300      	movs	r3, #0
	uint8_t count0 = 0, count1 = 0;
 8002558:	461d      	mov	r5, r3
 800255a:	461c      	mov	r4, r3
    for (uint8_t i = 0; i <= ligneMax; i++) {
 800255c:	e003      	b.n	8002566 <compteEtVerifieColJusquaLigne+0x12>
        if (takuzuGenerated[i][col] == 0) count0++;
        else if (takuzuGenerated[i][col] == 1) count1++;
 800255e:	2a01      	cmp	r2, #1
 8002560:	d00c      	beq.n	800257c <compteEtVerifieColJusquaLigne+0x28>
    for (uint8_t i = 0; i <= ligneMax; i++) {
 8002562:	3301      	adds	r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	428b      	cmp	r3, r1
 8002568:	d80b      	bhi.n	8002582 <compteEtVerifieColJusquaLigne+0x2e>
        if (takuzuGenerated[i][col] == 0) count0++;
 800256a:	4a0b      	ldr	r2, [pc, #44]	; (8002598 <compteEtVerifieColJusquaLigne+0x44>)
 800256c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002570:	5c12      	ldrb	r2, [r2, r0]
 8002572:	2a00      	cmp	r2, #0
 8002574:	d1f3      	bne.n	800255e <compteEtVerifieColJusquaLigne+0xa>
 8002576:	3401      	adds	r4, #1
 8002578:	b2e4      	uxtb	r4, r4
 800257a:	e7f2      	b.n	8002562 <compteEtVerifieColJusquaLigne+0xe>
        else if (takuzuGenerated[i][col] == 1) count1++;
 800257c:	3501      	adds	r5, #1
 800257e:	b2ed      	uxtb	r5, r5
 8002580:	e7ef      	b.n	8002562 <compteEtVerifieColJusquaLigne+0xe>
    }
    return count0 <= SIZE / 2 && count1 <= SIZE / 2;
 8002582:	2c04      	cmp	r4, #4
 8002584:	d803      	bhi.n	800258e <compteEtVerifieColJusquaLigne+0x3a>
 8002586:	2d04      	cmp	r5, #4
 8002588:	d904      	bls.n	8002594 <compteEtVerifieColJusquaLigne+0x40>
 800258a:	2000      	movs	r0, #0
 800258c:	e000      	b.n	8002590 <compteEtVerifieColJusquaLigne+0x3c>
 800258e:	2000      	movs	r0, #0
}
 8002590:	bc30      	pop	{r4, r5}
 8002592:	4770      	bx	lr
    return count0 <= SIZE / 2 && count1 <= SIZE / 2;
 8002594:	2001      	movs	r0, #1
 8002596:	e7fb      	b.n	8002590 <compteEtVerifieColJusquaLigne+0x3c>
 8002598:	20000868 	.word	0x20000868

0800259c <max2OnLine>:
 * @param ligne The row to check.
 *
 * @return true if no repeated sequences exist, false otherwise.
 */
bool max2OnLine(uint8_t ligne[SIZE]) {
    for (uint8_t i = 0; i < SIZE - 2; i++) {
 800259c:	2300      	movs	r3, #0
 800259e:	e00b      	b.n	80025b8 <max2OnLine+0x1c>
        if (ligne[i] != EMPTY && ligne[i] == ligne[i + 1] && ligne[i + 1] == ligne[i + 2]) {
 80025a0:	4401      	add	r1, r0
 80025a2:	788a      	ldrb	r2, [r1, #2]
 80025a4:	4294      	cmp	r4, r2
 80025a6:	d112      	bne.n	80025ce <max2OnLine+0x32>
            return false;
 80025a8:	2000      	movs	r0, #0
 80025aa:	e000      	b.n	80025ae <max2OnLine+0x12>
        }
    }
    return true;
 80025ac:	2001      	movs	r0, #1
}
 80025ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025b2:	4770      	bx	lr
    for (uint8_t i = 0; i < SIZE - 2; i++) {
 80025b4:	3301      	adds	r3, #1
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d811      	bhi.n	80025e0 <max2OnLine+0x44>
        if (ligne[i] != EMPTY && ligne[i] == ligne[i + 1] && ligne[i + 1] == ligne[i + 2]) {
 80025bc:	4619      	mov	r1, r3
 80025be:	5cc2      	ldrb	r2, [r0, r3]
 80025c0:	2a02      	cmp	r2, #2
 80025c2:	d0f7      	beq.n	80025b4 <max2OnLine+0x18>
bool max2OnLine(uint8_t ligne[SIZE]) {
 80025c4:	b410      	push	{r4}
        if (ligne[i] != EMPTY && ligne[i] == ligne[i + 1] && ligne[i + 1] == ligne[i + 2]) {
 80025c6:	18c4      	adds	r4, r0, r3
 80025c8:	7864      	ldrb	r4, [r4, #1]
 80025ca:	42a2      	cmp	r2, r4
 80025cc:	d0e8      	beq.n	80025a0 <max2OnLine+0x4>
    for (uint8_t i = 0; i < SIZE - 2; i++) {
 80025ce:	3301      	adds	r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d8ea      	bhi.n	80025ac <max2OnLine+0x10>
        if (ligne[i] != EMPTY && ligne[i] == ligne[i + 1] && ligne[i + 1] == ligne[i + 2]) {
 80025d6:	4619      	mov	r1, r3
 80025d8:	5cc2      	ldrb	r2, [r0, r3]
 80025da:	2a02      	cmp	r2, #2
 80025dc:	d1f3      	bne.n	80025c6 <max2OnLine+0x2a>
 80025de:	e7f6      	b.n	80025ce <max2OnLine+0x32>
    return true;
 80025e0:	2001      	movs	r0, #1
}
 80025e2:	4770      	bx	lr

080025e4 <compteEtVerifie>:
 *
 * @param ligne The row to check.
 *
 * @return true if the count of 0's and 1's is valid, false otherwise.
 */
bool compteEtVerifie(uint8_t ligne[SIZE]) {
 80025e4:	b410      	push	{r4}
	uint8_t count0 = 0, count1 = 0;
    for (uint8_t i = 0; i < SIZE; i++) {
 80025e6:	2300      	movs	r3, #0
	uint8_t count0 = 0, count1 = 0;
 80025e8:	461c      	mov	r4, r3
 80025ea:	4619      	mov	r1, r3
    for (uint8_t i = 0; i < SIZE; i++) {
 80025ec:	e003      	b.n	80025f6 <compteEtVerifie+0x12>
        if (ligne[i] == 0) count0++;
        else if (ligne[i] == 1) count1++;
 80025ee:	2a01      	cmp	r2, #1
 80025f0:	d009      	beq.n	8002606 <compteEtVerifie+0x22>
    for (uint8_t i = 0; i < SIZE; i++) {
 80025f2:	3301      	adds	r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b07      	cmp	r3, #7
 80025f8:	d808      	bhi.n	800260c <compteEtVerifie+0x28>
        if (ligne[i] == 0) count0++;
 80025fa:	5cc2      	ldrb	r2, [r0, r3]
 80025fc:	2a00      	cmp	r2, #0
 80025fe:	d1f6      	bne.n	80025ee <compteEtVerifie+0xa>
 8002600:	3101      	adds	r1, #1
 8002602:	b2c9      	uxtb	r1, r1
 8002604:	e7f5      	b.n	80025f2 <compteEtVerifie+0xe>
        else if (ligne[i] == 1) count1++;
 8002606:	3401      	adds	r4, #1
 8002608:	b2e4      	uxtb	r4, r4
 800260a:	e7f2      	b.n	80025f2 <compteEtVerifie+0xe>
    }
    return count0 <= SIZE / 2 && count1 <= SIZE / 2;
 800260c:	2904      	cmp	r1, #4
 800260e:	d803      	bhi.n	8002618 <compteEtVerifie+0x34>
 8002610:	2c04      	cmp	r4, #4
 8002612:	d905      	bls.n	8002620 <compteEtVerifie+0x3c>
 8002614:	2000      	movs	r0, #0
 8002616:	e000      	b.n	800261a <compteEtVerifie+0x36>
 8002618:	2000      	movs	r0, #0
}
 800261a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800261e:	4770      	bx	lr
    return count0 <= SIZE / 2 && count1 <= SIZE / 2;
 8002620:	2001      	movs	r0, #1
 8002622:	e7fa      	b.n	800261a <compteEtVerifie+0x36>

08002624 <generateLine>:
 * @param row The row index to fill.
 * @param col The column index to start the filling.
 *
 * @return true if a valid row is generated, false otherwise.
 */
bool generateLine(uint8_t row, uint8_t col) {
 8002624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002626:	b083      	sub	sp, #12
 8002628:	4607      	mov	r7, r0

    if (col == SIZE) {
 800262a:	2908      	cmp	r1, #8
 800262c:	d10b      	bne.n	8002646 <generateLine+0x22>
        if (!max2OnLine(takuzuGenerated[row]) || !compteEtVerifie(takuzuGenerated[row]))
 800262e:	4c28      	ldr	r4, [pc, #160]	; (80026d0 <generateLine+0xac>)
 8002630:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 8002634:	4620      	mov	r0, r4
 8002636:	f7ff ffb1 	bl	800259c <max2OnLine>
 800263a:	2800      	cmp	r0, #0
 800263c:	d045      	beq.n	80026ca <generateLine+0xa6>
 800263e:	4620      	mov	r0, r4
 8002640:	f7ff ffd0 	bl	80025e4 <compteEtVerifie>
 8002644:	e041      	b.n	80026ca <generateLine+0xa6>
 8002646:	460d      	mov	r5, r1
            return false;
        return true;
    }

    uint8_t valeurs[2] = {0, 1};
 8002648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800264c:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (rand() % 2 == 0) {
 8002650:	f005 fb44 	bl	8007cdc <rand>
 8002654:	f010 0f01 	tst.w	r0, #1
 8002658:	d105      	bne.n	8002666 <generateLine+0x42>
    	uint8_t tmp = valeurs[0];
        valeurs[0] = valeurs[1];
 800265a:	2301      	movs	r3, #1
 800265c:	f88d 3004 	strb.w	r3, [sp, #4]
        valeurs[1] = tmp;
 8002660:	2300      	movs	r3, #0
 8002662:	f88d 3005 	strb.w	r3, [sp, #5]
bool generateLine(uint8_t row, uint8_t col) {
 8002666:	2400      	movs	r4, #0
 8002668:	e001      	b.n	800266e <generateLine+0x4a>
    }

    for (uint8_t i = 0; i < 2; i++) {
 800266a:	3401      	adds	r4, #1
 800266c:	b2e4      	uxtb	r4, r4
 800266e:	2c01      	cmp	r4, #1
 8002670:	d825      	bhi.n	80026be <generateLine+0x9a>
    	uint8_t value = valeurs[i];
 8002672:	ab02      	add	r3, sp, #8
 8002674:	4423      	add	r3, r4
 8002676:	f813 3c04 	ldrb.w	r3, [r3, #-4]
        takuzuGenerated[row][col] = value;
 800267a:	4e15      	ldr	r6, [pc, #84]	; (80026d0 <generateLine+0xac>)
 800267c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8002680:	5573      	strb	r3, [r6, r5]

        if (
            max2OnLine(takuzuGenerated[row]) &&
 8002682:	4630      	mov	r0, r6
 8002684:	f7ff ff8a 	bl	800259c <max2OnLine>
        if (
 8002688:	2800      	cmp	r0, #0
 800268a:	d0ee      	beq.n	800266a <generateLine+0x46>
            compteEtVerifie(takuzuGenerated[row]) &&
 800268c:	4630      	mov	r0, r6
 800268e:	f7ff ffa9 	bl	80025e4 <compteEtVerifie>
            max2OnLine(takuzuGenerated[row]) &&
 8002692:	2800      	cmp	r0, #0
 8002694:	d0e9      	beq.n	800266a <generateLine+0x46>
            max2OnColJusquaLigne(col, row) &&
 8002696:	4639      	mov	r1, r7
 8002698:	4628      	mov	r0, r5
 800269a:	f7ff ff37 	bl	800250c <max2OnColJusquaLigne>
            compteEtVerifie(takuzuGenerated[row]) &&
 800269e:	2800      	cmp	r0, #0
 80026a0:	d0e3      	beq.n	800266a <generateLine+0x46>
            compteEtVerifieColJusquaLigne(col, row)
 80026a2:	4639      	mov	r1, r7
 80026a4:	4628      	mov	r0, r5
 80026a6:	f7ff ff55 	bl	8002554 <compteEtVerifieColJusquaLigne>
            max2OnColJusquaLigne(col, row) &&
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d0dd      	beq.n	800266a <generateLine+0x46>
        ) {
            if (generateLine(row, col + 1)) return true;
 80026ae:	1c69      	adds	r1, r5, #1
 80026b0:	b2c9      	uxtb	r1, r1
 80026b2:	4638      	mov	r0, r7
 80026b4:	f7ff ffb6 	bl	8002624 <generateLine>
 80026b8:	2800      	cmp	r0, #0
 80026ba:	d0d6      	beq.n	800266a <generateLine+0x46>
 80026bc:	e005      	b.n	80026ca <generateLine+0xa6>
        }

    }

    takuzuGenerated[row][col] = EMPTY; // Backtrack if no valid solution
 80026be:	4c04      	ldr	r4, [pc, #16]	; (80026d0 <generateLine+0xac>)
 80026c0:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
 80026c4:	2302      	movs	r3, #2
 80026c6:	5563      	strb	r3, [r4, r5]
    return false;
 80026c8:	2000      	movs	r0, #0
}
 80026ca:	b003      	add	sp, #12
 80026cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000868 	.word	0x20000868

080026d4 <Generate>:
 *
 * This function initializes the generation of a valid Takuzu puzzle by repeatedly calling
 * the recursive `generateLine` function and backtracking when necessary.
 * @return void
 */
void Generate() {
 80026d4:	b510      	push	{r4, lr}
    printf("[TAKUZU][generate][info][init] Takuzu generation.\n\r");
 80026d6:	4816      	ldr	r0, [pc, #88]	; (8002730 <Generate+0x5c>)
 80026d8:	f005 fa44 	bl	8007b64 <iprintf>
	resetSeed();
 80026dc:	f7ff fef8 	bl	80024d0 <resetSeed>

    printf("[TAKUZU][generate][info][processing] Processing Takuzu generation.\n\r");
 80026e0:	4814      	ldr	r0, [pc, #80]	; (8002734 <Generate+0x60>)
 80026e2:	f005 fa3f 	bl	8007b64 <iprintf>
    for (uint8_t i = 0; i < SIZE; i++) {
 80026e6:	2400      	movs	r4, #0
 80026e8:	e00f      	b.n	800270a <Generate+0x36>
        for (uint8_t j = 0; j < SIZE; j++) {
            takuzuGenerated[i][j] = EMPTY;
 80026ea:	4a13      	ldr	r2, [pc, #76]	; (8002738 <Generate+0x64>)
 80026ec:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80026f0:	2102      	movs	r1, #2
 80026f2:	54d1      	strb	r1, [r2, r3]
        for (uint8_t j = 0; j < SIZE; j++) {
 80026f4:	3301      	adds	r3, #1
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b07      	cmp	r3, #7
 80026fa:	d9f6      	bls.n	80026ea <Generate+0x16>
        }

        bool success = generateLine(i, 0);
 80026fc:	2100      	movs	r1, #0
 80026fe:	4620      	mov	r0, r4
 8002700:	f7ff ff90 	bl	8002624 <generateLine>
        if (!success) {
 8002704:	b128      	cbz	r0, 8002712 <Generate+0x3e>
    for (uint8_t i = 0; i < SIZE; i++) {
 8002706:	3401      	adds	r4, #1
 8002708:	b2e4      	uxtb	r4, r4
 800270a:	2c07      	cmp	r4, #7
 800270c:	d80c      	bhi.n	8002728 <Generate+0x54>
        for (uint8_t j = 0; j < SIZE; j++) {
 800270e:	2300      	movs	r3, #0
 8002710:	e7f2      	b.n	80026f8 <Generate+0x24>
            i -= 2; // backtrack to previous line
 8002712:	3c02      	subs	r4, #2
 8002714:	b2e4      	uxtb	r4, r4
            if (i < -1) i = -1;

            if (isTimeExceeded()) {
 8002716:	f7ff feeb 	bl	80024f0 <isTimeExceeded>
 800271a:	2800      	cmp	r0, #0
 800271c:	d0f3      	beq.n	8002706 <Generate+0x32>
				resetSeed();
 800271e:	f7ff fed7 	bl	80024d0 <resetSeed>
				return Generate();
 8002722:	f7ff ffd7 	bl	80026d4 <Generate>
 8002726:	e002      	b.n	800272e <Generate+0x5a>
			}
        }
    }

    printf("[TAKUZU][generate][info][complete] Takuzu generation completed.\n\r");
 8002728:	4804      	ldr	r0, [pc, #16]	; (800273c <Generate+0x68>)
 800272a:	f005 fa1b 	bl	8007b64 <iprintf>
}
 800272e:	bd10      	pop	{r4, pc}
 8002730:	0800ae18 	.word	0x0800ae18
 8002734:	0800ae4c 	.word	0x0800ae4c
 8002738:	20000868 	.word	0x20000868
 800273c:	0800ae94 	.word	0x0800ae94

08002740 <showTakuzu>:
 * This function prints the Takuzu grid to the console.
 *
 * @param takuzu The Takuzu grid to display.
 * @return void
 */
void showTakuzu(uint8_t takuzu[SIZE][SIZE]) {
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	4606      	mov	r6, r0
    printf("[TAKUZU][showTakuzu][info][init] Show takuzu.\n");
 8002744:	4812      	ldr	r0, [pc, #72]	; (8002790 <showTakuzu+0x50>)
 8002746:	f005 fa93 	bl	8007c70 <puts>
    printf("[TAKUZU][showTakuzu][info][processing] Processing show takuzu.\n\r");
 800274a:	4812      	ldr	r0, [pc, #72]	; (8002794 <showTakuzu+0x54>)
 800274c:	f005 fa0a 	bl	8007b64 <iprintf>

    for (uint8_t j = 0; j < SIZE; j++) {
 8002750:	2500      	movs	r5, #0
 8002752:	e014      	b.n	800277e <showTakuzu+0x3e>
        for (uint8_t i = 0; i < SIZE; i++) {
            if (takuzu[i][j] == EMPTY)
                printf("- ");  // Affiche "-" pour les cases vides '2'
            else
                printf("%d ", takuzu[i][j]);  // Affiche 0 ou 1
 8002754:	4810      	ldr	r0, [pc, #64]	; (8002798 <showTakuzu+0x58>)
 8002756:	f005 fa05 	bl	8007b64 <iprintf>
        for (uint8_t i = 0; i < SIZE; i++) {
 800275a:	3401      	adds	r4, #1
 800275c:	b2e4      	uxtb	r4, r4
 800275e:	2c07      	cmp	r4, #7
 8002760:	d808      	bhi.n	8002774 <showTakuzu+0x34>
            if (takuzu[i][j] == EMPTY)
 8002762:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 8002766:	5d59      	ldrb	r1, [r3, r5]
 8002768:	2902      	cmp	r1, #2
 800276a:	d1f3      	bne.n	8002754 <showTakuzu+0x14>
                printf("- ");  // Affiche "-" pour les cases vides '2'
 800276c:	480b      	ldr	r0, [pc, #44]	; (800279c <showTakuzu+0x5c>)
 800276e:	f005 f9f9 	bl	8007b64 <iprintf>
 8002772:	e7f2      	b.n	800275a <showTakuzu+0x1a>
        }
        printf("\n\r");
 8002774:	480a      	ldr	r0, [pc, #40]	; (80027a0 <showTakuzu+0x60>)
 8002776:	f005 f9f5 	bl	8007b64 <iprintf>
    for (uint8_t j = 0; j < SIZE; j++) {
 800277a:	3501      	adds	r5, #1
 800277c:	b2ed      	uxtb	r5, r5
 800277e:	2d07      	cmp	r5, #7
 8002780:	d801      	bhi.n	8002786 <showTakuzu+0x46>
        for (uint8_t i = 0; i < SIZE; i++) {
 8002782:	2400      	movs	r4, #0
 8002784:	e7eb      	b.n	800275e <showTakuzu+0x1e>
    }
    printf("[TAKUZU][showTakuzu][info][complete] Show takuzu completed.\n\r");
 8002786:	4807      	ldr	r0, [pc, #28]	; (80027a4 <showTakuzu+0x64>)
 8002788:	f005 f9ec 	bl	8007b64 <iprintf>
}
 800278c:	bd70      	pop	{r4, r5, r6, pc}
 800278e:	bf00      	nop
 8002790:	0800aed8 	.word	0x0800aed8
 8002794:	0800af08 	.word	0x0800af08
 8002798:	0800af50 	.word	0x0800af50
 800279c:	0800af4c 	.word	0x0800af4c
 80027a0:	0800ac30 	.word	0x0800ac30
 80027a4:	0800af54 	.word	0x0800af54

080027a8 <DetectLignePattern>:
 * @param ligne The line to check for patterns.
 * @param motif The pattern to detect.
 * @param motif_size The size of the pattern.
 * @return void
 */
void DetectLignePattern(uint8_t i, uint8_t ligne[], uint8_t motif[], uint8_t motif_size) {
 80027a8:	b4f0      	push	{r4, r5, r6, r7}
    for (uint8_t j = 0; j <= SIZE - motif_size; j++) {
 80027aa:	2700      	movs	r7, #0
 80027ac:	e003      	b.n	80027b6 <DetectLignePattern+0xe>
    	uint8_t match = 1;
 80027ae:	2001      	movs	r0, #1
                match = 0;
                break;
            }
        }

        if (match) {
 80027b0:	bb40      	cbnz	r0, 8002804 <DetectLignePattern+0x5c>
    for (uint8_t j = 0; j <= SIZE - motif_size; j++) {
 80027b2:	3701      	adds	r7, #1
 80027b4:	b2ff      	uxtb	r7, r7
 80027b6:	463e      	mov	r6, r7
 80027b8:	f1c3 0008 	rsb	r0, r3, #8
 80027bc:	4287      	cmp	r7, r0
 80027be:	dc23      	bgt.n	8002808 <DetectLignePattern+0x60>
        for (uint8_t k = 0; k < motif_size; k++) {
 80027c0:	2000      	movs	r0, #0
 80027c2:	4298      	cmp	r0, r3
 80027c4:	d2f3      	bcs.n	80027ae <DetectLignePattern+0x6>
            if (ligne[j + k] != motif[k]) {
 80027c6:	1984      	adds	r4, r0, r6
 80027c8:	5d0d      	ldrb	r5, [r1, r4]
 80027ca:	5c14      	ldrb	r4, [r2, r0]
 80027cc:	42a5      	cmp	r5, r4
 80027ce:	d102      	bne.n	80027d6 <DetectLignePattern+0x2e>
        for (uint8_t k = 0; k < motif_size; k++) {
 80027d0:	3001      	adds	r0, #1
 80027d2:	b2c0      	uxtb	r0, r0
 80027d4:	e7f5      	b.n	80027c2 <DetectLignePattern+0x1a>
                match = 0;
 80027d6:	2000      	movs	r0, #0
 80027d8:	e7ea      	b.n	80027b0 <DetectLignePattern+0x8>
            for (uint8_t k = 0; k < motif_size; k++) {
            	if (motif[0] == 1){ // on retire les 1
            		if (ligne[j + k] == 1) { // motif[k] == 1 &&
 80027da:	1984      	adds	r4, r0, r6
 80027dc:	5d0d      	ldrb	r5, [r1, r4]
 80027de:	2d01      	cmp	r5, #1
 80027e0:	d00d      	beq.n	80027fe <DetectLignePattern+0x56>
            for (uint8_t k = 0; k < motif_size; k++) {
 80027e2:	3001      	adds	r0, #1
 80027e4:	b2c0      	uxtb	r0, r0
 80027e6:	4298      	cmp	r0, r3
 80027e8:	d20e      	bcs.n	8002808 <DetectLignePattern+0x60>
            	if (motif[0] == 1){ // on retire les 1
 80027ea:	7814      	ldrb	r4, [r2, #0]
 80027ec:	2c01      	cmp	r4, #1
 80027ee:	d0f4      	beq.n	80027da <DetectLignePattern+0x32>
						ligne[j + k] = EMPTY;
					}
            	} else { // on retire les 0
            		if (ligne[j + k] == 0) { // motif[k] == 1 &&
 80027f0:	1984      	adds	r4, r0, r6
 80027f2:	5d0d      	ldrb	r5, [r1, r4]
 80027f4:	2d00      	cmp	r5, #0
 80027f6:	d1f4      	bne.n	80027e2 <DetectLignePattern+0x3a>
						ligne[j + k] = EMPTY;
 80027f8:	2502      	movs	r5, #2
 80027fa:	550d      	strb	r5, [r1, r4]
 80027fc:	e7f1      	b.n	80027e2 <DetectLignePattern+0x3a>
						ligne[j + k] = EMPTY;
 80027fe:	2502      	movs	r5, #2
 8002800:	550d      	strb	r5, [r1, r4]
 8002802:	e7ee      	b.n	80027e2 <DetectLignePattern+0x3a>
            for (uint8_t k = 0; k < motif_size; k++) {
 8002804:	2000      	movs	r0, #0
 8002806:	e7ee      	b.n	80027e6 <DetectLignePattern+0x3e>

            }
            return;
        }
    }
}
 8002808:	bcf0      	pop	{r4, r5, r6, r7}
 800280a:	4770      	bx	lr

0800280c <CellRemover>:
 * This function checks for specific patterns (1001, 0110, 101, 010) in each row of the Takuzu grid
 * and removes them by setting the corresponding cells to EMPTY. The function iterates over all rows
 * and applies the `DetectLignePattern` function for each pattern.
 * @return void
 */
void CellRemover() {
 800280c:	b530      	push	{r4, r5, lr}
 800280e:	b085      	sub	sp, #20
	uint8_t pattern_1001[] = {1, 0, 0, 1};
 8002810:	4b19      	ldr	r3, [pc, #100]	; (8002878 <CellRemover+0x6c>)
 8002812:	9303      	str	r3, [sp, #12]
	uint8_t pattern_0110[] = {0, 1, 1, 0};
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <CellRemover+0x70>)
 8002816:	9302      	str	r3, [sp, #8]
	uint8_t pattern_101[]  = {1, 0, 1};
 8002818:	4a19      	ldr	r2, [pc, #100]	; (8002880 <CellRemover+0x74>)
 800281a:	6813      	ldr	r3, [r2, #0]
 800281c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002820:	0c1b      	lsrs	r3, r3, #16
 8002822:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t pattern_010[]  = {0, 1, 0};
 8002826:	6853      	ldr	r3, [r2, #4]
 8002828:	f8ad 3000 	strh.w	r3, [sp]
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	f88d 3002 	strb.w	r3, [sp, #2]

    for (uint8_t i = 0; i < SIZE; i++) {
 8002832:	2400      	movs	r4, #0
 8002834:	e01c      	b.n	8002870 <CellRemover+0x64>
        DetectLignePattern(i, takuzuToSolve[i], pattern_1001, 4);
 8002836:	4d13      	ldr	r5, [pc, #76]	; (8002884 <CellRemover+0x78>)
 8002838:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800283c:	2304      	movs	r3, #4
 800283e:	aa03      	add	r2, sp, #12
 8002840:	4629      	mov	r1, r5
 8002842:	4620      	mov	r0, r4
 8002844:	f7ff ffb0 	bl	80027a8 <DetectLignePattern>
        DetectLignePattern(i, takuzuToSolve[i], pattern_0110, 4);
 8002848:	2304      	movs	r3, #4
 800284a:	aa02      	add	r2, sp, #8
 800284c:	4629      	mov	r1, r5
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff ffaa 	bl	80027a8 <DetectLignePattern>
        DetectLignePattern(i, takuzuToSolve[i], pattern_101, 3);
 8002854:	2303      	movs	r3, #3
 8002856:	aa01      	add	r2, sp, #4
 8002858:	4629      	mov	r1, r5
 800285a:	4620      	mov	r0, r4
 800285c:	f7ff ffa4 	bl	80027a8 <DetectLignePattern>
        DetectLignePattern(i, takuzuToSolve[i], pattern_010, 3);
 8002860:	2303      	movs	r3, #3
 8002862:	466a      	mov	r2, sp
 8002864:	4629      	mov	r1, r5
 8002866:	4620      	mov	r0, r4
 8002868:	f7ff ff9e 	bl	80027a8 <DetectLignePattern>
    for (uint8_t i = 0; i < SIZE; i++) {
 800286c:	3401      	adds	r4, #1
 800286e:	b2e4      	uxtb	r4, r4
 8002870:	2c07      	cmp	r4, #7
 8002872:	d9e0      	bls.n	8002836 <CellRemover+0x2a>
    }
}
 8002874:	b005      	add	sp, #20
 8002876:	bd30      	pop	{r4, r5, pc}
 8002878:	01000001 	.word	0x01000001
 800287c:	00010100 	.word	0x00010100
 8002880:	0800a048 	.word	0x0800a048
 8002884:	200008a8 	.word	0x200008a8

08002888 <TakuzuToMatrix>:
 *
 * @param pixels A pointer to the pixel array to store the color values.
 * @param takuzu A 2D array representing the Takuzu grid to be converted.
 * @return void
 */
void TakuzuToMatrix(uint32_t* pixels, uint8_t takuzu[SIZE][SIZE]) {
 8002888:	b430      	push	{r4, r5}
    for (uint8_t i = 0; i < SIZE; i++) {
 800288a:	2500      	movs	r5, #0
 800288c:	e01c      	b.n	80028c8 <TakuzuToMatrix+0x40>
            //uint8_t index = i * SIZE + j;
        	uint8_t index = j * SIZE + i;

            switch (takuzu[i][j]) {
                case 0:
                    pixels[index] = WS2812_COLOR_LIGHT_BLUE;
 800288e:	2410      	movs	r4, #16
 8002890:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
        for (uint8_t j = 0; j < SIZE; j++) {
 8002894:	3201      	adds	r2, #1
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	2a07      	cmp	r2, #7
 800289a:	d813      	bhi.n	80028c4 <TakuzuToMatrix+0x3c>
        	uint8_t index = j * SIZE + i;
 800289c:	00d3      	lsls	r3, r2, #3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	442b      	add	r3, r5
 80028a2:	b2db      	uxtb	r3, r3
            switch (takuzu[i][j]) {
 80028a4:	eb01 04c5 	add.w	r4, r1, r5, lsl #3
 80028a8:	5ca4      	ldrb	r4, [r4, r2]
 80028aa:	2c00      	cmp	r4, #0
 80028ac:	d0ef      	beq.n	800288e <TakuzuToMatrix+0x6>
 80028ae:	2c01      	cmp	r4, #1
 80028b0:	d003      	beq.n	80028ba <TakuzuToMatrix+0x32>
                case 1:
                    pixels[index] = WS2812_COLOR_LIGHT_GREEN;
                    break;
                case EMPTY:
                default:
                    pixels[index] = WS2812_COLOR_BLACK;
 80028b2:	2400      	movs	r4, #0
 80028b4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
                    break;
 80028b8:	e7ec      	b.n	8002894 <TakuzuToMatrix+0xc>
                    pixels[index] = WS2812_COLOR_LIGHT_GREEN;
 80028ba:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 80028be:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
                    break;
 80028c2:	e7e7      	b.n	8002894 <TakuzuToMatrix+0xc>
    for (uint8_t i = 0; i < SIZE; i++) {
 80028c4:	3501      	adds	r5, #1
 80028c6:	b2ed      	uxtb	r5, r5
 80028c8:	2d07      	cmp	r5, #7
 80028ca:	d801      	bhi.n	80028d0 <TakuzuToMatrix+0x48>
        for (uint8_t j = 0; j < SIZE; j++) {
 80028cc:	2200      	movs	r2, #0
 80028ce:	e7e3      	b.n	8002898 <TakuzuToMatrix+0x10>
            }
        }
    }
}
 80028d0:	bc30      	pop	{r4, r5}
 80028d2:	4770      	bx	lr

080028d4 <TogglePixel>:
 * @param y The column index of the cell to toggle.
 *
 * @return TAKUZU_SUCCESS if the operation was successful, TAKUZU_FAILURE if there was an error (e.g.,
 *         attempting to modify a fixed cell).
 */
uint8_t TogglePixel(uint8_t x, uint8_t y) {
 80028d4:	b510      	push	{r4, lr}
	uint8_t error = 0;

	if (takuzuToSolve[x][y] != EMPTY) {
 80028d6:	4b19      	ldr	r3, [pc, #100]	; (800293c <TogglePixel+0x68>)
 80028d8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80028dc:	5c5b      	ldrb	r3, [r3, r1]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d116      	bne.n	8002910 <TogglePixel+0x3c>
	    printf("[TAKUZU][TogglePixel][info][player] Impossible fo modify a fix cell(%d, %d).\n\r", x, y);
	    return TAKUZU_FAILURE;
	}

	if (takuzuToPlay[x][y] == 0) {
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <TogglePixel+0x6c>)
 80028e4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80028e8:	5c5b      	ldrb	r3, [r3, r1]
 80028ea:	b9c3      	cbnz	r3, 800291e <TogglePixel+0x4a>
		takuzuToPlay[x][y] = 1;
 80028ec:	4b14      	ldr	r3, [pc, #80]	; (8002940 <TogglePixel+0x6c>)
 80028ee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80028f2:	2301      	movs	r3, #1
 80028f4:	5443      	strb	r3, [r0, r1]
	} else if(takuzuToPlay[x][y] == 1) {
		takuzuToPlay[x][y] = 2;
	} else {
		takuzuToPlay[x][y] = 0;
	}
	error += MovePixel();
 80028f6:	f7ff fd95 	bl	8002424 <MovePixel>
 80028fa:	4604      	mov	r4, r0
	showTakuzu(takuzuGenerated);
 80028fc:	4811      	ldr	r0, [pc, #68]	; (8002944 <TogglePixel+0x70>)
 80028fe:	f7ff ff1f 	bl	8002740 <showTakuzu>
	showTakuzu(takuzuToPlay);
 8002902:	480f      	ldr	r0, [pc, #60]	; (8002940 <TogglePixel+0x6c>)
 8002904:	f7ff ff1c 	bl	8002740 <showTakuzu>

	if (error == 0) {
 8002908:	b104      	cbz	r4, 800290c <TogglePixel+0x38>
	    return TAKUZU_SUCCESS;
	}

	return TAKUZU_FAILURE;
 800290a:	24ff      	movs	r4, #255	; 0xff
}
 800290c:	4620      	mov	r0, r4
 800290e:	bd10      	pop	{r4, pc}
	    printf("[TAKUZU][TogglePixel][info][player] Impossible fo modify a fix cell(%d, %d).\n\r", x, y);
 8002910:	460a      	mov	r2, r1
 8002912:	4601      	mov	r1, r0
 8002914:	480c      	ldr	r0, [pc, #48]	; (8002948 <TogglePixel+0x74>)
 8002916:	f005 f925 	bl	8007b64 <iprintf>
	    return TAKUZU_FAILURE;
 800291a:	24ff      	movs	r4, #255	; 0xff
 800291c:	e7f6      	b.n	800290c <TogglePixel+0x38>
	} else if(takuzuToPlay[x][y] == 1) {
 800291e:	2b01      	cmp	r3, #1
 8002920:	d005      	beq.n	800292e <TogglePixel+0x5a>
		takuzuToPlay[x][y] = 0;
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <TogglePixel+0x6c>)
 8002924:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002928:	2300      	movs	r3, #0
 800292a:	5443      	strb	r3, [r0, r1]
 800292c:	e7e3      	b.n	80028f6 <TogglePixel+0x22>
		takuzuToPlay[x][y] = 2;
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <TogglePixel+0x6c>)
 8002930:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002934:	2302      	movs	r3, #2
 8002936:	5443      	strb	r3, [r0, r1]
 8002938:	e7dd      	b.n	80028f6 <TogglePixel+0x22>
 800293a:	bf00      	nop
 800293c:	200008a8 	.word	0x200008a8
 8002940:	200008e8 	.word	0x200008e8
 8002944:	20000868 	.word	0x20000868
 8002948:	0800af94 	.word	0x0800af94

0800294c <ToggleCurrentPixel>:
 * This function toggles the value of the pixel at the current position (as defined by `GetPixelX()` and
 * `GetPixelY()`). It calls `TogglePixel` with the current pixel coordinates.
 *
 * @return void
 */
void ToggleCurrentPixel() {
 800294c:	b510      	push	{r4, lr}
	TogglePixel(GetPixelX(), GetPixelY());
 800294e:	f7ff fd5d 	bl	800240c <GetPixelX>
 8002952:	4604      	mov	r4, r0
 8002954:	f7ff fd60 	bl	8002418 <GetPixelY>
 8002958:	b2c1      	uxtb	r1, r0
 800295a:	b2e0      	uxtb	r0, r4
 800295c:	f7ff ffba 	bl	80028d4 <TogglePixel>
}
 8002960:	bd10      	pop	{r4, pc}

08002962 <CompareGrids>:
 * @param grid2 The second grid to compare.
 *
 * @return 1 if the grids are identical, 0 otherwise.
 */
uint8_t CompareGrids(uint8_t grid1[SIZE][SIZE], uint8_t grid2[SIZE][SIZE]) {
    for (uint8_t i = 0; i < SIZE; i++) {
 8002962:	2200      	movs	r2, #0
 8002964:	2a07      	cmp	r2, #7
 8002966:	d81d      	bhi.n	80029a4 <CompareGrids+0x42>
        for (uint8_t j = 0; j < SIZE; j++) {
 8002968:	2300      	movs	r3, #0
 800296a:	2b07      	cmp	r3, #7
 800296c:	d817      	bhi.n	800299e <CompareGrids+0x3c>
uint8_t CompareGrids(uint8_t grid1[SIZE][SIZE], uint8_t grid2[SIZE][SIZE]) {
 800296e:	b430      	push	{r4, r5}
            if (grid1[i][j] != grid2[i][j]) {
 8002970:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 8002974:	5ce5      	ldrb	r5, [r4, r3]
 8002976:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800297a:	5ce4      	ldrb	r4, [r4, r3]
 800297c:	42a5      	cmp	r5, r4
 800297e:	d10b      	bne.n	8002998 <CompareGrids+0x36>
        for (uint8_t j = 0; j < SIZE; j++) {
 8002980:	3301      	adds	r3, #1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b07      	cmp	r3, #7
 8002986:	d9f3      	bls.n	8002970 <CompareGrids+0xe>
    for (uint8_t i = 0; i < SIZE; i++) {
 8002988:	3201      	adds	r2, #1
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	2a07      	cmp	r2, #7
 800298e:	d801      	bhi.n	8002994 <CompareGrids+0x32>
        for (uint8_t j = 0; j < SIZE; j++) {
 8002990:	2300      	movs	r3, #0
 8002992:	e7f7      	b.n	8002984 <CompareGrids+0x22>
                return 0; // found a difference
            }
        }
    }
    return 1; // grids are matching
 8002994:	2001      	movs	r0, #1
 8002996:	e000      	b.n	800299a <CompareGrids+0x38>
                return 0; // found a difference
 8002998:	2000      	movs	r0, #0
}
 800299a:	bc30      	pop	{r4, r5}
 800299c:	4770      	bx	lr
    for (uint8_t i = 0; i < SIZE; i++) {
 800299e:	3201      	adds	r2, #1
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	e7df      	b.n	8002964 <CompareGrids+0x2>
    return 1; // grids are matching
 80029a4:	2001      	movs	r0, #1
}
 80029a6:	4770      	bx	lr

080029a8 <mainTakuzu>:
 * This function generates a Takuzu puzzle, displays it, removes specific patterns, and prepares
 * the puzzle for gameplay. It creates a copy of the generated Takuzu puzzle, removes patterns from
 * it, and sets up the initial grid for the player to modify.
 * @return void
 */
void mainTakuzu() {
 80029a8:	b508      	push	{r3, lr}
	Generate();
 80029aa:	f7ff fe93 	bl	80026d4 <Generate>
	showTakuzu(takuzuGenerated);
 80029ae:	4818      	ldr	r0, [pc, #96]	; (8002a10 <mainTakuzu+0x68>)
 80029b0:	f7ff fec6 	bl	8002740 <showTakuzu>

	for (uint8_t i = 0; i < SIZE; i++) {
 80029b4:	2100      	movs	r1, #0
 80029b6:	e00d      	b.n	80029d4 <mainTakuzu+0x2c>
		for (uint8_t j = 0; j < SIZE; j++) {
			takuzuToSolve[i][j] = takuzuGenerated[i][j];
 80029b8:	4a15      	ldr	r2, [pc, #84]	; (8002a10 <mainTakuzu+0x68>)
 80029ba:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80029be:	5cd0      	ldrb	r0, [r2, r3]
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <mainTakuzu+0x6c>)
 80029c2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80029c6:	54d0      	strb	r0, [r2, r3]
		for (uint8_t j = 0; j < SIZE; j++) {
 80029c8:	3301      	adds	r3, #1
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b07      	cmp	r3, #7
 80029ce:	d9f3      	bls.n	80029b8 <mainTakuzu+0x10>
	for (uint8_t i = 0; i < SIZE; i++) {
 80029d0:	3101      	adds	r1, #1
 80029d2:	b2c9      	uxtb	r1, r1
 80029d4:	2907      	cmp	r1, #7
 80029d6:	d801      	bhi.n	80029dc <mainTakuzu+0x34>
		for (uint8_t j = 0; j < SIZE; j++) {
 80029d8:	2300      	movs	r3, #0
 80029da:	e7f7      	b.n	80029cc <mainTakuzu+0x24>
		}
	}
	CellRemover();
 80029dc:	f7ff ff16 	bl	800280c <CellRemover>
	showTakuzu(takuzuToSolve);
 80029e0:	480c      	ldr	r0, [pc, #48]	; (8002a14 <mainTakuzu+0x6c>)
 80029e2:	f7ff fead 	bl	8002740 <showTakuzu>
	for (uint8_t i = 0; i < SIZE; i++) {
 80029e6:	2100      	movs	r1, #0
 80029e8:	e00d      	b.n	8002a06 <mainTakuzu+0x5e>
		for (uint8_t j = 0; j < SIZE; j++) {
			takuzuToPlay[i][j] = takuzuToSolve[i][j];
 80029ea:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <mainTakuzu+0x6c>)
 80029ec:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80029f0:	5cd0      	ldrb	r0, [r2, r3]
 80029f2:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <mainTakuzu+0x70>)
 80029f4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80029f8:	54d0      	strb	r0, [r2, r3]
		for (uint8_t j = 0; j < SIZE; j++) {
 80029fa:	3301      	adds	r3, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b07      	cmp	r3, #7
 8002a00:	d9f3      	bls.n	80029ea <mainTakuzu+0x42>
	for (uint8_t i = 0; i < SIZE; i++) {
 8002a02:	3101      	adds	r1, #1
 8002a04:	b2c9      	uxtb	r1, r1
 8002a06:	2907      	cmp	r1, #7
 8002a08:	d801      	bhi.n	8002a0e <mainTakuzu+0x66>
		for (uint8_t j = 0; j < SIZE; j++) {
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e7f7      	b.n	80029fe <mainTakuzu+0x56>
		}
	}
}
 8002a0e:	bd08      	pop	{r3, pc}
 8002a10:	20000868 	.word	0x20000868
 8002a14:	200008a8 	.word	0x200008a8
 8002a18:	200008e8 	.word	0x200008e8

08002a1c <NMI_Handler>:
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{

  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <NMI_Handler>

08002a1e <HardFault_Handler>:
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{

  while (1)
 8002a1e:	e7fe      	b.n	8002a1e <HardFault_Handler>

08002a20 <MemManage_Handler>:
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{

  while (1)
 8002a20:	e7fe      	b.n	8002a20 <MemManage_Handler>

08002a22 <BusFault_Handler>:
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{

  while (1)
 8002a22:	e7fe      	b.n	8002a22 <BusFault_Handler>

08002a24 <UsageFault_Handler>:
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{

  while (1)
 8002a24:	e7fe      	b.n	8002a24 <UsageFault_Handler>

08002a26 <SVC_Handler>:
  */
void SVC_Handler(void)
{


}
 8002a26:	4770      	bx	lr

08002a28 <DebugMon_Handler>:
  */
void DebugMon_Handler(void)
{


}
 8002a28:	4770      	bx	lr

08002a2a <PendSV_Handler>:
  */
void PendSV_Handler(void)
{


}
 8002a2a:	4770      	bx	lr

08002a2c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	4770      	bx	lr

08002a30 <_kill>:

int _kill(int pid, int sig)
{
 8002a30:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a32:	f004 f9dd 	bl	8006df0 <__errno>
 8002a36:	2316      	movs	r3, #22
 8002a38:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3e:	bd08      	pop	{r3, pc}

08002a40 <_exit>:

void _exit (int status)
{
 8002a40:	b508      	push	{r3, lr}
  _kill(status, -1);
 8002a42:	f04f 31ff 	mov.w	r1, #4294967295
 8002a46:	f7ff fff3 	bl	8002a30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a4a:	e7fe      	b.n	8002a4a <_exit+0xa>

08002a4c <_close>:

__attribute__((weak))  int _close(int file)
{
  (void)file;
  return -1;
}
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	4770      	bx	lr

08002a52 <_fstat>:


__attribute__((weak))  int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a56:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002a58:	2000      	movs	r0, #0
 8002a5a:	4770      	bx	lr

08002a5c <_isatty>:

__attribute__((weak))  int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	4770      	bx	lr

08002a60 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002a60:	2000      	movs	r0, #0
 8002a62:	4770      	bx	lr

08002a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a64:	b510      	push	{r4, lr}
 8002a66:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a68:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <_sbrk+0x38>)
 8002a6a:	490d      	ldr	r1, [pc, #52]	; (8002aa0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a6c:	480d      	ldr	r0, [pc, #52]	; (8002aa4 <_sbrk+0x40>)
 8002a6e:	6800      	ldr	r0, [r0, #0]
 8002a70:	b140      	cbz	r0, 8002a84 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a72:	480c      	ldr	r0, [pc, #48]	; (8002aa4 <_sbrk+0x40>)
 8002a74:	6800      	ldr	r0, [r0, #0]
 8002a76:	4403      	add	r3, r0
 8002a78:	1a52      	subs	r2, r2, r1
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d806      	bhi.n	8002a8c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002a7e:	4a09      	ldr	r2, [pc, #36]	; (8002aa4 <_sbrk+0x40>)
 8002a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002a82:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002a84:	4807      	ldr	r0, [pc, #28]	; (8002aa4 <_sbrk+0x40>)
 8002a86:	4c08      	ldr	r4, [pc, #32]	; (8002aa8 <_sbrk+0x44>)
 8002a88:	6004      	str	r4, [r0, #0]
 8002a8a:	e7f2      	b.n	8002a72 <_sbrk+0xe>
    errno = ENOMEM;
 8002a8c:	f004 f9b0 	bl	8006df0 <__errno>
 8002a90:	230c      	movs	r3, #12
 8002a92:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	e7f3      	b.n	8002a82 <_sbrk+0x1e>
 8002a9a:	bf00      	nop
 8002a9c:	20008000 	.word	0x20008000
 8002aa0:	00000400 	.word	0x00000400
 8002aa4:	20000214 	.word	0x20000214
 8002aa8:	20000940 	.word	0x20000940

08002aac <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002aac:	4a03      	ldr	r2, [pc, #12]	; (8002abc <SystemInit+0x10>)
 8002aae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002ab2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ab6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aba:	4770      	bx	lr
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <WS2812_send_pixel_asm>:
  .section  .text.User_section

  .global WS2812_send_pixel_asm
  WS2812_send_pixel_asm:
  //R0 : pixel
  	STMDB SP! ,{R4-R7}
 8002ac0:	e92d 00f0 	stmdb	sp!, {r4, r5, r6, r7}
  //R1 : GPIO_PIN_X	: c'est la valeur à inscrire dans le registre BSRR pour mettre à 1 le port demandé
  //R2 : Adresse du registre BSRR du GPIO concerné

	LSL R5, R1, #16	//R5 est la valeur à inscrire dans le registre BSRR pour mettre à 0 le port demandé
 8002ac4:	ea4f 4501 	mov.w	r5, r1, lsl #16
	MOV R3, #23
 8002ac8:	f04f 0317 	mov.w	r3, #23

08002acc <loop>:
	loop:

		LSR R4, R0, R3
 8002acc:	fa20 f403 	lsr.w	r4, r0, r3
		ANDS R4, R4, #1
 8002ad0:	f014 0401 	ands.w	r4, r4, #1
		BEQ write0
 8002ad4:	d00a      	beq.n	8002aec <write0>

08002ad6 <write1>:
		write1:
			STR R1, [R2]
 8002ad6:	6011      	str	r1, [r2, #0]
			MOV R7, #T1H
 8002ad8:	f04f 0728 	mov.w	r7, #40	; 0x28

08002adc <loop1h>:
			loop1h:
				SUBS R7, #1
 8002adc:	3f01      	subs	r7, #1
				BNE loop1h
 8002ade:	d1fd      	bne.n	8002adc <loop1h>
			STR R5, [R2]
 8002ae0:	6015      	str	r5, [r2, #0]
			MOV R7, #T1L
 8002ae2:	f04f 071e 	mov.w	r7, #30

08002ae6 <loop1l>:
			loop1l:
				SUBS R7, #1
 8002ae6:	3f01      	subs	r7, #1
				BNE loop1l
 8002ae8:	d1fd      	bne.n	8002ae6 <loop1l>
			B end_loop
 8002aea:	e00a      	b.n	8002b02 <end_loop>

08002aec <write0>:
		write0:
			STR R1, [R2]
 8002aec:	6011      	str	r1, [r2, #0]
			MOV R7, #T0H
 8002aee:	f04f 0712 	mov.w	r7, #18

08002af2 <loop0h>:
			loop0h:
				SUBS R7, #1
 8002af2:	3f01      	subs	r7, #1
				BNE loop0h
 8002af4:	d1fd      	bne.n	8002af2 <loop0h>
			STR R5, [R2]
 8002af6:	6015      	str	r5, [r2, #0]
			MOV R7, #T0L
 8002af8:	f04f 0728 	mov.w	r7, #40	; 0x28

08002afc <loop0l>:
			loop0l:
				SUBS R7, #1
 8002afc:	3f01      	subs	r7, #1
				BNE loop0l
 8002afe:	d1fd      	bne.n	8002afc <loop0l>
			B end_loop
 8002b00:	e7ff      	b.n	8002b02 <end_loop>

08002b02 <end_loop>:
		end_loop:
		SUB R3, #1
 8002b02:	f1a3 0301 	sub.w	r3, r3, #1
		CMP R3, #-1
 8002b06:	f1b3 3fff 	cmp.w	r3, #4294967295
	BNE loop
 8002b0a:	d1df      	bne.n	8002acc <loop>

	LDMIA SP! ,{R4-R7}
 8002b0c:	bcf0      	pop	{r4, r5, r6, r7}
	BX LR
 8002b0e:	4770      	bx	lr

08002b10 <BSP_WS2812_init>:

#define OUTPUT(x)	HAL_GPIO_WritePin(WS2812_PORT_DATA, WS2812_PIN_DATA, x)


void BSP_WS2812_init(void)
{
 8002b10:	b500      	push	{lr}
 8002b12:	b083      	sub	sp, #12
	BSP_GPIO_pin_config(WS2812_PORT_DATA, WS2812_PIN_DATA, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_NO_AF);
 8002b14:	2300      	movs	r3, #0
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	9200      	str	r2, [sp, #0]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	2110      	movs	r1, #16
 8002b20:	4802      	ldr	r0, [pc, #8]	; (8002b2c <BSP_WS2812_init+0x1c>)
 8002b22:	f000 fa0f 	bl	8002f44 <BSP_GPIO_pin_config>
}
 8002b26:	b003      	add	sp, #12
 8002b28:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b2c:	48000400 	.word	0x48000400

08002b30 <BSP_WS2812_reset>:
	for(i=0;i<size;i++)
		WS2812_send_pixel(pixel);
	__enable_irq();
}

void BSP_WS2812_reset(void){
 8002b30:	b508      	push	{r3, lr}

	//int i;
	OUTPUT(0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2110      	movs	r1, #16
 8002b36:	4803      	ldr	r0, [pc, #12]	; (8002b44 <BSP_WS2812_reset+0x14>)
 8002b38:	f002 f8b5 	bl	8004ca6 <HAL_GPIO_WritePin>
	Delay_us(100);
 8002b3c:	2064      	movs	r0, #100	; 0x64
 8002b3e:	f7fd fb4b 	bl	80001d8 <Delay_us>
	//for(i = 0; i < RES; i++);	//Utilisez cette fonction et reglée RES si la fonction Delay_us n'est pas disponible.
}
 8002b42:	bd08      	pop	{r3, pc}
 8002b44:	48000400 	.word	0x48000400

08002b48 <BSP_WS2812_display>:
{
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	4606      	mov	r6, r0
 8002b4c:	460d      	mov	r5, r1
  __ASM volatile ("cpsid i" : : : "memory");
 8002b4e:	b672      	cpsid	i
	BSP_WS2812_reset();
 8002b50:	f7ff ffee 	bl	8002b30 <BSP_WS2812_reset>
	for(i=0;i<size;i++)
 8002b54:	2400      	movs	r4, #0
 8002b56:	42ac      	cmp	r4, r5
 8002b58:	d208      	bcs.n	8002b6c <BSP_WS2812_display+0x24>
		WS2812_send_pixel(pixels[i]);
 8002b5a:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <BSP_WS2812_display+0x28>)
 8002b5c:	2110      	movs	r1, #16
 8002b5e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002b62:	f7ff ffad 	bl	8002ac0 <WS2812_send_pixel_asm>
	for(i=0;i<size;i++)
 8002b66:	3401      	adds	r4, #1
 8002b68:	b2e4      	uxtb	r4, r4
 8002b6a:	e7f4      	b.n	8002b56 <BSP_WS2812_display+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b6c:	b662      	cpsie	i
}
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	48000418 	.word	0x48000418

08002b74 <BSP_WS2812_display_full>:
{
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	4606      	mov	r6, r0
 8002b78:	460d      	mov	r5, r1
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7a:	b672      	cpsid	i
	BSP_WS2812_reset();
 8002b7c:	f7ff ffd8 	bl	8002b30 <BSP_WS2812_reset>
	for(i=0;i<size;i++)
 8002b80:	2400      	movs	r4, #0
 8002b82:	42ac      	cmp	r4, r5
 8002b84:	d207      	bcs.n	8002b96 <BSP_WS2812_display_full+0x22>
		WS2812_send_pixel(pixel);
 8002b86:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <BSP_WS2812_display_full+0x28>)
 8002b88:	2110      	movs	r1, #16
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	f7ff ff98 	bl	8002ac0 <WS2812_send_pixel_asm>
	for(i=0;i<size;i++)
 8002b90:	3401      	adds	r4, #1
 8002b92:	b2e4      	uxtb	r4, r4
 8002b94:	e7f5      	b.n	8002b82 <BSP_WS2812_display_full+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b96:	b662      	cpsie	i
}
 8002b98:	bd70      	pop	{r4, r5, r6, pc}
 8002b9a:	bf00      	nop
 8002b9c:	48000418 	.word	0x48000418

08002ba0 <ADC_PORT_Init>:
PA4  --------------> ADC2_IN17
PA5  --------------> ADC2_IN13
PA6  --------------> ADC2_IN3
PA7  --------------> ADC2_IN4
*/
void ADC_PORT_Init(){
 8002ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba2:	b08b      	sub	sp, #44	; 0x2c
	uint8_t channel;
	ADC_ChannelConfTypeDef sConfig = {0};
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	a802      	add	r0, sp, #8
 8002baa:	f004 f965 	bl	8006e78 <memset>

	// Initialisation du tableau des id des convertisseurs analogique numÃ©rique. Chaque canal non utilisÃ© verra sa case Ã  -1.
	for(channel=0;channel<ADC_CHANNEL_NB;channel++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e004      	b.n	8002bbc <ADC_PORT_Init+0x1c>
		adc_id[channel] = -1;
 8002bb2:	4a1e      	ldr	r2, [pc, #120]	; (8002c2c <ADC_PORT_Init+0x8c>)
 8002bb4:	21ff      	movs	r1, #255	; 0xff
 8002bb6:	54d1      	strb	r1, [r2, r3]
	for(channel=0;channel<ADC_CHANNEL_NB;channel++)
 8002bb8:	3301      	adds	r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b06      	cmp	r3, #6
 8002bbe:	d9f8      	bls.n	8002bb2 <ADC_PORT_Init+0x12>

	int8_t index = 0;
	sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8002bc0:	2606      	movs	r6, #6
 8002bc2:	9604      	str	r6, [sp, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002bc4:	237f      	movs	r3, #127	; 0x7f
 8002bc6:	9305      	str	r3, [sp, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002bc8:	2304      	movs	r3, #4
 8002bca:	9306      	str	r3, [sp, #24]
	sConfig.OffsetSaturation = DISABLE;
 8002bcc:	2400      	movs	r4, #0
 8002bce:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	sConfig.OffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8002bd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bd6:	9308      	str	r3, [sp, #32]
	sConfig.Offset = 0;
 8002bd8:	9407      	str	r4, [sp, #28]

	#if USE_IN1
  		BSP_GPIO_pin_config(GPIOA, GPIO_PIN_0, GPIO_MODE_ANALOG, GPIO_NOPULL, GPIO_SPEED_FREQ_MEDIUM, GPIO_NO_AF);
 8002bda:	9401      	str	r4, [sp, #4]
 8002bdc:	2501      	movs	r5, #1
 8002bde:	9500      	str	r5, [sp, #0]
 8002be0:	4623      	mov	r3, r4
 8002be2:	2203      	movs	r2, #3
 8002be4:	4629      	mov	r1, r5
 8002be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bea:	f000 f9ab 	bl	8002f44 <BSP_GPIO_pin_config>
		adc_id[ADC_1] = index;
 8002bee:	4f0f      	ldr	r7, [pc, #60]	; (8002c2c <ADC_PORT_Init+0x8c>)
 8002bf0:	703c      	strb	r4, [r7, #0]
		sConfig.Rank = ranks[index];
 8002bf2:	9603      	str	r6, [sp, #12]
		index++;
  		sConfig.Channel = ADC_CHANNEL_1;
 8002bf4:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <ADC_PORT_Init+0x90>)
 8002bf6:	9302      	str	r3, [sp, #8]
  		HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8002bf8:	4e0e      	ldr	r6, [pc, #56]	; (8002c34 <ADC_PORT_Init+0x94>)
 8002bfa:	a902      	add	r1, sp, #8
 8002bfc:	4630      	mov	r0, r6
 8002bfe:	f001 f9c7 	bl	8003f90 <HAL_ADC_ConfigChannel>
	#endif

	#if USE_IN2
  		BSP_GPIO_pin_config(GPIOA, GPIO_PIN_1, GPIO_MODE_ANALOG, GPIO_NOPULL, GPIO_SPEED_FREQ_MEDIUM, GPIO_NO_AF);
 8002c02:	9401      	str	r4, [sp, #4]
 8002c04:	9500      	str	r5, [sp, #0]
 8002c06:	4623      	mov	r3, r4
 8002c08:	2203      	movs	r2, #3
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c10:	f000 f998 	bl	8002f44 <BSP_GPIO_pin_config>
  		adc_id[ADC_2] = index;
 8002c14:	707d      	strb	r5, [r7, #1]
  		sConfig.Rank = ranks[index];
 8002c16:	230c      	movs	r3, #12
 8002c18:	9303      	str	r3, [sp, #12]
  		index++;
  		sConfig.Channel = ADC_CHANNEL_2;
 8002c1a:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <ADC_PORT_Init+0x98>)
 8002c1c:	9302      	str	r3, [sp, #8]
  		HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8002c1e:	a902      	add	r1, sp, #8
 8002c20:	4630      	mov	r0, r6
 8002c22:	f001 f9b5 	bl	8003f90 <HAL_ADC_ConfigChannel>
  		sConfig.Rank = ranks[index];
  		index++;
  		sConfig.Channel = ADC_CHANNEL_17;
  		HAL_ADC_ConfigChannel(&hadc, &sConfig);
	#endif
}
 8002c26:	b00b      	add	sp, #44	; 0x2c
 8002c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	2000021c 	.word	0x2000021c
 8002c30:	04300002 	.word	0x04300002
 8002c34:	2000022c 	.word	0x2000022c
 8002c38:	08600004 	.word	0x08600004

08002c3c <BSP_ADC_init>:


void BSP_ADC_init(void)
{
 8002c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c40:	b097      	sub	sp, #92	; 0x5c
	// ADC2 clock enable
	__HAL_RCC_ADC12_CLK_ENABLE();
 8002c42:	4e53      	ldr	r6, [pc, #332]	; (8002d90 <BSP_ADC_init+0x154>)
 8002c44:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8002c46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c4a:	64f3      	str	r3, [r6, #76]	; 0x4c
 8002c4c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8002c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	9b00      	ldr	r3, [sp, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002c56:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8002c58:	f043 0320 	orr.w	r3, r3, #32
 8002c5c:	64f3      	str	r3, [r6, #76]	; 0x4c
 8002c5e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c68:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	64f3      	str	r3, [r6, #76]	; 0x4c
 8002c70:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	9302      	str	r3, [sp, #8]
 8002c78:	9b02      	ldr	r3, [sp, #8]

	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c7a:	2240      	movs	r2, #64	; 0x40
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	a806      	add	r0, sp, #24
 8002c80:	f004 f8fa 	bl	8006e78 <memset>
	// Initializes the peripherals clocks
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c88:	9305      	str	r3, [sp, #20]
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002c8a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002c8e:	9314      	str	r3, [sp, #80]	; 0x50
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002c90:	a805      	add	r0, sp, #20
 8002c92:	f002 fca3 	bl	80055dc <HAL_RCCEx_PeriphCLKConfig>

	// Initialisation de l'ADC2
	hadc.Instance = ADC2; 									//
 8002c96:	4c3f      	ldr	r4, [pc, #252]	; (8002d94 <BSP_ADC_init+0x158>)
 8002c98:	4b3f      	ldr	r3, [pc, #252]	; (8002d98 <BSP_ADC_init+0x15c>)
 8002c9a:	6023      	str	r3, [r4, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2; 	//
 8002c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca0:	6063      	str	r3, [r4, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B; 				//
 8002ca2:	2500      	movs	r5, #0
 8002ca4:	60a5      	str	r5, [r4, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT; 				//
 8002ca6:	60e5      	str	r5, [r4, #12]
	hadc.Init.GainCompensation = 0;
 8002ca8:	6125      	str	r5, [r4, #16]
	hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;				//Mode de conversion : ENABLE si plusieurs canaux. DISABLE si un seul canal.
 8002caa:	f04f 0901 	mov.w	r9, #1
 8002cae:	f8c4 9014 	str.w	r9, [r4, #20]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;				//TODO a confirmer?
 8002cb2:	2308      	movs	r3, #8
 8002cb4:	61a3      	str	r3, [r4, #24]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8002cb6:	7725      	strb	r5, [r4, #28]
	hadc.Init.ContinuousConvMode = DISABLE; 				//
 8002cb8:	7765      	strb	r5, [r4, #29]
	hadc.Init.NbrOfConversion = ADC_NB_OF_CHANNEL_USED;
 8002cba:	2702      	movs	r7, #2
 8002cbc:	6227      	str	r7, [r4, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE; 				//
 8002cbe:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8002cc2:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 8002cc6:	62e3      	str	r3, [r4, #44]	; 0x2c
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;	//ADC_EXTERNALTRIGCONVEDGE_RISING
 8002cc8:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8002ccc:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	hadc.Init.DMAContinuousRequests = ENABLE; 				//
 8002cd0:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
	hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cd8:	63e3      	str	r3, [r4, #60]	; 0x3c
	hadc.Init.OversamplingMode = DISABLE;
 8002cda:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
	HAL_ADC_Init(&hadc);
 8002cde:	4620      	mov	r0, r4
 8002ce0:	f000 fe98 	bl	8003a14 <HAL_ADC_Init>

	//DÃ©clenchements de l'ADC par le TIMER6 (TRGO)
	BSP_TIMER_run_us(TIMER6_ID, 1000, true);			//1 mesure par ms. (choix arbitraire, c'est un exemple...vous pouvez changer cette pÃ©riode de mesure !)
 8002ce4:	464a      	mov	r2, r9
 8002ce6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002cea:	2004      	movs	r0, #4
 8002cec:	f000 faac 	bl	8003248 <BSP_TIMER_run_us>
	BSP_TIMER_enable_output_trigger(TIMER6_ID);
 8002cf0:	2004      	movs	r0, #4
 8002cf2:	f000 fb9d 	bl	8003430 <BSP_TIMER_enable_output_trigger>

	//__NVIC_EnableIRQ(ADC1_2_IRQn);	//si on souhaite dÃ©clencher une IT aprÃ¨s chaque conversion

	// Initialisation des ports
	ADC_PORT_Init();
 8002cf6:	f7ff ff53 	bl	8002ba0 <ADC_PORT_Init>

	// ADC2 DMA Init
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002cfa:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	64b3      	str	r3, [r6, #72]	; 0x48
 8002d02:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	9303      	str	r3, [sp, #12]
 8002d0a:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002d0c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002d0e:	ea43 0309 	orr.w	r3, r3, r9
 8002d12:	64b3      	str	r3, [r6, #72]	; 0x48
 8002d14:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002d16:	ea03 0309 	and.w	r3, r3, r9
 8002d1a:	9304      	str	r3, [sp, #16]
 8002d1c:	9b04      	ldr	r3, [sp, #16]
	hdma.Instance = DMA1_Channel1;
 8002d1e:	4e1f      	ldr	r6, [pc, #124]	; (8002d9c <BSP_ADC_init+0x160>)
 8002d20:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <BSP_ADC_init+0x164>)
 8002d22:	6033      	str	r3, [r6, #0]
	hdma.Init.Request = DMA_REQUEST_ADC2;
 8002d24:	2324      	movs	r3, #36	; 0x24
 8002d26:	6073      	str	r3, [r6, #4]
	hdma.Init.Direction = DMA_PERIPH_TO_MEMORY; //On indique au pÃ©riphÃ©rique DMA qu'il doit copier des donnÃ©es d'un pÃ©riphÃ©rique vers la mÃ©moire.
 8002d28:	60b5      	str	r5, [r6, #8]
	hdma.Init.PeriphInc = DMA_PINC_DISABLE;		//A chaque copie, l'adresse source des donnÃ©es n'est pas incrÃ©mentÃ©e (il se sert dans le mÃªme registre de l'ADC pour chaque nouvelle donnÃ©e)
 8002d2a:	60f5      	str	r5, [r6, #12]
	hdma.Init.MemInc = DMA_MINC_ENABLE;			//A chaque copie, l'adresse destination des donnÃ©es est  incrÃ©mentÃ©e (il range les donnÃ©es en mÃ©moire dans un tableau)
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	6133      	str	r3, [r6, #16]
	hdma.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d34:	6173      	str	r3, [r6, #20]
	hdma.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d36:	f8c6 8018 	str.w	r8, [r6, #24]
	hdma.Init.Mode = DMA_CIRCULAR;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	61f3      	str	r3, [r6, #28]
	hdma.Init.Priority = DMA_PRIORITY_HIGH;
 8002d3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d42:	6233      	str	r3, [r6, #32]
	HAL_DMA_Init(&hdma);
 8002d44:	4630      	mov	r0, r6
 8002d46:	f001 fd43 	bl	80047d0 <HAL_DMA_Init>
	__HAL_LINKDMA(&hadc,DMA_Handle,hdma);
 8002d4a:	6566      	str	r6, [r4, #84]	; 0x54
 8002d4c:	62b4      	str	r4, [r6, #40]	; 0x28

	// DMA interrupt
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d4e:	462a      	mov	r2, r5
 8002d50:	4629      	mov	r1, r5
 8002d52:	200b      	movs	r0, #11
 8002d54:	f001 fc8c 	bl	8004670 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002d58:	200b      	movs	r0, #11
 8002d5a:	f001 fcbd 	bl	80046d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8002d5e:	462a      	mov	r2, r5
 8002d60:	4629      	mov	r1, r5
 8002d62:	205e      	movs	r0, #94	; 0x5e
 8002d64:	f001 fc84 	bl	8004670 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8002d68:	205e      	movs	r0, #94	; 0x5e
 8002d6a:	f001 fcb5 	bl	80046d8 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002d6e:	462a      	mov	r2, r5
 8002d70:	4629      	mov	r1, r5
 8002d72:	2012      	movs	r0, #18
 8002d74:	f001 fc7c 	bl	8004670 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002d78:	2012      	movs	r0, #18
 8002d7a:	f001 fcad 	bl	80046d8 <HAL_NVIC_EnableIRQ>
	//HAL_ADC_Start_IT(&hadc);

	//Lancement de l'ADC, avec usage du DMA.
	HAL_ADC_Start_DMA(&hadc,(uint32_t*)adc_converted_value,ADC_NB_OF_CHANNEL_USED);
 8002d7e:	463a      	mov	r2, r7
 8002d80:	4908      	ldr	r1, [pc, #32]	; (8002da4 <BSP_ADC_init+0x168>)
 8002d82:	4620      	mov	r0, r4
 8002d84:	f001 fbda 	bl	800453c <HAL_ADC_Start_DMA>

}
 8002d88:	b017      	add	sp, #92	; 0x5c
 8002d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000
 8002d94:	2000022c 	.word	0x2000022c
 8002d98:	50000100 	.word	0x50000100
 8002d9c:	20000298 	.word	0x20000298
 8002da0:	40020008 	.word	0x40020008
 8002da4:	20000218 	.word	0x20000218

08002da8 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void)
{
 8002da8:	b508      	push	{r3, lr}
	HAL_ADC_IRQHandler(&hadc);
 8002daa:	4802      	ldr	r0, [pc, #8]	; (8002db4 <ADC1_2_IRQHandler+0xc>)
 8002dac:	f000 ff54 	bl	8003c58 <HAL_ADC_IRQHandler>
}
 8002db0:	bd08      	pop	{r3, pc}
 8002db2:	bf00      	nop
 8002db4:	2000022c 	.word	0x2000022c

08002db8 <BSP_ADC_getValue>:
* @param	channel : un canal de ADC_0 Ã  ADC_15
* @retval 	un entier signÃ© sur 16 bits, correspondant Ã  la valeur demandÃ©e, pouvant aller de 0 Ã  4095 (l'ADC mesure sur 12 bits).
* @retval	Cette fonction retourne -1 si l'on demande un canal ADC qui n'a pas Ã©tÃ© initialisÃ© (le define USE_ADCx correspondant est commentÃ©)
*/
uint16_t BSP_ADC_getValue(adc_id_e channel)
{
 8002db8:	b508      	push	{r3, lr}
	if(adc_id[channel] == -1 || channel >= ADC_CHANNEL_NB)
 8002dba:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <BSP_ADC_getValue+0x28>)
 8002dbc:	561b      	ldrsb	r3, [r3, r0]
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc2:	d005      	beq.n	8002dd0 <BSP_ADC_getValue+0x18>
 8002dc4:	2806      	cmp	r0, #6
 8002dc6:	d803      	bhi.n	8002dd0 <BSP_ADC_getValue+0x18>
	{
		printf("You asked for the reading of the channel %d which is non initialized or unused! Please review your software\n", channel);
		return -1;
	}
	return adc_converted_value[adc_id[channel]];
 8002dc8:	4a06      	ldr	r2, [pc, #24]	; (8002de4 <BSP_ADC_getValue+0x2c>)
 8002dca:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
}
 8002dce:	bd08      	pop	{r3, pc}
		printf("You asked for the reading of the channel %d which is non initialized or unused! Please review your software\n", channel);
 8002dd0:	4601      	mov	r1, r0
 8002dd2:	4805      	ldr	r0, [pc, #20]	; (8002de8 <BSP_ADC_getValue+0x30>)
 8002dd4:	f004 fec6 	bl	8007b64 <iprintf>
		return -1;
 8002dd8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002ddc:	e7f7      	b.n	8002dce <BSP_ADC_getValue+0x16>
 8002dde:	bf00      	nop
 8002de0:	2000021c 	.word	0x2000021c
 8002de4:	20000218 	.word	0x20000218
 8002de8:	0800affc 	.word	0x0800affc

08002dec <HAL_ADC_ConvCpltCallback>:
}



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002dec:	b508      	push	{r3, lr}
	UNUSED(hadc);
	flag_new_sample_available = true;
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <HAL_ADC_ConvCpltCallback+0x14>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]
	if(callback_function)
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_ADC_ConvCpltCallback+0x18>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	b103      	cbz	r3, 8002dfc <HAL_ADC_ConvCpltCallback+0x10>
		callback_function();
 8002dfa:	4798      	blx	r3
}
 8002dfc:	bd08      	pop	{r3, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000228 	.word	0x20000228
 8002e04:	20000224 	.word	0x20000224

08002e08 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e08:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	2108      	movs	r1, #8
 8002e0e:	4802      	ldr	r0, [pc, #8]	; (8002e18 <HAL_ADC_ConvHalfCpltCallback+0x10>)
 8002e10:	f001 ff49 	bl	8004ca6 <HAL_GPIO_WritePin>
	UNUSED(hadc);
}
 8002e14:	bd08      	pop	{r3, pc}
 8002e16:	bf00      	nop
 8002e18:	48000400 	.word	0x48000400

08002e1c <DMA1_Channel1_IRQHandler>:
{
	callback_function = callback;
}


void DMA1_Channel1_IRQHandler(void) {
 8002e1c:	b508      	push	{r3, lr}

	HAL_DMA_IRQHandler(&hdma);
 8002e1e:	4802      	ldr	r0, [pc, #8]	; (8002e28 <DMA1_Channel1_IRQHandler+0xc>)
 8002e20:	f001 fe01 	bl	8004a26 <HAL_DMA_IRQHandler>

	//See errata sheet
 //   hdma.DmaBaseAddress->IFCR = ((uint32_t)DMA_IFCR_CHTIF1 << (hdma.ChannelIndex & 0x1FU));
//    hdma.DmaBaseAddress->IFCR = ((uint32_t)DMA_IFCR_CTCIF1 << (hdma.ChannelIndex & 0x1FU));
   // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
}
 8002e24:	bd08      	pop	{r3, pc}
 8002e26:	bf00      	nop
 8002e28:	20000298 	.word	0x20000298

08002e2c <call_extit_user_callback>:
 *
 * Cette fonction est appelÃ©e par les fonctions d'interruption EXTIx_IRQHandler
 * @param pin_number : numÃ©ro de la broche pour laquelle appeler la fonction de callback (entier compris entre 0 et 15)
 */
static void call_extit_user_callback(uint8_t pin_number)
{
 8002e2c:	b508      	push	{r3, lr}
	uint16_t gpio_pin;
	gpio_pin = (uint16_t)(1) << (uint16_t)(pin_number);
 8002e2e:	2301      	movs	r3, #1
 8002e30:	4083      	lsls	r3, r0
 8002e32:	b29b      	uxth	r3, r3
	if(__HAL_GPIO_EXTI_GET_IT(gpio_pin))
 8002e34:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <call_extit_user_callback+0x28>)
 8002e36:	6952      	ldr	r2, [r2, #20]
 8002e38:	421a      	tst	r2, r3
 8002e3a:	d00a      	beq.n	8002e52 <call_extit_user_callback+0x26>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(gpio_pin);
 8002e3c:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <call_extit_user_callback+0x28>)
 8002e3e:	6153      	str	r3, [r2, #20]
		if(enables & gpio_pin)
 8002e40:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <call_extit_user_callback+0x2c>)
 8002e42:	8812      	ldrh	r2, [r2, #0]
 8002e44:	4213      	tst	r3, r2
 8002e46:	d004      	beq.n	8002e52 <call_extit_user_callback+0x26>
		{
			if(callbacks[pin_number])
 8002e48:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <call_extit_user_callback+0x30>)
 8002e4a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002e4e:	b103      	cbz	r3, 8002e52 <call_extit_user_callback+0x26>
				(*callbacks[pin_number])(pin_number);
 8002e50:	4798      	blx	r3
		}
	}
}
 8002e52:	bd08      	pop	{r3, pc}
 8002e54:	40010400 	.word	0x40010400
 8002e58:	20000338 	.word	0x20000338
 8002e5c:	200002f8 	.word	0x200002f8

08002e60 <EXTI0_IRQHandler>:
 * @pre		Cette fonction NE DOIT PAS Ãªtre appelÃ©e directement par l'utilisateur...
 * @post	Acquittement du flag d'interruption, et appel de la fonction de callback rensignÃ©e par l'utilisateur (si elle existe)
 * @note	Nous n'avons PAS le choix du nom de cette fonction, c'est comme Ã§a qu'elle est nommÃ©e dans le fichier startup.s !
 */
void EXTI0_IRQHandler(void)
{
 8002e60:	b508      	push	{r3, lr}
	call_extit_user_callback(0);
 8002e62:	2000      	movs	r0, #0
 8002e64:	f7ff ffe2 	bl	8002e2c <call_extit_user_callback>
}
 8002e68:	bd08      	pop	{r3, pc}

08002e6a <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002e6a:	b508      	push	{r3, lr}
	call_extit_user_callback(1);
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f7ff ffdd 	bl	8002e2c <call_extit_user_callback>
}
 8002e72:	bd08      	pop	{r3, pc}

08002e74 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002e74:	b508      	push	{r3, lr}
	call_extit_user_callback(2);
 8002e76:	2002      	movs	r0, #2
 8002e78:	f7ff ffd8 	bl	8002e2c <call_extit_user_callback>
}
 8002e7c:	bd08      	pop	{r3, pc}

08002e7e <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8002e7e:	b508      	push	{r3, lr}
	call_extit_user_callback(3);
 8002e80:	2003      	movs	r0, #3
 8002e82:	f7ff ffd3 	bl	8002e2c <call_extit_user_callback>
}
 8002e86:	bd08      	pop	{r3, pc}

08002e88 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8002e88:	b508      	push	{r3, lr}
	call_extit_user_callback(4);
 8002e8a:	2004      	movs	r0, #4
 8002e8c:	f7ff ffce 	bl	8002e2c <call_extit_user_callback>
}
 8002e90:	bd08      	pop	{r3, pc}

08002e92 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8002e92:	b508      	push	{r3, lr}
	call_extit_user_callback(5);
 8002e94:	2005      	movs	r0, #5
 8002e96:	f7ff ffc9 	bl	8002e2c <call_extit_user_callback>
	call_extit_user_callback(6);
 8002e9a:	2006      	movs	r0, #6
 8002e9c:	f7ff ffc6 	bl	8002e2c <call_extit_user_callback>
	call_extit_user_callback(7);
 8002ea0:	2007      	movs	r0, #7
 8002ea2:	f7ff ffc3 	bl	8002e2c <call_extit_user_callback>
	call_extit_user_callback(8);
 8002ea6:	2008      	movs	r0, #8
 8002ea8:	f7ff ffc0 	bl	8002e2c <call_extit_user_callback>
	call_extit_user_callback(9);
 8002eac:	2009      	movs	r0, #9
 8002eae:	f7ff ffbd 	bl	8002e2c <call_extit_user_callback>
}
 8002eb2:	bd08      	pop	{r3, pc}

08002eb4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002eb4:	b508      	push	{r3, lr}
	call_extit_user_callback(10);
 8002eb6:	200a      	movs	r0, #10
 8002eb8:	f7ff ffb8 	bl	8002e2c <call_extit_user_callback>
	call_extit_user_callback(11);
 8002ebc:	200b      	movs	r0, #11
 8002ebe:	f7ff ffb5 	bl	8002e2c <call_extit_user_callback>
	call_extit_user_callback(12);
 8002ec2:	200c      	movs	r0, #12
 8002ec4:	f7ff ffb2 	bl	8002e2c <call_extit_user_callback>
	call_extit_user_callback(13);
 8002ec8:	200d      	movs	r0, #13
 8002eca:	f7ff ffaf 	bl	8002e2c <call_extit_user_callback>
	call_extit_user_callback(14);
 8002ece:	200e      	movs	r0, #14
 8002ed0:	f7ff ffac 	bl	8002e2c <call_extit_user_callback>
	call_extit_user_callback(15);
 8002ed4:	200f      	movs	r0, #15
 8002ed6:	f7ff ffa9 	bl	8002e2c <call_extit_user_callback>
}
 8002eda:	bd08      	pop	{r3, pc}

08002edc <BSP_GPIO_enable>:
/**
 * @brief Activation des horloges des peripheriques GPIOx
 *
 */
void BSP_GPIO_enable(void)
{
 8002edc:	b500      	push	{lr}
 8002ede:	b085      	sub	sp, #20

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ee0:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <BSP_GPIO_enable+0x60>)
 8002ee2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ee4:	f042 0220 	orr.w	r2, r2, #32
 8002ee8:	64da      	str	r2, [r3, #76]	; 0x4c
 8002eea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002eec:	f002 0220 	and.w	r2, r2, #32
 8002ef0:	9200      	str	r2, [sp, #0]
 8002ef2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ef4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002efa:	64da      	str	r2, [r3, #76]	; 0x4c
 8002efc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002efe:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002f02:	9201      	str	r2, [sp, #4]
 8002f04:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f08:	f042 0201 	orr.w	r2, r2, #1
 8002f0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f10:	f002 0201 	and.w	r2, r2, #1
 8002f14:	9202      	str	r2, [sp, #8]
 8002f16:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f1a:	f042 0202 	orr.w	r2, r2, #2
 8002f1e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	9303      	str	r3, [sp, #12]
 8002f28:	9b03      	ldr	r3, [sp, #12]
  HAL_PWREx_DisableUCPDDeadBattery();	//dÃ©sactive les pull-down sur PB4 et PB6 lorsque PA9 et PA10 sont Ã  1.
 8002f2a:	f001 ff47 	bl	8004dbc <HAL_PWREx_DisableUCPDDeadBattery>
  initialized = true;
 8002f2e:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <BSP_GPIO_enable+0x64>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
}
 8002f34:	b005      	add	sp, #20
 8002f36:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	2000033a 	.word	0x2000033a

08002f44 <BSP_GPIO_pin_config>:
 * @param GPIO_Pull : GPIO_NOPULL, GPIO_PULLUP, GPIO_PULLDOWN
 * @param GPIO_Speed : GPIO_SPEED_LOW (2MHz), GPIO_SPEED_MEDIUM (25MHz), GPIO_SPEED_HIGH (100MHz)
 * @param GPIO_Alternate : GPIO_AF0 Ã  GPIO_AF15 ou GPIO_NO_AF pour une broche GPIO pure sans fonction alternative
 */
void BSP_GPIO_pin_config(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin, uint32_t GPIO_Mode, uint32_t GPIO_Pull, uint32_t GPIO_Speed, uint32_t GPIO_Alternate)
{
 8002f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	4605      	mov	r5, r0
 8002f4c:	4688      	mov	r8, r1
 8002f4e:	4617      	mov	r7, r2
 8002f50:	461e      	mov	r6, r3
	GPIO_InitTypeDef GPIO_InitStructure = { 0 };//Structure contenant les arguments de la fonction GPIO_Init
 8002f52:	2400      	movs	r4, #0
 8002f54:	9401      	str	r4, [sp, #4]
 8002f56:	9402      	str	r4, [sp, #8]
 8002f58:	9403      	str	r4, [sp, #12]
 8002f5a:	9404      	str	r4, [sp, #16]
 8002f5c:	9405      	str	r4, [sp, #20]

	if(!initialized)
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <BSP_GPIO_pin_config+0x44>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	b173      	cbz	r3, 8002f82 <BSP_GPIO_pin_config+0x3e>
		BSP_GPIO_enable();

	GPIO_InitStructure.Pin = GPIO_Pin;
 8002f64:	f8cd 8004 	str.w	r8, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_Mode;
 8002f68:	9702      	str	r7, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_Pull;
 8002f6a:	9603      	str	r6, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_Speed;
 8002f6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f6e:	9304      	str	r3, [sp, #16]
	GPIO_InitStructure.Alternate = GPIO_Alternate;
 8002f70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f72:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStructure);
 8002f74:	a901      	add	r1, sp, #4
 8002f76:	4628      	mov	r0, r5
 8002f78:	f001 fdb8 	bl	8004aec <HAL_GPIO_Init>
}
 8002f7c:	b006      	add	sp, #24
 8002f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BSP_GPIO_enable();
 8002f82:	f7ff ffab 	bl	8002edc <BSP_GPIO_enable>
 8002f86:	e7ed      	b.n	8002f64 <BSP_GPIO_pin_config+0x20>
 8002f88:	2000033a 	.word	0x2000033a

08002f8c <BSP_SYS_set_std_usart>:
/* Private function definitions ----------------------------------------------*/

/* Public function definitions -----------------------------------------------*/

void BSP_SYS_set_std_usart(uart_id_t in, uart_id_t out, uart_id_t err)
{
 8002f8c:	b410      	push	{r4}
	uart_initialized = 0xE5E0E5E0;
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <BSP_SYS_set_std_usart+0x1c>)
 8002f90:	4c06      	ldr	r4, [pc, #24]	; (8002fac <BSP_SYS_set_std_usart+0x20>)
 8002f92:	601c      	str	r4, [r3, #0]
	stdin_usart = in;
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <BSP_SYS_set_std_usart+0x24>)
 8002f96:	7018      	strb	r0, [r3, #0]
	stdout_usart = out;
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <BSP_SYS_set_std_usart+0x28>)
 8002f9a:	7019      	strb	r1, [r3, #0]
	stderr_usart = err;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <BSP_SYS_set_std_usart+0x2c>)
 8002f9e:	701a      	strb	r2, [r3, #0]
}
 8002fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000340 	.word	0x20000340
 8002fac:	e5e0e5e0 	.word	0xe5e0e5e0
 8002fb0:	2000033c 	.word	0x2000033c
 8002fb4:	2000033d 	.word	0x2000033d
 8002fb8:	2000033b 	.word	0x2000033b

08002fbc <_read>:
 * @param ptr
 * @param len
 * @return
 */
int _read(int file, char *ptr, int len)
{
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int n;
	int num = 0;
	switch (file) {
 8002fbe:	b9c0      	cbnz	r0, 8002ff2 <_read+0x36>
 8002fc0:	460c      	mov	r4, r1
 8002fc2:	4617      	mov	r7, r2
 8002fc4:	4605      	mov	r5, r0
	int num = 0;
 8002fc6:	4606      	mov	r6, r0
 8002fc8:	e00f      	b.n	8002fea <_read+0x2e>
			for (n = 0; n < len; n++)
			{
				/*while ((stdin_usart->SR & USART_FLAG_RXNE) == (uint16_t)RESET);
				char c = (char)(stdin_usart->DR & (uint16_t)0x01FF);*/
				char c;
				while(!BSP_UART_data_ready(stdin_usart));	//Blocking
 8002fca:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <_read+0x44>)
 8002fcc:	7818      	ldrb	r0, [r3, #0]
 8002fce:	f000 faa3 	bl	8003518 <BSP_UART_data_ready>
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	d0f9      	beq.n	8002fca <_read+0xe>
				c = BSP_UART_get_next_byte(stdin_usart);
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <_read+0x44>)
 8002fd8:	7818      	ldrb	r0, [r3, #0]
 8002fda:	f000 fab1 	bl	8003540 <BSP_UART_get_next_byte>
				*ptr++ = c;
 8002fde:	4621      	mov	r1, r4
 8002fe0:	f801 0b01 	strb.w	r0, [r1], #1
				num++;
 8002fe4:	3601      	adds	r6, #1
			for (n = 0; n < len; n++)
 8002fe6:	3501      	adds	r5, #1
				*ptr++ = c;
 8002fe8:	460c      	mov	r4, r1
			for (n = 0; n < len; n++)
 8002fea:	42bd      	cmp	r5, r7
 8002fec:	dbed      	blt.n	8002fca <_read+0xe>
		default:
			errno = EBADF;
			return -1;
	}
	return num;
}
 8002fee:	4630      	mov	r0, r6
 8002ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			errno = EBADF;
 8002ff2:	f003 fefd 	bl	8006df0 <__errno>
 8002ff6:	2309      	movs	r3, #9
 8002ff8:	6003      	str	r3, [r0, #0]
			return -1;
 8002ffa:	f04f 36ff 	mov.w	r6, #4294967295
 8002ffe:	e7f6      	b.n	8002fee <_read+0x32>
 8003000:	2000033c 	.word	0x2000033c

08003004 <_write>:
 * @param ptr
 * @param len
 * @return
 */
int _write(int file, char *ptr, int len)
{
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	4615      	mov	r5, r2
	int n;
	switch (file) {
 8003008:	2801      	cmp	r0, #1
 800300a:	d015      	beq.n	8003038 <_write+0x34>
 800300c:	2802      	cmp	r0, #2
 800300e:	d021      	beq.n	8003054 <_write+0x50>
				BSP_UART_putc(stderr_usart,*ptr++);
#endif
			}
			break;
		default:
			errno = EBADF;
 8003010:	f003 feee 	bl	8006df0 <__errno>
 8003014:	2309      	movs	r3, #9
 8003016:	6003      	str	r3, [r0, #0]
			return -1;
 8003018:	f04f 35ff 	mov.w	r5, #4294967295
 800301c:	e00a      	b.n	8003034 <_write+0x30>
				BSP_UART_putc(stdout_usart,*ptr++);
 800301e:	460c      	mov	r4, r1
 8003020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <_write+0x54>)
 8003026:	7818      	ldrb	r0, [r3, #0]
 8003028:	f000 fae2 	bl	80035f0 <BSP_UART_putc>
			for (n = 0; n < len; n++)
 800302c:	3601      	adds	r6, #1
				BSP_UART_putc(stdout_usart,*ptr++);
 800302e:	4621      	mov	r1, r4
			for (n = 0; n < len; n++)
 8003030:	42ae      	cmp	r6, r5
 8003032:	dbf4      	blt.n	800301e <_write+0x1a>
	}
	return len;
}
 8003034:	4628      	mov	r0, r5
 8003036:	bd70      	pop	{r4, r5, r6, pc}
	switch (file) {
 8003038:	2600      	movs	r6, #0
 800303a:	e7f9      	b.n	8003030 <_write+0x2c>
				BSP_UART_putc(stderr_usart,*ptr++);
 800303c:	460c      	mov	r4, r1
 800303e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <_write+0x58>)
 8003044:	7818      	ldrb	r0, [r3, #0]
 8003046:	f000 fad3 	bl	80035f0 <BSP_UART_putc>
			for (n = 0; n < len; n++)
 800304a:	3601      	adds	r6, #1
				BSP_UART_putc(stderr_usart,*ptr++);
 800304c:	4621      	mov	r1, r4
			for (n = 0; n < len; n++)
 800304e:	42ae      	cmp	r6, r5
 8003050:	dbf4      	blt.n	800303c <_write+0x38>
 8003052:	e7ef      	b.n	8003034 <_write+0x30>
	switch (file) {
 8003054:	2600      	movs	r6, #0
 8003056:	e7fa      	b.n	800304e <_write+0x4a>
 8003058:	2000033d 	.word	0x2000033d
 800305c:	2000033b 	.word	0x2000033b

08003060 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8003060:	b672      	cpsid	i
  */
void Error_Handler(void)
{
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003062:	e7fe      	b.n	8003062 <Error_Handler+0x2>

08003064 <SystemClock_Config>:
{
 8003064:	b500      	push	{lr}
 8003066:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003068:	2238      	movs	r2, #56	; 0x38
 800306a:	2100      	movs	r1, #0
 800306c:	a806      	add	r0, sp, #24
 800306e:	f003 ff03 	bl	8006e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003072:	2000      	movs	r0, #0
 8003074:	9001      	str	r0, [sp, #4]
 8003076:	9002      	str	r0, [sp, #8]
 8003078:	9003      	str	r0, [sp, #12]
 800307a:	9004      	str	r0, [sp, #16]
 800307c:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800307e:	f001 fe17 	bl	8004cb0 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003082:	2302      	movs	r3, #2
 8003084:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800308a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800308c:	2240      	movs	r2, #64	; 0x40
 800308e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003090:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003092:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003094:	2204      	movs	r2, #4
 8003096:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003098:	2255      	movs	r2, #85	; 0x55
 800309a:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800309c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800309e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80030a0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030a2:	a806      	add	r0, sp, #24
 80030a4:	f001 febe 	bl	8004e24 <HAL_RCC_OscConfig>
 80030a8:	b980      	cbnz	r0, 80030cc <SystemClock_Config+0x68>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030aa:	230f      	movs	r3, #15
 80030ac:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ae:	2303      	movs	r3, #3
 80030b0:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030b2:	2300      	movs	r3, #0
 80030b4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030b6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030b8:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030ba:	2104      	movs	r1, #4
 80030bc:	eb0d 0001 	add.w	r0, sp, r1
 80030c0:	f002 f966 	bl	8005390 <HAL_RCC_ClockConfig>
 80030c4:	b920      	cbnz	r0, 80030d0 <SystemClock_Config+0x6c>
}
 80030c6:	b015      	add	sp, #84	; 0x54
 80030c8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80030cc:	f7ff ffc8 	bl	8003060 <Error_Handler>
    Error_Handler();
 80030d0:	f7ff ffc6 	bl	8003060 <Error_Handler>

080030d4 <HAL_MspInit>:
{
 80030d4:	b500      	push	{lr}
 80030d6:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_MspInit+0x34>)
 80030da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	661a      	str	r2, [r3, #96]	; 0x60
 80030e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030e4:	f002 0201 	and.w	r2, r2, #1
 80030e8:	9200      	str	r2, [sp, #0]
 80030ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030f2:	659a      	str	r2, [r3, #88]	; 0x58
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fa:	9301      	str	r3, [sp, #4]
 80030fc:	9b01      	ldr	r3, [sp, #4]
  SystemClock_Config();
 80030fe:	f7ff ffb1 	bl	8003064 <SystemClock_Config>
}
 8003102:	b003      	add	sp, #12
 8003104:	f85d fb04 	ldr.w	pc, [sp], #4
 8003108:	40021000 	.word	0x40021000

0800310c <BSP_systick_init>:
 * @brief Initialization function for high level Systick service
 *
 * @post The systick interruption priority is set and the callback function table is initialized
 */
void BSP_systick_init(void)
{
 800310c:	b508      	push	{r3, lr}
	uint8_t i;
	for(i = 0; i<MAX_CALLBACK_FUNCTION_NB; i++)
 800310e:	2300      	movs	r3, #0
 8003110:	2b0f      	cmp	r3, #15
 8003112:	d806      	bhi.n	8003122 <BSP_systick_init+0x16>
		callback_functions[i] = NULL;
 8003114:	4a08      	ldr	r2, [pc, #32]	; (8003138 <BSP_systick_init+0x2c>)
 8003116:	2100      	movs	r1, #0
 8003118:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i = 0; i<MAX_CALLBACK_FUNCTION_NB; i++)
 800311c:	3301      	adds	r3, #1
 800311e:	b2db      	uxtb	r3, r3
 8003120:	e7f6      	b.n	8003110 <BSP_systick_init+0x4>
	HAL_NVIC_SetPriority(SysTick_IRQn , 0,  0);
 8003122:	2200      	movs	r2, #0
 8003124:	4611      	mov	r1, r2
 8003126:	f04f 30ff 	mov.w	r0, #4294967295
 800312a:	f001 faa1 	bl	8004670 <HAL_NVIC_SetPriority>
	initialized = true;
 800312e:	4b03      	ldr	r3, [pc, #12]	; (800313c <BSP_systick_init+0x30>)
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
}
 8003134:	bd08      	pop	{r3, pc}
 8003136:	bf00      	nop
 8003138:	20000344 	.word	0x20000344
 800313c:	20000384 	.word	0x20000384

08003140 <BSP_systick_add_callback_function>:
 *
 * @param func the function to be called as callback
 * @return true if the function was added, false otherwise
 */
bool BSP_systick_add_callback_function(callback_fun_t func)
{
 8003140:	b510      	push	{r4, lr}
 8003142:	4604      	mov	r4, r0
	uint8_t i;
	if(!initialized)
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <BSP_systick_add_callback_function+0x34>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	b153      	cbz	r3, 8003160 <BSP_systick_add_callback_function+0x20>
		BSP_systick_init();

	for(i = 0; i<MAX_CALLBACK_FUNCTION_NB; i++)
 800314a:	2300      	movs	r3, #0
 800314c:	2b0f      	cmp	r3, #15
 800314e:	d80f      	bhi.n	8003170 <BSP_systick_add_callback_function+0x30>
	{
		if(!callback_functions[i])	//On a trouvÃ© une place libre ?
 8003150:	4619      	mov	r1, r3
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <BSP_systick_add_callback_function+0x38>)
 8003154:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003158:	b12a      	cbz	r2, 8003166 <BSP_systick_add_callback_function+0x26>
	for(i = 0; i<MAX_CALLBACK_FUNCTION_NB; i++)
 800315a:	3301      	adds	r3, #1
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e7f5      	b.n	800314c <BSP_systick_add_callback_function+0xc>
		BSP_systick_init();
 8003160:	f7ff ffd4 	bl	800310c <BSP_systick_init>
 8003164:	e7f1      	b.n	800314a <BSP_systick_add_callback_function+0xa>
		{
			callback_functions[i] = func;
 8003166:	4b04      	ldr	r3, [pc, #16]	; (8003178 <BSP_systick_add_callback_function+0x38>)
 8003168:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			return true;
 800316c:	2001      	movs	r0, #1
 800316e:	e000      	b.n	8003172 <BSP_systick_add_callback_function+0x32>
		}
	}
	return false;	//Pas de place libre !
 8003170:	2000      	movs	r0, #0

}
 8003172:	bd10      	pop	{r4, pc}
 8003174:	20000384 	.word	0x20000384
 8003178:	20000344 	.word	0x20000344

0800317c <BSP_systick_remove_callback_function>:
 * @pre	The callback function exists
 * @param func the callback function to remove
 * @return true if the callback function was removed, false otherwise
 */
bool BSP_systick_remove_callback_function(callback_fun_t func)
{
 800317c:	b510      	push	{r4, lr}
 800317e:	4604      	mov	r4, r0
	uint8_t i;
	if(!initialized)
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <BSP_systick_remove_callback_function+0x38>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	b15b      	cbz	r3, 800319e <BSP_systick_remove_callback_function+0x22>
		BSP_systick_init();
	for(i = 0; i<MAX_CALLBACK_FUNCTION_NB; i++)
 8003186:	2300      	movs	r3, #0
 8003188:	2b0f      	cmp	r3, #15
 800318a:	d811      	bhi.n	80031b0 <BSP_systick_remove_callback_function+0x34>
	{
		if(callback_functions[i] == func)
 800318c:	4619      	mov	r1, r3
 800318e:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <BSP_systick_remove_callback_function+0x3c>)
 8003190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003194:	42a2      	cmp	r2, r4
 8003196:	d005      	beq.n	80031a4 <BSP_systick_remove_callback_function+0x28>
	for(i = 0; i<MAX_CALLBACK_FUNCTION_NB; i++)
 8003198:	3301      	adds	r3, #1
 800319a:	b2db      	uxtb	r3, r3
 800319c:	e7f4      	b.n	8003188 <BSP_systick_remove_callback_function+0xc>
		BSP_systick_init();
 800319e:	f7ff ffb5 	bl	800310c <BSP_systick_init>
 80031a2:	e7f0      	b.n	8003186 <BSP_systick_remove_callback_function+0xa>
		{
			callback_functions[i] = NULL;
 80031a4:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <BSP_systick_remove_callback_function+0x3c>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			return true;
 80031ac:	2001      	movs	r0, #1
 80031ae:	e000      	b.n	80031b2 <BSP_systick_remove_callback_function+0x36>
		}
	}
	return false;
 80031b0:	2000      	movs	r0, #0
}
 80031b2:	bd10      	pop	{r4, pc}
 80031b4:	20000384 	.word	0x20000384
 80031b8:	20000344 	.word	0x20000344

080031bc <SysTick_Handler>:
/**
 * @brief Interrupt function called every 1ms
 *
 */
void SysTick_Handler(void)
{
 80031bc:	b510      	push	{r4, lr}
	/* Minimum interruption job for SysTick */
	HAL_IncTick();
 80031be:	f000 fc01 	bl	80039c4 <HAL_IncTick>
	/* Use of HAL_SYSTICK_IRQHandler() as been discouraged by ST and is not generated anymore by CubeMX */

	if(!initialized)
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <SysTick_Handler+0x30>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	b10b      	cbz	r3, 80031cc <SysTick_Handler+0x10>
{
 80031c8:	2400      	movs	r4, #0
 80031ca:	e004      	b.n	80031d6 <SysTick_Handler+0x1a>
		BSP_systick_init();
 80031cc:	f7ff ff9e 	bl	800310c <BSP_systick_init>
 80031d0:	e7fa      	b.n	80031c8 <SysTick_Handler+0xc>

	/* Management of the callback functions */
	uint8_t i;
	for(i = 0; i<MAX_CALLBACK_FUNCTION_NB; i++)
 80031d2:	3401      	adds	r4, #1
 80031d4:	b2e4      	uxtb	r4, r4
 80031d6:	2c0f      	cmp	r4, #15
 80031d8:	d806      	bhi.n	80031e8 <SysTick_Handler+0x2c>
	{
		if(callback_functions[i])
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <SysTick_Handler+0x34>)
 80031dc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f6      	beq.n	80031d2 <SysTick_Handler+0x16>
			(*callback_functions[i])();		/* Function calls. */
 80031e4:	4798      	blx	r3
 80031e6:	e7f4      	b.n	80031d2 <SysTick_Handler+0x16>
	}
}
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	bf00      	nop
 80031ec:	20000384 	.word	0x20000384
 80031f0:	20000344 	.word	0x20000344

080031f4 <clear_it_status>:
 * @brief	Acquitte les IT sur le timer sÃ©lectionnÃ©.
 * @pre 	Le timer a ete initialisÃ©
 * @post	L'interruption est acquitÃ©e
 */
void clear_it_status(timer_id_t timer_id){
	switch(timer_id)
 80031f4:	2804      	cmp	r0, #4
 80031f6:	d824      	bhi.n	8003242 <clear_it_status+0x4e>
 80031f8:	e8df f000 	tbb	[pc, r0]
 80031fc:	160f0903 	.word	0x160f0903
 8003200:	1d          	.byte	0x1d
 8003201:	00          	.byte	0x00
	{
		case TIMER1_ID:
			__HAL_TIM_CLEAR_IT(&structure_handles[TIMER1_ID], TIM_IT_UPDATE);
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <clear_it_status+0x50>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f06f 0201 	mvn.w	r2, #1
 800320a:	611a      	str	r2, [r3, #16]
			break;
 800320c:	4770      	bx	lr
		case TIMER2_ID:
			__HAL_TIM_CLEAR_IT(&structure_handles[TIMER2_ID], TIM_IT_UPDATE);
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <clear_it_status+0x50>)
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	f06f 0201 	mvn.w	r2, #1
 8003216:	611a      	str	r2, [r3, #16]
			break;
 8003218:	4770      	bx	lr
		case TIMER3_ID:
			__HAL_TIM_CLEAR_IT(&structure_handles[TIMER3_ID], TIM_IT_UPDATE);
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <clear_it_status+0x50>)
 800321c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003220:	f06f 0201 	mvn.w	r2, #1
 8003224:	611a      	str	r2, [r3, #16]
			break;
 8003226:	4770      	bx	lr
		case TIMER4_ID:
			__HAL_TIM_CLEAR_IT(&structure_handles[TIMER4_ID], TIM_IT_UPDATE);
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <clear_it_status+0x50>)
 800322a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800322e:	f06f 0201 	mvn.w	r2, #1
 8003232:	611a      	str	r2, [r3, #16]
			break;
 8003234:	4770      	bx	lr
		case TIMER6_ID:
			__HAL_TIM_CLEAR_IT(&structure_handles[TIMER6_ID], TIM_IT_UPDATE);
 8003236:	4b03      	ldr	r3, [pc, #12]	; (8003244 <clear_it_status+0x50>)
 8003238:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800323c:	f06f 0201 	mvn.w	r2, #1
 8003240:	611a      	str	r2, [r3, #16]
		default:
			break;
	}
}
 8003242:	4770      	bx	lr
 8003244:	20000388 	.word	0x20000388

08003248 <BSP_TIMER_run_us>:
 * @param us 			temps en us codÃ© sur un 32bits non signÃ©
 * @param enable_irq	TRUE : active les IT, FALSE : ne les active pas. En cas d'activation des IT, l'utilisateur doit Ã©crire une fonction TIMERx_user_handler_it. Par dÃ©faut, ces fonctions Ã©crites dans ce fichier mais avec l'attribut weak (elles peuvent donc Ãªtre rÃ©Ã©crites)
 * @post Le timer et son horloge sont activÃ©s, ses interruptions autorisÃ©es (si activÃ©es), et son dÃ©compte lancÃ©.
 */
void BSP_TIMER_run_us(timer_id_t timer_id, uint32_t us, bool enable_irq)
{
 8003248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	4606      	mov	r6, r0
 8003250:	468a      	mov	sl, r1
 8003252:	4617      	mov	r7, r2
	// On active l'horloge du timer concernÃ©.
	switch(timer_id)
 8003254:	2804      	cmp	r0, #4
 8003256:	d80e      	bhi.n	8003276 <BSP_TIMER_run_us+0x2e>
 8003258:	e8df f000 	tbb	[pc, r0]
 800325c:	74695e03 	.word	0x74695e03
 8003260:	7f          	.byte	0x7f
 8003261:	00          	.byte	0x00
	{
		case TIMER1_ID:
			__HAL_RCC_TIM1_CLK_ENABLE();
 8003262:	4b6f      	ldr	r3, [pc, #444]	; (8003420 <BSP_TIMER_run_us+0x1d8>)
 8003264:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326a:	661a      	str	r2, [r3, #96]	; 0x60
 800326c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	9b01      	ldr	r3, [sp, #4]
		default:
			break;
	}

	// Time base configuration
	structure_handles[timer_id].Instance = (TIM_TypeDef*)instance_array[timer_id]; //On donne le timer en instance Ã  notre gestionnaire (Handle)
 8003276:	4b6b      	ldr	r3, [pc, #428]	; (8003424 <BSP_TIMER_run_us+0x1dc>)
 8003278:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800327c:	234c      	movs	r3, #76	; 0x4c
 800327e:	fb03 f306 	mul.w	r3, r3, r6
 8003282:	4a69      	ldr	r2, [pc, #420]	; (8003428 <BSP_TIMER_run_us+0x1e0>)
 8003284:	50d1      	str	r1, [r2, r3]

	//On dÃ©termine la frÃ©quence des Ã©vÃ¨nements comptÃ©s par le timer.
	uint32_t freq;
	if(timer_id == TIMER1_ID)
 8003286:	2e00      	cmp	r6, #0
 8003288:	d172      	bne.n	8003370 <BSP_TIMER_run_us+0x128>
	{
		//FrÃ©quence du TIMER1 est PCLK2 lorsque APB2 Prescaler vaut 1, sinon : PCLK2*2
		freq = HAL_RCC_GetPCLK2Freq();
 800328a:	f002 f995 	bl	80055b8 <HAL_RCC_GetPCLK2Freq>
 800328e:	4602      	mov	r2, r0
		if((RCC->CFGR & RCC_CFGR_PPRE2) >> 11 != RCC_HCLK_DIV1)
 8003290:	4b63      	ldr	r3, [pc, #396]	; (8003420 <BSP_TIMER_run_us+0x1d8>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f413 5f60 	tst.w	r3, #14336	; 0x3800
 8003298:	d000      	beq.n	800329c <BSP_TIMER_run_us+0x54>
			freq *= 2;
 800329a:	0042      	lsls	r2, r0, #1
		freq = HAL_RCC_GetPCLK1Freq();
		if((RCC->CFGR & RCC_CFGR_PPRE1) >> 8 != RCC_HCLK_DIV1)
			freq *= 2;
	}

	uint64_t nb_psec_per_event = (uint64_t)(1000000000000/freq);
 800329c:	2300      	movs	r3, #0
 800329e:	a15e      	add	r1, pc, #376	; (adr r1, 8003418 <BSP_TIMER_run_us+0x1d0>)
 80032a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032a4:	f7fe fc08 	bl	8001ab8 <__aeabi_ldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
	uint64_t period = (((uint64_t)(us))*1000000)/nb_psec_per_event;
 80032ac:	ea4f 184a 	mov.w	r8, sl, lsl #5
 80032b0:	ea4f 69da 	mov.w	r9, sl, lsr #27
 80032b4:	ebb8 080a 	subs.w	r8, r8, sl
 80032b8:	f169 0900 	sbc.w	r9, r9, #0
 80032bc:	ea4f 2149 	mov.w	r1, r9, lsl #9
 80032c0:	ea41 51d8 	orr.w	r1, r1, r8, lsr #23
 80032c4:	ea4f 2048 	mov.w	r0, r8, lsl #9
 80032c8:	eb10 080a 	adds.w	r8, r0, sl
 80032cc:	f141 0900 	adc.w	r9, r1, #0
 80032d0:	ea4f 1189 	mov.w	r1, r9, lsl #6
 80032d4:	ea41 6198 	orr.w	r1, r1, r8, lsr #26
 80032d8:	ea4f 1088 	mov.w	r0, r8, lsl #6
 80032dc:	ebb0 0408 	subs.w	r4, r0, r8
 80032e0:	eb61 0509 	sbc.w	r5, r1, r9
 80032e4:	eb14 000a 	adds.w	r0, r4, sl
 80032e8:	f145 0100 	adc.w	r1, r5, #0
 80032ec:	f7fe fc34 	bl	8001b58 <__aeabi_uldivmod>
 80032f0:	4604      	mov	r4, r0
 80032f2:	460d      	mov	r5, r1

	uint32_t max_period = GET_MAX_PERIOD(timer_id);
 80032f4:	2e01      	cmp	r6, #1
 80032f6:	d045      	beq.n	8003384 <BSP_TIMER_run_us+0x13c>
 80032f8:	f64f 70ff 	movw	r0, #65535	; 0xffff

	if(period > max_period)
 80032fc:	2100      	movs	r1, #0
 80032fe:	42a9      	cmp	r1, r5
 8003300:	bf08      	it	eq
 8003302:	42a0      	cmpeq	r0, r4
 8003304:	d371      	bcc.n	80033ea <BSP_TIMER_run_us+0x1a2>
		structure_handles[timer_id].Init.Prescaler 	= prescaler - 1;	//le prescaler du timer doit Ãªtre enregistrÃ© avec un offset de -1.
		structure_handles[timer_id].Init.Period 	= (uint32_t)(period - 1);	//On compte de 0 Ã  period-1
	}
	else
	{
		structure_handles[timer_id].Init.Prescaler 	= 0;
 8003306:	4a48      	ldr	r2, [pc, #288]	; (8003428 <BSP_TIMER_run_us+0x1e0>)
 8003308:	234c      	movs	r3, #76	; 0x4c
 800330a:	fb03 2306 	mla	r3, r3, r6, r2
 800330e:	2200      	movs	r2, #0
 8003310:	605a      	str	r2, [r3, #4]
		structure_handles[timer_id].Init.Period 	= (uint32_t)(period - 1);
 8003312:	3c01      	subs	r4, #1
 8003314:	60dc      	str	r4, [r3, #12]
 8003316:	e04c      	b.n	80033b2 <BSP_TIMER_run_us+0x16a>
			__HAL_RCC_TIM2_CLK_ENABLE();
 8003318:	4b41      	ldr	r3, [pc, #260]	; (8003420 <BSP_TIMER_run_us+0x1d8>)
 800331a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	659a      	str	r2, [r3, #88]	; 0x58
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	9302      	str	r3, [sp, #8]
 800332a:	9b02      	ldr	r3, [sp, #8]
			break;
 800332c:	e7a3      	b.n	8003276 <BSP_TIMER_run_us+0x2e>
			__HAL_RCC_TIM3_CLK_ENABLE();
 800332e:	4b3c      	ldr	r3, [pc, #240]	; (8003420 <BSP_TIMER_run_us+0x1d8>)
 8003330:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003332:	f042 0202 	orr.w	r2, r2, #2
 8003336:	659a      	str	r2, [r3, #88]	; 0x58
 8003338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	9303      	str	r3, [sp, #12]
 8003340:	9b03      	ldr	r3, [sp, #12]
			break;
 8003342:	e798      	b.n	8003276 <BSP_TIMER_run_us+0x2e>
			__HAL_RCC_TIM4_CLK_ENABLE();
 8003344:	4b36      	ldr	r3, [pc, #216]	; (8003420 <BSP_TIMER_run_us+0x1d8>)
 8003346:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003348:	f042 0204 	orr.w	r2, r2, #4
 800334c:	659a      	str	r2, [r3, #88]	; 0x58
 800334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	9304      	str	r3, [sp, #16]
 8003356:	9b04      	ldr	r3, [sp, #16]
			break;
 8003358:	e78d      	b.n	8003276 <BSP_TIMER_run_us+0x2e>
			__HAL_RCC_TIM6_CLK_ENABLE();
 800335a:	4b31      	ldr	r3, [pc, #196]	; (8003420 <BSP_TIMER_run_us+0x1d8>)
 800335c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800335e:	f042 0210 	orr.w	r2, r2, #16
 8003362:	659a      	str	r2, [r3, #88]	; 0x58
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	9305      	str	r3, [sp, #20]
 800336c:	9b05      	ldr	r3, [sp, #20]
 800336e:	e782      	b.n	8003276 <BSP_TIMER_run_us+0x2e>
		freq = HAL_RCC_GetPCLK1Freq();
 8003370:	f002 f910 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
 8003374:	4602      	mov	r2, r0
		if((RCC->CFGR & RCC_CFGR_PPRE1) >> 8 != RCC_HCLK_DIV1)
 8003376:	4b2a      	ldr	r3, [pc, #168]	; (8003420 <BSP_TIMER_run_us+0x1d8>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 800337e:	d08d      	beq.n	800329c <BSP_TIMER_run_us+0x54>
			freq *= 2;
 8003380:	0042      	lsls	r2, r0, #1
 8003382:	e78b      	b.n	800329c <BSP_TIMER_run_us+0x54>
	uint32_t max_period = GET_MAX_PERIOD(timer_id);
 8003384:	f04f 30ff 	mov.w	r0, #4294967295
 8003388:	e7b8      	b.n	80032fc <BSP_TIMER_run_us+0xb4>
			prescaler *= 2;
 800338a:	0052      	lsls	r2, r2, #1
			period /= 2;
 800338c:	0863      	lsrs	r3, r4, #1
 800338e:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
 8003392:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8003396:	461c      	mov	r4, r3
 8003398:	4665      	mov	r5, ip
		while(period > max_period)
 800339a:	42a9      	cmp	r1, r5
 800339c:	bf08      	it	eq
 800339e:	42a0      	cmpeq	r0, r4
 80033a0:	d3f3      	bcc.n	800338a <BSP_TIMER_run_us+0x142>
		structure_handles[timer_id].Init.Prescaler 	= prescaler - 1;	//le prescaler du timer doit Ãªtre enregistrÃ© avec un offset de -1.
 80033a2:	3a01      	subs	r2, #1
 80033a4:	4920      	ldr	r1, [pc, #128]	; (8003428 <BSP_TIMER_run_us+0x1e0>)
 80033a6:	234c      	movs	r3, #76	; 0x4c
 80033a8:	fb03 1306 	mla	r3, r3, r6, r1
 80033ac:	605a      	str	r2, [r3, #4]
		structure_handles[timer_id].Init.Period 	= (uint32_t)(period - 1);	//On compte de 0 Ã  period-1
 80033ae:	3c01      	subs	r4, #1
 80033b0:	60dc      	str	r4, [r3, #12]
	}

	structure_handles[timer_id].Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b2:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <BSP_TIMER_run_us+0x1e0>)
 80033b4:	244c      	movs	r4, #76	; 0x4c
 80033b6:	fb04 3406 	mla	r4, r4, r6, r3
 80033ba:	2300      	movs	r3, #0
 80033bc:	6123      	str	r3, [r4, #16]
	structure_handles[timer_id].Init.CounterMode = TIM_COUNTERMODE_UP;
 80033be:	60a3      	str	r3, [r4, #8]

	// On applique les paramÃ¨tres d'initialisation
	if (HAL_TIM_Base_Init(&structure_handles[timer_id]) != HAL_OK)
 80033c0:	4620      	mov	r0, r4
 80033c2:	f002 fb39 	bl	8005a38 <HAL_TIM_Base_Init>
 80033c6:	b990      	cbnz	r0, 80033ee <BSP_TIMER_run_us+0x1a6>
	{
		Error_Handler();
	}

	if(enable_irq)
 80033c8:	b9a7      	cbnz	r7, 80033f4 <BSP_TIMER_run_us+0x1ac>
		HAL_NVIC_SetPriority(nvic_irq_array[timer_id] , 4,  1);
		HAL_NVIC_EnableIRQ(nvic_irq_array[timer_id]);
	}

	// On autorise les interruptions
	if(HAL_TIM_Base_Start_IT(&structure_handles[timer_id]) != HAL_OK)
 80033ca:	4620      	mov	r0, r4
 80033cc:	f002 fa7a 	bl	80058c4 <HAL_TIM_Base_Start_IT>
 80033d0:	b9f0      	cbnz	r0, 8003410 <BSP_TIMER_run_us+0x1c8>
    {
        Error_Handler();
    }

	// On lance le timer
	__HAL_TIM_ENABLE(&structure_handles[timer_id]);
 80033d2:	204c      	movs	r0, #76	; 0x4c
 80033d4:	fb00 f606 	mul.w	r6, r0, r6
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <BSP_TIMER_run_us+0x1e0>)
 80033da:	599a      	ldr	r2, [r3, r6]
 80033dc:	6813      	ldr	r3, [r2, #0]
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6013      	str	r3, [r2, #0]
}
 80033e4:	b006      	add	sp, #24
 80033e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t prescaler = 1;
 80033ea:	2201      	movs	r2, #1
 80033ec:	e7d5      	b.n	800339a <BSP_TIMER_run_us+0x152>
		Error_Handler();
 80033ee:	f7ff fe37 	bl	8003060 <Error_Handler>
 80033f2:	e7e9      	b.n	80033c8 <BSP_TIMER_run_us+0x180>
		clear_it_status(timer_id);
 80033f4:	4630      	mov	r0, r6
 80033f6:	f7ff fefd 	bl	80031f4 <clear_it_status>
		HAL_NVIC_SetPriority(nvic_irq_array[timer_id] , 4,  1);
 80033fa:	4b0c      	ldr	r3, [pc, #48]	; (800342c <BSP_TIMER_run_us+0x1e4>)
 80033fc:	579d      	ldrsb	r5, [r3, r6]
 80033fe:	2201      	movs	r2, #1
 8003400:	2104      	movs	r1, #4
 8003402:	4628      	mov	r0, r5
 8003404:	f001 f934 	bl	8004670 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic_irq_array[timer_id]);
 8003408:	4628      	mov	r0, r5
 800340a:	f001 f965 	bl	80046d8 <HAL_NVIC_EnableIRQ>
 800340e:	e7dc      	b.n	80033ca <BSP_TIMER_run_us+0x182>
        Error_Handler();
 8003410:	f7ff fe26 	bl	8003060 <Error_Handler>
 8003414:	e7dd      	b.n	80033d2 <BSP_TIMER_run_us+0x18a>
 8003416:	bf00      	nop
 8003418:	d4a51000 	.word	0xd4a51000
 800341c:	000000e8 	.word	0x000000e8
 8003420:	40021000 	.word	0x40021000
 8003424:	0800b06c 	.word	0x0800b06c
 8003428:	20000388 	.word	0x20000388
 800342c:	0800b080 	.word	0x0800b080

08003430 <BSP_TIMER_enable_output_trigger>:
{
	__HAL_TIM_SET_PRESCALER(&structure_handles[timer_id], prescaler - 1);
}

void BSP_TIMER_enable_output_trigger(timer_id_t timer_id)
{
 8003430:	b510      	push	{r4, lr}
 8003432:	b084      	sub	sp, #16
	TIM_MasterConfigTypeDef sMasterConfig;
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE; // TIM_TRGO_OC1
 8003434:	2320      	movs	r3, #32
 8003436:	9301      	str	r3, [sp, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003438:	2300      	movs	r3, #0
 800343a:	9302      	str	r3, [sp, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800343c:	9303      	str	r3, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&structure_handles[timer_id], &sMasterConfig);
 800343e:	4c07      	ldr	r4, [pc, #28]	; (800345c <BSP_TIMER_enable_output_trigger+0x2c>)
 8003440:	234c      	movs	r3, #76	; 0x4c
 8003442:	fb03 4400 	mla	r4, r3, r0, r4
 8003446:	a901      	add	r1, sp, #4
 8003448:	4620      	mov	r0, r4
 800344a:	f002 fb25 	bl	8005a98 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_GenerateEvent(&structure_handles[timer_id],TIM_EVENTSOURCE_UPDATE);
 800344e:	2101      	movs	r1, #1
 8003450:	4620      	mov	r0, r4
 8003452:	f002 fa79 	bl	8005948 <HAL_TIM_GenerateEvent>
}
 8003456:	b004      	add	sp, #16
 8003458:	bd10      	pop	{r4, pc}
 800345a:	bf00      	nop
 800345c:	20000388 	.word	0x20000388

08003460 <TIMER1_user_handler_it>:
 * Sinon, aucun message d'erreur n'indiquera que cette fonction n'existe pas !
 */
__weak void TIMER1_user_handler_it(void)
{

}
 8003460:	4770      	bx	lr

08003462 <TIMER2_user_handler_it>:

__weak void TIMER2_user_handler_it(void)
{

}
 8003462:	4770      	bx	lr

08003464 <TIMER3_user_handler_it>:

__weak void TIMER3_user_handler_it(void)
{

}
 8003464:	4770      	bx	lr

08003466 <TIMER4_user_handler_it>:

__weak void TIMER4_user_handler_it(void)
{

}
 8003466:	4770      	bx	lr

08003468 <TIMER6_user_handler_it>:


__weak void TIMER6_user_handler_it(void)
{
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
}
 8003468:	4770      	bx	lr
	...

0800346c <TIM1_UP_TIM16_IRQHandler>:
 * @brief 	Routine d'interruption appelÃ©e AUTOMATIQUEMENT lorsque le timer 1 arrive a Ã©cheance.
 * @pre		Cette fonction NE DOIT PAS Ãªtre appelÃ©e directement par l'utilisateur...
 * @post	Acquittement du flag d'interruption, et appel de la fonction de l'utilisateur : TIMER1_user_handler_it()
 * @note	Nous n'avons PAS le choix du nom de cette fonction, c'est comme Ã§a qu'elle est nommÃ©e dans le fichier startup.s !
 */
void TIM1_UP_TIM16_IRQHandler(void){
 800346c:	b508      	push	{r3, lr}
	if(__HAL_TIM_GET_IT_SOURCE(&structure_handles[TIMER1_ID], TIM_IT_UPDATE) != RESET) 	//Si le flag est levÃ©...
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	f012 0f01 	tst.w	r2, #1
 8003478:	d100      	bne.n	800347c <TIM1_UP_TIM16_IRQHandler+0x10>
	{
		__HAL_TIM_CLEAR_IT(&structure_handles[TIMER1_ID], TIM_IT_UPDATE);				//...On l'acquitte...
		TIMER1_user_handler_it();									//...Et on appelle la fonction qui nous intÃ©resse
	}
}
 800347a:	bd08      	pop	{r3, pc}
		__HAL_TIM_CLEAR_IT(&structure_handles[TIMER1_ID], TIM_IT_UPDATE);				//...On l'acquitte...
 800347c:	f06f 0201 	mvn.w	r2, #1
 8003480:	611a      	str	r2, [r3, #16]
		TIMER1_user_handler_it();									//...Et on appelle la fonction qui nous intÃ©resse
 8003482:	f7ff ffed 	bl	8003460 <TIMER1_user_handler_it>
}
 8003486:	e7f8      	b.n	800347a <TIM1_UP_TIM16_IRQHandler+0xe>
 8003488:	20000388 	.word	0x20000388

0800348c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 800348c:	b508      	push	{r3, lr}
	if(__HAL_TIM_GET_IT_SOURCE(&structure_handles[TIMER2_ID], TIM_IT_UPDATE) != RESET) 	//Si le flag est levÃ©...
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <TIM2_IRQHandler+0x1c>)
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	f012 0f01 	tst.w	r2, #1
 8003498:	d100      	bne.n	800349c <TIM2_IRQHandler+0x10>
	{
		__HAL_TIM_CLEAR_IT(&structure_handles[TIMER2_ID], TIM_IT_UPDATE);				//...On l'acquitte...
		TIMER2_user_handler_it();									//...Et on appelle la fonction qui nous intÃ©resse
	}
}
 800349a:	bd08      	pop	{r3, pc}
		__HAL_TIM_CLEAR_IT(&structure_handles[TIMER2_ID], TIM_IT_UPDATE);				//...On l'acquitte...
 800349c:	f06f 0201 	mvn.w	r2, #1
 80034a0:	611a      	str	r2, [r3, #16]
		TIMER2_user_handler_it();									//...Et on appelle la fonction qui nous intÃ©resse
 80034a2:	f7ff ffde 	bl	8003462 <TIMER2_user_handler_it>
}
 80034a6:	e7f8      	b.n	800349a <TIM2_IRQHandler+0xe>
 80034a8:	20000388 	.word	0x20000388

080034ac <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80034ac:	b508      	push	{r3, lr}
	if(__HAL_TIM_GET_IT_SOURCE(&structure_handles[TIMER3_ID], TIM_IT_UPDATE) != RESET) 	//Si le flag est levÃ©...
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <TIM3_IRQHandler+0x20>)
 80034b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	f012 0f01 	tst.w	r2, #1
 80034ba:	d100      	bne.n	80034be <TIM3_IRQHandler+0x12>
	{
		__HAL_TIM_CLEAR_IT(&structure_handles[TIMER3_ID], TIM_IT_UPDATE);				//...On l'acquitte...
		TIMER3_user_handler_it();									//...Et on appelle la fonction qui nous intÃ©resse
	}
}
 80034bc:	bd08      	pop	{r3, pc}
		__HAL_TIM_CLEAR_IT(&structure_handles[TIMER3_ID], TIM_IT_UPDATE);				//...On l'acquitte...
 80034be:	f06f 0201 	mvn.w	r2, #1
 80034c2:	611a      	str	r2, [r3, #16]
		TIMER3_user_handler_it();									//...Et on appelle la fonction qui nous intÃ©resse
 80034c4:	f7ff ffce 	bl	8003464 <TIMER3_user_handler_it>
}
 80034c8:	e7f8      	b.n	80034bc <TIM3_IRQHandler+0x10>
 80034ca:	bf00      	nop
 80034cc:	20000388 	.word	0x20000388

080034d0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 80034d0:	b508      	push	{r3, lr}
	if(__HAL_TIM_GET_IT_SOURCE(&structure_handles[TIMER4_ID], TIM_IT_UPDATE) != RESET) 	//Si le flag est levÃ©...
 80034d2:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <TIM4_IRQHandler+0x20>)
 80034d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	f012 0f01 	tst.w	r2, #1
 80034de:	d100      	bne.n	80034e2 <TIM4_IRQHandler+0x12>
	{
		__HAL_TIM_CLEAR_IT(&structure_handles[TIMER4_ID], TIM_IT_UPDATE);				//...On l'acquitte...
		TIMER4_user_handler_it();									//...Et on appelle la fonction qui nous intÃ©resse
	}
}
 80034e0:	bd08      	pop	{r3, pc}
		__HAL_TIM_CLEAR_IT(&structure_handles[TIMER4_ID], TIM_IT_UPDATE);				//...On l'acquitte...
 80034e2:	f06f 0201 	mvn.w	r2, #1
 80034e6:	611a      	str	r2, [r3, #16]
		TIMER4_user_handler_it();									//...Et on appelle la fonction qui nous intÃ©resse
 80034e8:	f7ff ffbd 	bl	8003466 <TIMER4_user_handler_it>
}
 80034ec:	e7f8      	b.n	80034e0 <TIM4_IRQHandler+0x10>
 80034ee:	bf00      	nop
 80034f0:	20000388 	.word	0x20000388

080034f4 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 80034f4:	b508      	push	{r3, lr}
	if(__HAL_TIM_GET_IT_SOURCE(&structure_handles[TIMER6_ID], TIM_IT_UPDATE) != RESET) 	//Si le flag est levÃ©...
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <TIM6_DAC_IRQHandler+0x20>)
 80034f8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	f012 0f01 	tst.w	r2, #1
 8003502:	d100      	bne.n	8003506 <TIM6_DAC_IRQHandler+0x12>
	{
		__HAL_TIM_CLEAR_IT(&structure_handles[TIMER6_ID], TIM_IT_UPDATE);				//...On l'acquitte...
		TIMER6_user_handler_it();									//...Et on appelle la fonction qui nous intÃ©resse
	}

}
 8003504:	bd08      	pop	{r3, pc}
		__HAL_TIM_CLEAR_IT(&structure_handles[TIMER6_ID], TIM_IT_UPDATE);				//...On l'acquitte...
 8003506:	f06f 0201 	mvn.w	r2, #1
 800350a:	611a      	str	r2, [r3, #16]
		TIMER6_user_handler_it();									//...Et on appelle la fonction qui nous intÃ©resse
 800350c:	f7ff ffac 	bl	8003468 <TIMER6_user_handler_it>
}
 8003510:	e7f8      	b.n	8003504 <TIM6_DAC_IRQHandler+0x10>
 8003512:	bf00      	nop
 8003514:	20000388 	.word	0x20000388

08003518 <BSP_UART_data_ready>:
 *
 * @param uart_id ID de l'uart concernÃ©
 * @ret bool true si des caractÃ¨res sont disponibles, false sinon
 */
bool BSP_UART_data_ready(uart_id_t uart_id)
{
 8003518:	b508      	push	{r3, lr}
	assert(uart_id < UART_ID_NB);
 800351a:	2801      	cmp	r0, #1
 800351c:	d802      	bhi.n	8003524 <BSP_UART_data_ready+0xc>
	return buffer_rx_data_ready[uart_id];
 800351e:	4b04      	ldr	r3, [pc, #16]	; (8003530 <BSP_UART_data_ready+0x18>)
 8003520:	5c18      	ldrb	r0, [r3, r0]
}
 8003522:	bd08      	pop	{r3, pc}
	assert(uart_id < UART_ID_NB);
 8003524:	4b03      	ldr	r3, [pc, #12]	; (8003534 <BSP_UART_data_ready+0x1c>)
 8003526:	4a04      	ldr	r2, [pc, #16]	; (8003538 <BSP_UART_data_ready+0x20>)
 8003528:	2182      	movs	r1, #130	; 0x82
 800352a:	4804      	ldr	r0, [pc, #16]	; (800353c <BSP_UART_data_ready+0x24>)
 800352c:	f003 fc42 	bl	8006db4 <__assert_func>
 8003530:	20000604 	.word	0x20000604
 8003534:	0800b088 	.word	0x0800b088
 8003538:	0800b0d0 	.word	0x0800b0d0
 800353c:	0800b0a0 	.word	0x0800b0a0

08003540 <BSP_UART_get_next_byte>:
 * @param uart_id ID de l'uart concernÃ©
 * @return uint8_t le dernier caractÃ¨re reÃ§u? Ou 0 si rien n'a Ã©tÃ© reÃ§u
 * @post Le caractÃ¨re lu est retirÃ© du buffer de rÃ©ception
 */
uint8_t BSP_UART_get_next_byte(uart_id_t uart_id)
{
 8003540:	b510      	push	{r4, lr}
	uint8_t ret;
	assert(uart_id < UART_ID_NB);
 8003542:	2801      	cmp	r0, #1
 8003544:	d835      	bhi.n	80035b2 <BSP_UART_get_next_byte+0x72>
 8003546:	4603      	mov	r3, r0

	if(!buffer_rx_data_ready[uart_id])	//N'est jamais sensÃ© se produire si l'utilisateur vÃ©rifie que BSP_UART_data_ready() avant d'appeler UART_get_next_byte()
 8003548:	4a20      	ldr	r2, [pc, #128]	; (80035cc <BSP_UART_get_next_byte+0x8c>)
 800354a:	5c12      	ldrb	r2, [r2, r0]
 800354c:	2a00      	cmp	r2, #0
 800354e:	d03a      	beq.n	80035c6 <BSP_UART_get_next_byte+0x86>
		return 0;

	ret =  buffer_rx[uart_id][buffer_rx_read_index[uart_id]];
 8003550:	4c1f      	ldr	r4, [pc, #124]	; (80035d0 <BSP_UART_get_next_byte+0x90>)
 8003552:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
 8003556:	491f      	ldr	r1, [pc, #124]	; (80035d4 <BSP_UART_get_next_byte+0x94>)
 8003558:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 800355c:	5c88      	ldrb	r0, [r1, r2]
	buffer_rx_read_index[uart_id] = (buffer_rx_read_index[uart_id] + 1) % BUFFER_RX_SIZE;
 800355e:	3201      	adds	r2, #1
 8003560:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003564:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

	//Section critique durant laquelle on dÃ©sactive les interruptions... pour Ã©viter une mauvaise prÃ©emption.
	NVIC_DisableIRQ(nvic_IRQ_array[uart_id]);
 8003568:	4a1b      	ldr	r2, [pc, #108]	; (80035d8 <BSP_UART_get_next_byte+0x98>)
 800356a:	56d2      	ldrsb	r2, [r2, r3]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800356c:	2a00      	cmp	r2, #0
 800356e:	db0c      	blt.n	800358a <BSP_UART_get_next_byte+0x4a>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003570:	f002 041f 	and.w	r4, r2, #31
 8003574:	0952      	lsrs	r2, r2, #5
 8003576:	2101      	movs	r1, #1
 8003578:	40a1      	lsls	r1, r4
 800357a:	3220      	adds	r2, #32
 800357c:	4c17      	ldr	r4, [pc, #92]	; (80035dc <BSP_UART_get_next_byte+0x9c>)
 800357e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003582:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003586:	f3bf 8f6f 	isb	sy
	if (buffer_rx_write_index[uart_id] == buffer_rx_read_index[uart_id])
 800358a:	4a15      	ldr	r2, [pc, #84]	; (80035e0 <BSP_UART_get_next_byte+0xa0>)
 800358c:	5cd1      	ldrb	r1, [r2, r3]
 800358e:	4a10      	ldr	r2, [pc, #64]	; (80035d0 <BSP_UART_get_next_byte+0x90>)
 8003590:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003594:	4291      	cmp	r1, r2
 8003596:	d012      	beq.n	80035be <BSP_UART_get_next_byte+0x7e>
		buffer_rx_data_ready[uart_id] = false;
	NVIC_EnableIRQ(nvic_IRQ_array[uart_id]);
 8003598:	4a0f      	ldr	r2, [pc, #60]	; (80035d8 <BSP_UART_get_next_byte+0x98>)
 800359a:	56d3      	ldrsb	r3, [r2, r3]
  if ((int32_t)(IRQn) >= 0)
 800359c:	2b00      	cmp	r3, #0
 800359e:	db07      	blt.n	80035b0 <BSP_UART_get_next_byte+0x70>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a0:	f003 011f 	and.w	r1, r3, #31
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	2201      	movs	r2, #1
 80035a8:	408a      	lsls	r2, r1
 80035aa:	490c      	ldr	r1, [pc, #48]	; (80035dc <BSP_UART_get_next_byte+0x9c>)
 80035ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return ret;
}
 80035b0:	bd10      	pop	{r4, pc}
	assert(uart_id < UART_ID_NB);
 80035b2:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <BSP_UART_get_next_byte+0xa4>)
 80035b4:	4a0c      	ldr	r2, [pc, #48]	; (80035e8 <BSP_UART_get_next_byte+0xa8>)
 80035b6:	21a5      	movs	r1, #165	; 0xa5
 80035b8:	480c      	ldr	r0, [pc, #48]	; (80035ec <BSP_UART_get_next_byte+0xac>)
 80035ba:	f003 fbfb 	bl	8006db4 <__assert_func>
		buffer_rx_data_ready[uart_id] = false;
 80035be:	4a03      	ldr	r2, [pc, #12]	; (80035cc <BSP_UART_get_next_byte+0x8c>)
 80035c0:	2100      	movs	r1, #0
 80035c2:	54d1      	strb	r1, [r2, r3]
 80035c4:	e7e8      	b.n	8003598 <BSP_UART_get_next_byte+0x58>
		return 0;
 80035c6:	2000      	movs	r0, #0
 80035c8:	e7f2      	b.n	80035b0 <BSP_UART_get_next_byte+0x70>
 80035ca:	bf00      	nop
 80035cc:	20000604 	.word	0x20000604
 80035d0:	20000608 	.word	0x20000608
 80035d4:	20000504 	.word	0x20000504
 80035d8:	0800b124 	.word	0x0800b124
 80035dc:	e000e100 	.word	0xe000e100
 80035e0:	20000610 	.word	0x20000610
 80035e4:	0800b088 	.word	0x0800b088
 80035e8:	0800b0e4 	.word	0x0800b0e4
 80035ec:	0800b0a0 	.word	0x0800b0a0

080035f0 <BSP_UART_putc>:
 *
 * @param	c : le caractere a envoyer
 * @param	uart_id UART1_ID, UART2_ID
 */
void BSP_UART_putc(uart_id_t uart_id, uint8_t c)
 {
 80035f0:	b530      	push	{r4, r5, lr}
 80035f2:	b083      	sub	sp, #12
 80035f4:	f88d 1007 	strb.w	r1, [sp, #7]
	HAL_StatusTypeDef state;
	assert(uart_id < UART_ID_NB);
 80035f8:	2801      	cmp	r0, #1
 80035fa:	d805      	bhi.n	8003608 <BSP_UART_putc+0x18>
	if(uart_initialized[uart_id])
 80035fc:	4604      	mov	r4, r0
 80035fe:	4b1b      	ldr	r3, [pc, #108]	; (800366c <BSP_UART_putc+0x7c>)
 8003600:	5c1b      	ldrb	r3, [r3, r0]
 8003602:	b953      	cbnz	r3, 800361a <BSP_UART_putc+0x2a>
			NVIC_DisableIRQ(nvic_IRQ_array[uart_id]);
			state = HAL_UART_Transmit(&structure_handles[uart_id], &c, 1, UART_TIMEOUT);
			NVIC_EnableIRQ(nvic_IRQ_array[uart_id]);
		}while(state == HAL_BUSY);
	}
}
 8003604:	b003      	add	sp, #12
 8003606:	bd30      	pop	{r4, r5, pc}
	assert(uart_id < UART_ID_NB);
 8003608:	4b19      	ldr	r3, [pc, #100]	; (8003670 <BSP_UART_putc+0x80>)
 800360a:	4a1a      	ldr	r2, [pc, #104]	; (8003674 <BSP_UART_putc+0x84>)
 800360c:	f240 110f 	movw	r1, #271	; 0x10f
 8003610:	4819      	ldr	r0, [pc, #100]	; (8003678 <BSP_UART_putc+0x88>)
 8003612:	f003 fbcf 	bl	8006db4 <__assert_func>
		}while(state == HAL_BUSY);
 8003616:	2802      	cmp	r0, #2
 8003618:	d1f4      	bne.n	8003604 <BSP_UART_putc+0x14>
			NVIC_DisableIRQ(nvic_IRQ_array[uart_id]);
 800361a:	4b18      	ldr	r3, [pc, #96]	; (800367c <BSP_UART_putc+0x8c>)
 800361c:	571b      	ldrsb	r3, [r3, r4]
  if ((int32_t)(IRQn) >= 0)
 800361e:	2b00      	cmp	r3, #0
 8003620:	db0c      	blt.n	800363c <BSP_UART_putc+0x4c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003622:	f003 011f 	and.w	r1, r3, #31
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	2201      	movs	r2, #1
 800362a:	408a      	lsls	r2, r1
 800362c:	3320      	adds	r3, #32
 800362e:	4914      	ldr	r1, [pc, #80]	; (8003680 <BSP_UART_putc+0x90>)
 8003630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003634:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003638:	f3bf 8f6f 	isb	sy
			state = HAL_UART_Transmit(&structure_handles[uart_id], &c, 1, UART_TIMEOUT);
 800363c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003640:	2201      	movs	r2, #1
 8003642:	f10d 0107 	add.w	r1, sp, #7
 8003646:	480f      	ldr	r0, [pc, #60]	; (8003684 <BSP_UART_putc+0x94>)
 8003648:	2594      	movs	r5, #148	; 0x94
 800364a:	fb05 0004 	mla	r0, r5, r4, r0
 800364e:	f003 f959 	bl	8006904 <HAL_UART_Transmit>
			NVIC_EnableIRQ(nvic_IRQ_array[uart_id]);
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <BSP_UART_putc+0x8c>)
 8003654:	571b      	ldrsb	r3, [r3, r4]
  if ((int32_t)(IRQn) >= 0)
 8003656:	2b00      	cmp	r3, #0
 8003658:	dbdd      	blt.n	8003616 <BSP_UART_putc+0x26>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365a:	f003 011f 	and.w	r1, r3, #31
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	2201      	movs	r2, #1
 8003662:	408a      	lsls	r2, r1
 8003664:	4906      	ldr	r1, [pc, #24]	; (8003680 <BSP_UART_putc+0x90>)
 8003666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
 800366a:	e7d4      	b.n	8003616 <BSP_UART_putc+0x26>
 800366c:	20000744 	.word	0x20000744
 8003670:	0800b088 	.word	0x0800b088
 8003674:	0800b0fc 	.word	0x0800b0fc
 8003678:	0800b0a0 	.word	0x0800b0a0
 800367c:	0800b124 	.word	0x0800b124
 8003680:	e000e100 	.word	0xe000e100
 8003684:	2000061c 	.word	0x2000061c

08003688 <BSP_UART_init>:
 * 				USART2 : Rx=PA3 et Tx=PA2 		ou avec remap : Rx=PA15 et Tx=PA14	ou Rx=PB4 et Tx=PB3
 * 				La gestion des envois et reception se fait en interruption.
 *
 */
void BSP_UART_init(uart_id_t uart_id, uint32_t baudrate)
{
 8003688:	b570      	push	{r4, r5, r6, lr}
	assert(baudrate > 1000);
 800368a:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800368e:	d962      	bls.n	8003756 <BSP_UART_init+0xce>
 8003690:	4605      	mov	r5, r0
	assert(uart_id < UART_ID_NB);
 8003692:	2801      	cmp	r0, #1
 8003694:	d866      	bhi.n	8003764 <BSP_UART_init+0xdc>

	buffer_rx_read_index[uart_id] = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	4a3c      	ldr	r2, [pc, #240]	; (800378c <BSP_UART_init+0x104>)
 800369a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	buffer_rx_write_index[uart_id] = 0;
 800369e:	4a3c      	ldr	r2, [pc, #240]	; (8003790 <BSP_UART_init+0x108>)
 80036a0:	5413      	strb	r3, [r2, r0]
	buffer_rx_data_ready[uart_id] = false;
 80036a2:	4a3c      	ldr	r2, [pc, #240]	; (8003794 <BSP_UART_init+0x10c>)
 80036a4:	5413      	strb	r3, [r2, r0]
		- OverSampling: enable
		- One bit sampling: disable
		- Prescaler: DIV1
		- Advance features: disabled
	*/
	structure_handles[uart_id].Instance = (USART_TypeDef*)instances_array[uart_id];
 80036a6:	4a3c      	ldr	r2, [pc, #240]	; (8003798 <BSP_UART_init+0x110>)
 80036a8:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80036ac:	483b      	ldr	r0, [pc, #236]	; (800379c <BSP_UART_init+0x114>)
 80036ae:	2294      	movs	r2, #148	; 0x94
 80036b0:	fb02 f205 	mul.w	r2, r2, r5
 80036b4:	1884      	adds	r4, r0, r2
 80036b6:	5086      	str	r6, [r0, r2]
	structure_handles[uart_id].Init.BaudRate = baudrate;
 80036b8:	6061      	str	r1, [r4, #4]
	structure_handles[uart_id].Init.WordLength = UART_WORDLENGTH_8B;
 80036ba:	60a3      	str	r3, [r4, #8]
	structure_handles[uart_id].Init.StopBits = UART_STOPBITS_1;
 80036bc:	60e3      	str	r3, [r4, #12]
	structure_handles[uart_id].Init.Parity = UART_PARITY_NONE;
 80036be:	6123      	str	r3, [r4, #16]
	structure_handles[uart_id].Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036c0:	61a3      	str	r3, [r4, #24]
	structure_handles[uart_id].Init.Mode = UART_MODE_TX_RX;
 80036c2:	220c      	movs	r2, #12
 80036c4:	6162      	str	r2, [r4, #20]
	structure_handles[uart_id].Init.OverSampling = UART_OVERSAMPLING_16;
 80036c6:	61e3      	str	r3, [r4, #28]
	structure_handles[uart_id].Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036c8:	6223      	str	r3, [r4, #32]
	structure_handles[uart_id].Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036ca:	6263      	str	r3, [r4, #36]	; 0x24
	structure_handles[uart_id].AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036cc:	62a3      	str	r3, [r4, #40]	; 0x28

	if (HAL_UART_Init(&structure_handles[uart_id]) != HAL_OK)
 80036ce:	4620      	mov	r0, r4
 80036d0:	f003 f9e6 	bl	8006aa0 <HAL_UART_Init>
 80036d4:	2800      	cmp	r0, #0
 80036d6:	d14c      	bne.n	8003772 <BSP_UART_init+0xea>
	{
		Error_Handler();
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&structure_handles[uart_id], UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036d8:	2100      	movs	r1, #0
 80036da:	4620      	mov	r0, r4
 80036dc:	f003 fb20 	bl	8006d20 <HAL_UARTEx_SetTxFifoThreshold>
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d149      	bne.n	8003778 <BSP_UART_init+0xf0>
	{
		Error_Handler();
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&structure_handles[uart_id], UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036e4:	2100      	movs	r1, #0
 80036e6:	4620      	mov	r0, r4
 80036e8:	f003 fb3f 	bl	8006d6a <HAL_UARTEx_SetRxFifoThreshold>
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d146      	bne.n	800377e <BSP_UART_init+0xf6>
	{
		Error_Handler();
	}
	if (HAL_UARTEx_DisableFifoMode(&structure_handles[uart_id]) != HAL_OK)
 80036f0:	4620      	mov	r0, r4
 80036f2:	f003 faf6 	bl	8006ce2 <HAL_UARTEx_DisableFifoMode>
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d144      	bne.n	8003784 <BSP_UART_init+0xfc>
	{
		Error_Handler();
	}

	/* Interrupt Init */
	HAL_NVIC_SetPriority(nvic_IRQ_array[uart_id], 1, 1);
 80036fa:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <BSP_UART_init+0x118>)
 80036fc:	575e      	ldrsb	r6, [r3, r5]
 80036fe:	2201      	movs	r2, #1
 8003700:	4611      	mov	r1, r2
 8003702:	4630      	mov	r0, r6
 8003704:	f000 ffb4 	bl	8004670 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(nvic_IRQ_array[uart_id]);
 8003708:	4630      	mov	r0, r6
 800370a:	f000 ffe5 	bl	80046d8 <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&structure_handles[uart_id],&buffer_rx[uart_id][buffer_rx_write_index[uart_id]],1);	//Activation de la rÃ©ception d'un caractÃ¨re
 800370e:	4b20      	ldr	r3, [pc, #128]	; (8003790 <BSP_UART_init+0x108>)
 8003710:	5d5b      	ldrb	r3, [r3, r5]
 8003712:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
 8003716:	2201      	movs	r2, #1
 8003718:	4922      	ldr	r1, [pc, #136]	; (80037a4 <BSP_UART_init+0x11c>)
 800371a:	4419      	add	r1, r3
 800371c:	4620      	mov	r0, r4
 800371e:	f003 fa91 	bl	8006c44 <HAL_UART_Receive_IT>

	//Config LibC: no buffering
	setvbuf(stdout, NULL, _IONBF, 0 );
 8003722:	4c21      	ldr	r4, [pc, #132]	; (80037a8 <BSP_UART_init+0x120>)
 8003724:	6820      	ldr	r0, [r4, #0]
 8003726:	2300      	movs	r3, #0
 8003728:	2202      	movs	r2, #2
 800372a:	4619      	mov	r1, r3
 800372c:	6880      	ldr	r0, [r0, #8]
 800372e:	f004 fb25 	bl	8007d7c <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0 );
 8003732:	6820      	ldr	r0, [r4, #0]
 8003734:	2300      	movs	r3, #0
 8003736:	2202      	movs	r2, #2
 8003738:	4619      	mov	r1, r3
 800373a:	68c0      	ldr	r0, [r0, #12]
 800373c:	f004 fb1e 	bl	8007d7c <setvbuf>
	setvbuf(stdin, NULL, _IONBF, 0 );
 8003740:	6820      	ldr	r0, [r4, #0]
 8003742:	2300      	movs	r3, #0
 8003744:	2202      	movs	r2, #2
 8003746:	4619      	mov	r1, r3
 8003748:	6840      	ldr	r0, [r0, #4]
 800374a:	f004 fb17 	bl	8007d7c <setvbuf>

	uart_initialized[uart_id] = true;
 800374e:	4b17      	ldr	r3, [pc, #92]	; (80037ac <BSP_UART_init+0x124>)
 8003750:	2201      	movs	r2, #1
 8003752:	555a      	strb	r2, [r3, r5]
}
 8003754:	bd70      	pop	{r4, r5, r6, pc}
	assert(baudrate > 1000);
 8003756:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <BSP_UART_init+0x128>)
 8003758:	4a16      	ldr	r2, [pc, #88]	; (80037b4 <BSP_UART_init+0x12c>)
 800375a:	f240 114b 	movw	r1, #331	; 0x14b
 800375e:	4816      	ldr	r0, [pc, #88]	; (80037b8 <BSP_UART_init+0x130>)
 8003760:	f003 fb28 	bl	8006db4 <__assert_func>
	assert(uart_id < UART_ID_NB);
 8003764:	4b15      	ldr	r3, [pc, #84]	; (80037bc <BSP_UART_init+0x134>)
 8003766:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <BSP_UART_init+0x12c>)
 8003768:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800376c:	4812      	ldr	r0, [pc, #72]	; (80037b8 <BSP_UART_init+0x130>)
 800376e:	f003 fb21 	bl	8006db4 <__assert_func>
		Error_Handler();
 8003772:	f7ff fc75 	bl	8003060 <Error_Handler>
 8003776:	e7af      	b.n	80036d8 <BSP_UART_init+0x50>
		Error_Handler();
 8003778:	f7ff fc72 	bl	8003060 <Error_Handler>
 800377c:	e7b2      	b.n	80036e4 <BSP_UART_init+0x5c>
		Error_Handler();
 800377e:	f7ff fc6f 	bl	8003060 <Error_Handler>
 8003782:	e7b5      	b.n	80036f0 <BSP_UART_init+0x68>
		Error_Handler();
 8003784:	f7ff fc6c 	bl	8003060 <Error_Handler>
 8003788:	e7b7      	b.n	80036fa <BSP_UART_init+0x72>
 800378a:	bf00      	nop
 800378c:	20000608 	.word	0x20000608
 8003790:	20000610 	.word	0x20000610
 8003794:	20000604 	.word	0x20000604
 8003798:	0800b11c 	.word	0x0800b11c
 800379c:	2000061c 	.word	0x2000061c
 80037a0:	0800b124 	.word	0x0800b124
 80037a4:	20000504 	.word	0x20000504
 80037a8:	20000010 	.word	0x20000010
 80037ac:	20000744 	.word	0x20000744
 80037b0:	0800b0c0 	.word	0x0800b0c0
 80037b4:	0800b10c 	.word	0x0800b10c
 80037b8:	0800b0a0 	.word	0x0800b0a0
 80037bc:	0800b088 	.word	0x0800b088

080037c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uart_handle)
{
 80037c0:	b530      	push	{r4, r5, lr}
 80037c2:	b099      	sub	sp, #100	; 0x64
 80037c4:	4604      	mov	r4, r0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037c6:	2244      	movs	r2, #68	; 0x44
 80037c8:	2100      	movs	r1, #0
 80037ca:	a807      	add	r0, sp, #28
 80037cc:	f003 fb54 	bl	8006e78 <memset>

	if(uart_handle->Instance==USART1)
 80037d0:	6822      	ldr	r2, [r4, #0]
 80037d2:	4b2f      	ldr	r3, [pc, #188]	; (8003890 <HAL_UART_MspInit+0xd0>)
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d005      	beq.n	80037e4 <HAL_UART_MspInit+0x24>
#endif
		/* UART1 clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
	}

	if(uart_handle->Instance==USART2)
 80037d8:	6822      	ldr	r2, [r4, #0]
 80037da:	4b2e      	ldr	r3, [pc, #184]	; (8003894 <HAL_UART_MspInit+0xd4>)
 80037dc:	429a      	cmp	r2, r3
 80037de:	d02c      	beq.n	800383a <HAL_UART_MspInit+0x7a>
#endif

		/* UART2 clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
	}
}
 80037e0:	b019      	add	sp, #100	; 0x64
 80037e2:	bd30      	pop	{r4, r5, pc}
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80037e4:	2301      	movs	r3, #1
 80037e6:	9307      	str	r3, [sp, #28]
		PeriphClkInit.Usart2ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80037e8:	2300      	movs	r3, #0
 80037ea:	9309      	str	r3, [sp, #36]	; 0x24
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ec:	a807      	add	r0, sp, #28
 80037ee:	f001 fef5 	bl	80055dc <HAL_RCCEx_PeriphCLKConfig>
 80037f2:	b9f8      	cbnz	r0, 8003834 <HAL_UART_MspInit+0x74>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80037f4:	4d28      	ldr	r5, [pc, #160]	; (8003898 <HAL_UART_MspInit+0xd8>)
 80037f6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	64eb      	str	r3, [r5, #76]	; 0x4c
 80037fe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	9303      	str	r3, [sp, #12]
 8003806:	9b03      	ldr	r3, [sp, #12]
		BSP_GPIO_pin_config(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF7_USART1);
 8003808:	2307      	movs	r3, #7
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	2303      	movs	r3, #3
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	2300      	movs	r3, #0
 8003812:	2202      	movs	r2, #2
 8003814:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800381c:	f7ff fb92 	bl	8002f44 <BSP_GPIO_pin_config>
		__HAL_RCC_USART1_CLK_ENABLE();
 8003820:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003826:	662b      	str	r3, [r5, #96]	; 0x60
 8003828:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800382a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800382e:	9304      	str	r3, [sp, #16]
 8003830:	9b04      	ldr	r3, [sp, #16]
 8003832:	e7d1      	b.n	80037d8 <HAL_UART_MspInit+0x18>
		  Error_Handler();
 8003834:	f7ff fc14 	bl	8003060 <Error_Handler>
 8003838:	e7dc      	b.n	80037f4 <HAL_UART_MspInit+0x34>
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800383a:	2302      	movs	r3, #2
 800383c:	9307      	str	r3, [sp, #28]
		PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800383e:	2300      	movs	r3, #0
 8003840:	9309      	str	r3, [sp, #36]	; 0x24
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003842:	a807      	add	r0, sp, #28
 8003844:	f001 feca 	bl	80055dc <HAL_RCCEx_PeriphCLKConfig>
 8003848:	b9f0      	cbnz	r0, 8003888 <HAL_UART_MspInit+0xc8>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800384a:	4c13      	ldr	r4, [pc, #76]	; (8003898 <HAL_UART_MspInit+0xd8>)
 800384c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003854:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	9305      	str	r3, [sp, #20]
 800385c:	9b05      	ldr	r3, [sp, #20]
		BSP_GPIO_pin_config(GPIOA, GPIO_PIN_2 | GPIO_PIN_3, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF7_USART2);
 800385e:	2307      	movs	r3, #7
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	2303      	movs	r3, #3
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	2300      	movs	r3, #0
 8003868:	2202      	movs	r2, #2
 800386a:	210c      	movs	r1, #12
 800386c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003870:	f7ff fb68 	bl	8002f44 <BSP_GPIO_pin_config>
		__HAL_RCC_USART2_CLK_ENABLE();
 8003874:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387a:	65a3      	str	r3, [r4, #88]	; 0x58
 800387c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	9306      	str	r3, [sp, #24]
 8003884:	9b06      	ldr	r3, [sp, #24]
}
 8003886:	e7ab      	b.n	80037e0 <HAL_UART_MspInit+0x20>
		  Error_Handler();
 8003888:	f7ff fbea 	bl	8003060 <Error_Handler>
 800388c:	e7dd      	b.n	800384a <HAL_UART_MspInit+0x8a>
 800388e:	bf00      	nop
 8003890:	40013800 	.word	0x40013800
 8003894:	40004400 	.word	0x40004400
 8003898:	40021000 	.word	0x40021000

0800389c <USART1_IRQHandler>:

	}
}

void USART1_IRQHandler(void)
{
 800389c:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&structure_handles[UART1_ID]);
 800389e:	4802      	ldr	r0, [pc, #8]	; (80038a8 <USART1_IRQHandler+0xc>)
 80038a0:	f002 f98e 	bl	8005bc0 <HAL_UART_IRQHandler>
}
 80038a4:	bd08      	pop	{r3, pc}
 80038a6:	bf00      	nop
 80038a8:	2000061c 	.word	0x2000061c

080038ac <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80038ac:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&structure_handles[UART2_ID]);
 80038ae:	4802      	ldr	r0, [pc, #8]	; (80038b8 <USART2_IRQHandler+0xc>)
 80038b0:	f002 f986 	bl	8005bc0 <HAL_UART_IRQHandler>
}
 80038b4:	bd08      	pop	{r3, pc}
 80038b6:	bf00      	nop
 80038b8:	200006b0 	.word	0x200006b0

080038bc <HAL_UART_ErrorCallback>:
	callback_uart_rx[uart_id] = cb;
}

#define USART_FLAG_ERRORS (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE | USART_ISR_PE)
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038bc:	e002      	b.n	80038c4 <HAL_UART_ErrorCallback+0x8>
	do{
		status = huart->Instance->ISR;
		if (status & USART_ISR_RXNE)
			trash = (uint8_t) (huart->Instance->RDR);
		if (status & USART_FLAG_ERRORS)
			huart->Instance->ICR = USART_FLAG_ERRORS;
 80038be:	210f      	movs	r1, #15
 80038c0:	6211      	str	r1, [r2, #32]
	}while(status & USART_FLAG_ERRORS);
 80038c2:	b14b      	cbz	r3, 80038d8 <HAL_UART_ErrorCallback+0x1c>
		status = huart->Instance->ISR;
 80038c4:	6802      	ldr	r2, [r0, #0]
 80038c6:	69d3      	ldr	r3, [r2, #28]
		if (status & USART_ISR_RXNE)
 80038c8:	f013 0f20 	tst.w	r3, #32
 80038cc:	d000      	beq.n	80038d0 <HAL_UART_ErrorCallback+0x14>
			trash = (uint8_t) (huart->Instance->RDR);
 80038ce:	6a51      	ldr	r1, [r2, #36]	; 0x24
		if (status & USART_FLAG_ERRORS)
 80038d0:	f013 030f 	ands.w	r3, r3, #15
 80038d4:	d0f5      	beq.n	80038c2 <HAL_UART_ErrorCallback+0x6>
 80038d6:	e7f2      	b.n	80038be <HAL_UART_ErrorCallback+0x2>
}
 80038d8:	4770      	bx	lr
	...

080038dc <HAL_UART_RxCpltCallback>:
 * @post La rÃ©ception en IT des prochains octets est rÃ©activÃ©e.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	uart_id_t uart_id;
	if (huart->Instance == USART1)
 80038dc:	6803      	ldr	r3, [r0, #0]
 80038de:	4a17      	ldr	r2, [pc, #92]	; (800393c <HAL_UART_RxCpltCallback+0x60>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d028      	beq.n	8003936 <HAL_UART_RxCpltCallback+0x5a>
		uart_id = UART1_ID;
	else if (huart->Instance == USART2)
 80038e4:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d000      	beq.n	80038ee <HAL_UART_RxCpltCallback+0x12>
 80038ec:	4770      	bx	lr
		uart_id = UART2_ID;
 80038ee:	2201      	movs	r2, #1
{
 80038f0:	b510      	push	{r4, lr}
	else
		return;

	buffer_rx_data_ready[uart_id] = true;
 80038f2:	4614      	mov	r4, r2
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_UART_RxCpltCallback+0x64>)
 80038f6:	2101      	movs	r1, #1
 80038f8:	5499      	strb	r1, [r3, r2]
	buffer_rx_write_index[uart_id] = (buffer_rx_write_index[uart_id] + 1) % BUFFER_RX_SIZE;
 80038fa:	4812      	ldr	r0, [pc, #72]	; (8003944 <HAL_UART_RxCpltCallback+0x68>)
 80038fc:	5c83      	ldrb	r3, [r0, r2]
 80038fe:	440b      	add	r3, r1
 8003900:	4259      	negs	r1, r3
 8003902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003906:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800390a:	bf58      	it	pl
 800390c:	424b      	negpl	r3, r1
 800390e:	5483      	strb	r3, [r0, r2]
	if (callback_uart_rx[uart_id] != NULL)
 8003910:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <HAL_UART_RxCpltCallback+0x6c>)
 8003912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003916:	b103      	cbz	r3, 800391a <HAL_UART_RxCpltCallback+0x3e>
		callback_uart_rx[uart_id]();
 8003918:	4798      	blx	r3
	HAL_UART_Receive_IT(&structure_handles[uart_id], &buffer_rx[uart_id][buffer_rx_write_index[uart_id]], 1);//Activation de la rÃ©ception d'un caractÃ¨re
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <HAL_UART_RxCpltCallback+0x68>)
 800391c:	5d1b      	ldrb	r3, [r3, r4]
 800391e:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
 8003922:	2201      	movs	r2, #1
 8003924:	4909      	ldr	r1, [pc, #36]	; (800394c <HAL_UART_RxCpltCallback+0x70>)
 8003926:	4419      	add	r1, r3
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <HAL_UART_RxCpltCallback+0x74>)
 800392a:	2094      	movs	r0, #148	; 0x94
 800392c:	fb00 3004 	mla	r0, r0, r4, r3
 8003930:	f003 f988 	bl	8006c44 <HAL_UART_Receive_IT>
}
 8003934:	bd10      	pop	{r4, pc}
		uart_id = UART1_ID;
 8003936:	2200      	movs	r2, #0
 8003938:	e7da      	b.n	80038f0 <HAL_UART_RxCpltCallback+0x14>
 800393a:	bf00      	nop
 800393c:	40013800 	.word	0x40013800
 8003940:	20000604 	.word	0x20000604
 8003944:	20000610 	.word	0x20000610
 8003948:	20000614 	.word	0x20000614
 800394c:	20000504 	.word	0x20000504
 8003950:	2000061c 	.word	0x2000061c

08003954 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003954:	4b10      	ldr	r3, [pc, #64]	; (8003998 <HAL_InitTick+0x44>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	b90b      	cbnz	r3, 800395e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800395a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800395c:	4770      	bx	lr
{
 800395e:	b510      	push	{r4, lr}
 8003960:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003962:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003966:	fbb0 f3f3 	udiv	r3, r0, r3
 800396a:	4a0c      	ldr	r2, [pc, #48]	; (800399c <HAL_InitTick+0x48>)
 800396c:	6810      	ldr	r0, [r2, #0]
 800396e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003972:	f000 febf 	bl	80046f4 <HAL_SYSTICK_Config>
 8003976:	b968      	cbnz	r0, 8003994 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003978:	2c0f      	cmp	r4, #15
 800397a:	d901      	bls.n	8003980 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 800397c:	2001      	movs	r0, #1
 800397e:	e00a      	b.n	8003996 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003980:	2200      	movs	r2, #0
 8003982:	4621      	mov	r1, r4
 8003984:	f04f 30ff 	mov.w	r0, #4294967295
 8003988:	f000 fe72 	bl	8004670 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800398c:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <HAL_InitTick+0x4c>)
 800398e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8003990:	2000      	movs	r0, #0
 8003992:	e000      	b.n	8003996 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8003994:	2001      	movs	r0, #1
}
 8003996:	bd10      	pop	{r4, pc}
 8003998:	20000008 	.word	0x20000008
 800399c:	20000004 	.word	0x20000004
 80039a0:	2000000c 	.word	0x2000000c

080039a4 <HAL_Init>:
{
 80039a4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039a6:	2003      	movs	r0, #3
 80039a8:	f000 fe50 	bl	800464c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039ac:	2000      	movs	r0, #0
 80039ae:	f7ff ffd1 	bl	8003954 <HAL_InitTick>
 80039b2:	b110      	cbz	r0, 80039ba <HAL_Init+0x16>
    status = HAL_ERROR;
 80039b4:	2401      	movs	r4, #1
}
 80039b6:	4620      	mov	r0, r4
 80039b8:	bd10      	pop	{r4, pc}
 80039ba:	4604      	mov	r4, r0
    HAL_MspInit();
 80039bc:	f7ff fb8a 	bl	80030d4 <HAL_MspInit>
 80039c0:	e7f9      	b.n	80039b6 <HAL_Init+0x12>
	...

080039c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80039c4:	4a03      	ldr	r2, [pc, #12]	; (80039d4 <HAL_IncTick+0x10>)
 80039c6:	6813      	ldr	r3, [r2, #0]
 80039c8:	4903      	ldr	r1, [pc, #12]	; (80039d8 <HAL_IncTick+0x14>)
 80039ca:	6809      	ldr	r1, [r1, #0]
 80039cc:	440b      	add	r3, r1
 80039ce:	6013      	str	r3, [r2, #0]
}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	2000092c 	.word	0x2000092c
 80039d8:	20000008 	.word	0x20000008

080039dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80039dc:	4b01      	ldr	r3, [pc, #4]	; (80039e4 <HAL_GetTick+0x8>)
 80039de:	6818      	ldr	r0, [r3, #0]
}
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	2000092c 	.word	0x2000092c

080039e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039e8:	b538      	push	{r3, r4, r5, lr}
 80039ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80039ec:	f7ff fff6 	bl	80039dc <HAL_GetTick>
 80039f0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039f2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80039f6:	d002      	beq.n	80039fe <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80039f8:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <HAL_Delay+0x24>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039fe:	f7ff ffed 	bl	80039dc <HAL_GetTick>
 8003a02:	1b40      	subs	r0, r0, r5
 8003a04:	42a0      	cmp	r0, r4
 8003a06:	d3fa      	bcc.n	80039fe <HAL_Delay+0x16>
  {
  }
}
 8003a08:	bd38      	pop	{r3, r4, r5, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000008 	.word	0x20000008

08003a10 <HAL_ADC_MspInit>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 8003a10:	4770      	bx	lr
	...

08003a14 <HAL_ADC_Init>:
{
 8003a14:	b530      	push	{r4, r5, lr}
 8003a16:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	f000 8106 	beq.w	8003c2e <HAL_ADC_Init+0x21a>
 8003a22:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a24:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003a26:	b313      	cbz	r3, 8003a6e <HAL_ADC_Init+0x5a>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a28:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8003a30:	d005      	beq.n	8003a3e <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8003a38:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003a3c:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a3e:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a40:	6893      	ldr	r3, [r2, #8]
 8003a42:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003a46:	d11f      	bne.n	8003a88 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8003a48:	6893      	ldr	r3, [r2, #8]
 8003a4a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003a4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a56:	6093      	str	r3, [r2, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a58:	4b76      	ldr	r3, [pc, #472]	; (8003c34 <HAL_ADC_Init+0x220>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	099b      	lsrs	r3, r3, #6
 8003a5e:	4a76      	ldr	r2, [pc, #472]	; (8003c38 <HAL_ADC_Init+0x224>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	3301      	adds	r3, #1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003a6c:	e009      	b.n	8003a82 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 8003a6e:	f7ff ffcf 	bl	8003a10 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003a72:	2300      	movs	r3, #0
 8003a74:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8003a76:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8003a7a:	e7d5      	b.n	8003a28 <HAL_ADC_Init+0x14>
      wait_loop_index--;
 8003a7c:	9b01      	ldr	r3, [sp, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003a82:	9b01      	ldr	r3, [sp, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f9      	bne.n	8003a7c <HAL_ADC_Init+0x68>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a88:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a8a:	6893      	ldr	r3, [r2, #8]
 8003a8c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003a90:	d109      	bne.n	8003aa6 <HAL_ADC_Init+0x92>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a92:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003a94:	f043 0310 	orr.w	r3, r3, #16
 8003a98:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a9a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6623      	str	r3, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	e000      	b.n	8003aa8 <HAL_ADC_Init+0x94>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa6:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003aa8:	6893      	ldr	r3, [r2, #8]
 8003aaa:	f013 0304 	ands.w	r3, r3, #4
 8003aae:	d000      	beq.n	8003ab2 <HAL_ADC_Init+0x9e>
 8003ab0:	2301      	movs	r3, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ab2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003ab4:	f011 0f10 	tst.w	r1, #16
 8003ab8:	f040 80b2 	bne.w	8003c20 <HAL_ADC_Init+0x20c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f040 80af 	bne.w	8003c20 <HAL_ADC_Init+0x20c>
    ADC_STATE_CLR_SET(hadc->State,
 8003ac2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ac4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ac8:	f043 0302 	orr.w	r3, r3, #2
 8003acc:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ace:	6893      	ldr	r3, [r2, #8]
 8003ad0:	f013 0f01 	tst.w	r3, #1
 8003ad4:	d115      	bne.n	8003b02 <HAL_ADC_Init+0xee>
 8003ad6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f013 0301 	ands.w	r3, r3, #1
 8003ae0:	d000      	beq.n	8003ae4 <HAL_ADC_Init+0xd0>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	4a55      	ldr	r2, [pc, #340]	; (8003c3c <HAL_ADC_Init+0x228>)
 8003ae6:	6892      	ldr	r2, [r2, #8]
 8003ae8:	f012 0201 	ands.w	r2, r2, #1
 8003aec:	d000      	beq.n	8003af0 <HAL_ADC_Init+0xdc>
 8003aee:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	d106      	bne.n	8003b02 <HAL_ADC_Init+0xee>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003af4:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003af6:	4952      	ldr	r1, [pc, #328]	; (8003c40 <HAL_ADC_Init+0x22c>)
 8003af8:	688a      	ldr	r2, [r1, #8]
 8003afa:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b02:	7f62      	ldrb	r2, [r4, #29]
                 hadc->Init.Overrun                                                     |
 8003b04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b06:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 8003b0a:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 8003b0c:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 8003b0e:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 8003b10:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b12:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b1a:	2a01      	cmp	r2, #1
 8003b1c:	d051      	beq.n	8003bc2 <HAL_ADC_Init+0x1ae>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b20:	b122      	cbz	r2, 8003b2c <HAL_ADC_Init+0x118>
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b22:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003b26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003b28:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b2a:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003b2c:	6821      	ldr	r1, [r4, #0]
 8003b2e:	68cd      	ldr	r5, [r1, #12]
 8003b30:	4a44      	ldr	r2, [pc, #272]	; (8003c44 <HAL_ADC_Init+0x230>)
 8003b32:	402a      	ands	r2, r5
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60cb      	str	r3, [r1, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003b38:	6822      	ldr	r2, [r4, #0]
 8003b3a:	6913      	ldr	r3, [r2, #16]
 8003b3c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b42:	430b      	orrs	r3, r1
 8003b44:	6113      	str	r3, [r2, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b46:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b48:	6893      	ldr	r3, [r2, #8]
 8003b4a:	f013 0308 	ands.w	r3, r3, #8
 8003b4e:	d000      	beq.n	8003b52 <HAL_ADC_Init+0x13e>
 8003b50:	2301      	movs	r3, #1
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b52:	bb3b      	cbnz	r3, 8003ba4 <HAL_ADC_Init+0x190>
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b54:	7f21      	ldrb	r1, [r4, #28]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b56:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003b5a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b5c:	ea43 3181 	orr.w	r1, r3, r1, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003b60:	68d3      	ldr	r3, [r2, #12]
 8003b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b66:	f023 0302 	bic.w	r3, r3, #2
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.GainCompensation != 0UL)
 8003b6e:	6923      	ldr	r3, [r4, #16]
 8003b70:	b363      	cbz	r3, 8003bcc <HAL_ADC_Init+0x1b8>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b72:	6822      	ldr	r2, [r4, #0]
 8003b74:	6913      	ldr	r3, [r2, #16]
 8003b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7a:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003b7c:	6822      	ldr	r2, [r4, #0]
 8003b7e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003b82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b8a:	6921      	ldr	r1, [r4, #16]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8003b92:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d027      	beq.n	8003bea <HAL_ADC_Init+0x1d6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b9a:	6822      	ldr	r2, [r4, #0]
 8003b9c:	6913      	ldr	r3, [r2, #16]
 8003b9e:	f023 0301 	bic.w	r3, r3, #1
 8003ba2:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ba4:	6963      	ldr	r3, [r4, #20]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d031      	beq.n	8003c0e <HAL_ADC_Init+0x1fa>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003baa:	6822      	ldr	r2, [r4, #0]
 8003bac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003bae:	f023 030f 	bic.w	r3, r3, #15
 8003bb2:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003bb4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003bb6:	f023 0303 	bic.w	r3, r3, #3
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003bc0:	e033      	b.n	8003c2a <HAL_ADC_Init+0x216>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bc2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003bc4:	3a01      	subs	r2, #1
 8003bc6:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003bca:	e7a8      	b.n	8003b1e <HAL_ADC_Init+0x10a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003bcc:	6822      	ldr	r2, [r4, #0]
 8003bce:	6913      	ldr	r3, [r2, #16]
 8003bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd4:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003bd6:	6822      	ldr	r2, [r4, #0]
 8003bd8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003bdc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003be0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003be4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003be8:	e7d3      	b.n	8003b92 <HAL_ADC_Init+0x17e>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003bea:	6821      	ldr	r1, [r4, #0]
 8003bec:	690b      	ldr	r3, [r1, #16]
 8003bee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003bf2:	f023 0304 	bic.w	r3, r3, #4
 8003bf6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003bf8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003bfa:	432a      	orrs	r2, r5
 8003bfc:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8003bfe:	432a      	orrs	r2, r5
 8003c00:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8003c02:	432a      	orrs	r2, r5
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	610b      	str	r3, [r1, #16]
 8003c0c:	e7ca      	b.n	8003ba4 <HAL_ADC_Init+0x190>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c0e:	6821      	ldr	r1, [r4, #0]
 8003c10:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003c12:	f023 030f 	bic.w	r3, r3, #15
 8003c16:	6a22      	ldr	r2, [r4, #32]
 8003c18:	3a01      	subs	r2, #1
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	630b      	str	r3, [r1, #48]	; 0x30
 8003c1e:	e7c9      	b.n	8003bb4 <HAL_ADC_Init+0x1a0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c20:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003c22:	f043 0310 	orr.w	r3, r3, #16
 8003c26:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003c28:	2001      	movs	r0, #1
}
 8003c2a:	b003      	add	sp, #12
 8003c2c:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003c2e:	2001      	movs	r0, #1
 8003c30:	e7fb      	b.n	8003c2a <HAL_ADC_Init+0x216>
 8003c32:	bf00      	nop
 8003c34:	20000004 	.word	0x20000004
 8003c38:	053e2d63 	.word	0x053e2d63
 8003c3c:	50000100 	.word	0x50000100
 8003c40:	50000300 	.word	0x50000300
 8003c44:	fff04007 	.word	0xfff04007

08003c48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c48:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c4a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003c4c:	f7ff f8dc 	bl	8002e08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c50:	bd08      	pop	{r3, pc}

08003c52 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8003c52:	4770      	bx	lr

08003c54 <HAL_ADC_ErrorCallback>:
}
 8003c54:	4770      	bx	lr
	...

08003c58 <HAL_ADC_IRQHandler>:
{
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003c5c:	6803      	ldr	r3, [r0, #0]
 8003c5e:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003c60:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c62:	4ba0      	ldr	r3, [pc, #640]	; (8003ee4 <HAL_ADC_IRQHandler+0x28c>)
 8003c64:	689e      	ldr	r6, [r3, #8]
 8003c66:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003c6a:	f017 0f02 	tst.w	r7, #2
 8003c6e:	d010      	beq.n	8003c92 <HAL_ADC_IRQHandler+0x3a>
 8003c70:	f015 0f02 	tst.w	r5, #2
 8003c74:	d00d      	beq.n	8003c92 <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c76:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003c78:	f013 0f10 	tst.w	r3, #16
 8003c7c:	d103      	bne.n	8003c86 <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003c7e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003c80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c84:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003c86:	4620      	mov	r0, r4
 8003c88:	f000 fcde 	bl	8004648 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c92:	f017 0f04 	tst.w	r7, #4
 8003c96:	d002      	beq.n	8003c9e <HAL_ADC_IRQHandler+0x46>
 8003c98:	f015 0f04 	tst.w	r5, #4
 8003c9c:	d105      	bne.n	8003caa <HAL_ADC_IRQHandler+0x52>
 8003c9e:	f017 0f08 	tst.w	r7, #8
 8003ca2:	d04a      	beq.n	8003d3a <HAL_ADC_IRQHandler+0xe2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003ca4:	f015 0f08 	tst.w	r5, #8
 8003ca8:	d047      	beq.n	8003d3a <HAL_ADC_IRQHandler+0xe2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003caa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003cac:	f013 0f10 	tst.w	r3, #16
 8003cb0:	d103      	bne.n	8003cba <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cb2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003cb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cb8:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003cba:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003cc2:	d134      	bne.n	8003d2e <HAL_ADC_IRQHandler+0xd6>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cc4:	4a88      	ldr	r2, [pc, #544]	; (8003ee8 <HAL_ADC_IRQHandler+0x290>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_ADC_IRQHandler+0x86>
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d009      	beq.n	8003ce4 <HAL_ADC_IRQHandler+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cd0:	b146      	cbz	r6, 8003ce4 <HAL_ADC_IRQHandler+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cd2:	2e05      	cmp	r6, #5
 8003cd4:	d006      	beq.n	8003ce4 <HAL_ADC_IRQHandler+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cd6:	2e09      	cmp	r6, #9
 8003cd8:	d004      	beq.n	8003ce4 <HAL_ADC_IRQHandler+0x8c>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003cda:	68d2      	ldr	r2, [r2, #12]
 8003cdc:	e003      	b.n	8003ce6 <HAL_ADC_IRQHandler+0x8e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003ce2:	e7f3      	b.n	8003ccc <HAL_ADC_IRQHandler+0x74>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ce4:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003ce6:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8003cea:	d120      	bne.n	8003d2e <HAL_ADC_IRQHandler+0xd6>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	f012 0f08 	tst.w	r2, #8
 8003cf2:	d01c      	beq.n	8003d2e <HAL_ADC_IRQHandler+0xd6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	f012 0f04 	tst.w	r2, #4
 8003cfa:	d110      	bne.n	8003d1e <HAL_ADC_IRQHandler+0xc6>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	f022 020c 	bic.w	r2, r2, #12
 8003d02:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d0a:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d0c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003d0e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003d12:	d10c      	bne.n	8003d2e <HAL_ADC_IRQHandler+0xd6>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d14:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003d1c:	e007      	b.n	8003d2e <HAL_ADC_IRQHandler+0xd6>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d1e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003d20:	f043 0310 	orr.w	r3, r3, #16
 8003d24:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d26:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f7ff f85c 	bl	8002dec <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	220c      	movs	r2, #12
 8003d38:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d3a:	f017 0f20 	tst.w	r7, #32
 8003d3e:	d002      	beq.n	8003d46 <HAL_ADC_IRQHandler+0xee>
 8003d40:	f015 0f20 	tst.w	r5, #32
 8003d44:	d105      	bne.n	8003d52 <HAL_ADC_IRQHandler+0xfa>
 8003d46:	f017 0f40 	tst.w	r7, #64	; 0x40
 8003d4a:	d05c      	beq.n	8003e06 <HAL_ADC_IRQHandler+0x1ae>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d4c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d50:	d059      	beq.n	8003e06 <HAL_ADC_IRQHandler+0x1ae>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003d54:	f013 0f10 	tst.w	r3, #16
 8003d58:	d103      	bne.n	8003d62 <HAL_ADC_IRQHandler+0x10a>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d5a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003d5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d60:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003d62:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003d64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d66:	f412 7fc0 	tst.w	r2, #384	; 0x180
 8003d6a:	d112      	bne.n	8003d92 <HAL_ADC_IRQHandler+0x13a>
 8003d6c:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003d74:	d10f      	bne.n	8003d96 <HAL_ADC_IRQHandler+0x13e>
 8003d76:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d78:	4a5b      	ldr	r2, [pc, #364]	; (8003ee8 <HAL_ADC_IRQHandler+0x290>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00d      	beq.n	8003d9a <HAL_ADC_IRQHandler+0x142>
 8003d7e:	461a      	mov	r2, r3
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00d      	beq.n	8003da0 <HAL_ADC_IRQHandler+0x148>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d84:	b166      	cbz	r6, 8003da0 <HAL_ADC_IRQHandler+0x148>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003d86:	2e06      	cmp	r6, #6
 8003d88:	d00a      	beq.n	8003da0 <HAL_ADC_IRQHandler+0x148>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003d8a:	2e07      	cmp	r6, #7
 8003d8c:	d008      	beq.n	8003da0 <HAL_ADC_IRQHandler+0x148>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003d8e:	68d2      	ldr	r2, [r2, #12]
 8003d90:	e007      	b.n	8003da2 <HAL_ADC_IRQHandler+0x14a>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003d92:	2100      	movs	r1, #0
 8003d94:	e7eb      	b.n	8003d6e <HAL_ADC_IRQHandler+0x116>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003d96:	2000      	movs	r0, #0
 8003d98:	e7ee      	b.n	8003d78 <HAL_ADC_IRQHandler+0x120>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003d9e:	e7ef      	b.n	8003d80 <HAL_ADC_IRQHandler+0x128>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003da0:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003da2:	b351      	cbz	r1, 8003dfa <HAL_ADC_IRQHandler+0x1a2>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003da4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003da8:	d003      	beq.n	8003db2 <HAL_ADC_IRQHandler+0x15a>
 8003daa:	b330      	cbz	r0, 8003dfa <HAL_ADC_IRQHandler+0x1a2>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003dac:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8003db0:	d123      	bne.n	8003dfa <HAL_ADC_IRQHandler+0x1a2>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003db2:	6819      	ldr	r1, [r3, #0]
 8003db4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003db8:	d01f      	beq.n	8003dfa <HAL_ADC_IRQHandler+0x1a2>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003dba:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8003dbe:	d11c      	bne.n	8003dfa <HAL_ADC_IRQHandler+0x1a2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	f012 0f08 	tst.w	r2, #8
 8003dc6:	d110      	bne.n	8003dea <HAL_ADC_IRQHandler+0x192>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dce:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003dd0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003dd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dd6:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003dd8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003dda:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003dde:	d10c      	bne.n	8003dfa <HAL_ADC_IRQHandler+0x1a2>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003de0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003de8:	e007      	b.n	8003dfa <HAL_ADC_IRQHandler+0x1a2>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003dec:	f043 0310 	orr.w	r3, r3, #16
 8003df0:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f000 fc20 	bl	8004640 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	2260      	movs	r2, #96	; 0x60
 8003e04:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003e06:	f017 0f80 	tst.w	r7, #128	; 0x80
 8003e0a:	d002      	beq.n	8003e12 <HAL_ADC_IRQHandler+0x1ba>
 8003e0c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003e10:	d12f      	bne.n	8003e72 <HAL_ADC_IRQHandler+0x21a>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003e12:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003e16:	d002      	beq.n	8003e1e <HAL_ADC_IRQHandler+0x1c6>
 8003e18:	f415 7f80 	tst.w	r5, #256	; 0x100
 8003e1c:	d134      	bne.n	8003e88 <HAL_ADC_IRQHandler+0x230>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003e1e:	f417 7f00 	tst.w	r7, #512	; 0x200
 8003e22:	d002      	beq.n	8003e2a <HAL_ADC_IRQHandler+0x1d2>
 8003e24:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003e28:	d13a      	bne.n	8003ea0 <HAL_ADC_IRQHandler+0x248>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003e2a:	f017 0f10 	tst.w	r7, #16
 8003e2e:	d019      	beq.n	8003e64 <HAL_ADC_IRQHandler+0x20c>
 8003e30:	f015 0f10 	tst.w	r5, #16
 8003e34:	d016      	beq.n	8003e64 <HAL_ADC_IRQHandler+0x20c>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003e36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e38:	b133      	cbz	r3, 8003e48 <HAL_ADC_IRQHandler+0x1f0>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003e3a:	2e00      	cmp	r6, #0
 8003e3c:	d03c      	beq.n	8003eb8 <HAL_ADC_IRQHandler+0x260>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003e3e:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <HAL_ADC_IRQHandler+0x28c>)
 8003e40:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003e42:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8003e46:	d00a      	beq.n	8003e5e <HAL_ADC_IRQHandler+0x206>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003e48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e4e:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e50:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e52:	f043 0302 	orr.w	r3, r3, #2
 8003e56:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f7ff fefb 	bl	8003c54 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	2210      	movs	r2, #16
 8003e62:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003e64:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8003e68:	d002      	beq.n	8003e70 <HAL_ADC_IRQHandler+0x218>
 8003e6a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003e6e:	d129      	bne.n	8003ec4 <HAL_ADC_IRQHandler+0x26c>
}
 8003e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e72:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e78:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f7ff fee9 	bl	8003c52 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	2280      	movs	r2, #128	; 0x80
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e7c4      	b.n	8003e12 <HAL_ADC_IRQHandler+0x1ba>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003e88:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8e:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003e90:	4620      	mov	r0, r4
 8003e92:	f000 fbd7 	bl	8004644 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e7be      	b.n	8003e1e <HAL_ADC_IRQHandler+0x1c6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ea0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ea2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea6:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	f000 fbcc 	bl	8004646 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	e7b8      	b.n	8003e2a <HAL_ADC_IRQHandler+0x1d2>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f013 0f01 	tst.w	r3, #1
 8003ec0:	d0cd      	beq.n	8003e5e <HAL_ADC_IRQHandler+0x206>
 8003ec2:	e7c1      	b.n	8003e48 <HAL_ADC_IRQHandler+0x1f0>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003ec4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eca:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003ecc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003ece:	f043 0308 	orr.w	r3, r3, #8
 8003ed2:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003eda:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003edc:	4620      	mov	r0, r4
 8003ede:	f000 fbb0 	bl	8004642 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8003ee2:	e7c5      	b.n	8003e70 <HAL_ADC_IRQHandler+0x218>
 8003ee4:	50000300 	.word	0x50000300
 8003ee8:	50000100 	.word	0x50000100

08003eec <ADC_DMAConvCplt>:
{
 8003eec:	b508      	push	{r3, lr}
 8003eee:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ef2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003ef4:	f012 0f50 	tst.w	r2, #80	; 0x50
 8003ef8:	d130      	bne.n	8003f5c <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003efa:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003efc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f00:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003f02:	6803      	ldr	r3, [r0, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	f012 0f08 	tst.w	r2, #8
 8003f0a:	d014      	beq.n	8003f36 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003f12:	d120      	bne.n	8003f56 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003f1a:	d11c      	bne.n	8003f56 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f1c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003f1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f22:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f24:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003f26:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003f2a:	d114      	bne.n	8003f56 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f2c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	65c3      	str	r3, [r0, #92]	; 0x5c
 8003f34:	e00f      	b.n	8003f56 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f013 0f02 	tst.w	r3, #2
 8003f3c:	d10b      	bne.n	8003f56 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f3e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f44:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f46:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003f48:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003f4c:	d103      	bne.n	8003f56 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f4e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8003f56:	f7fe ff49 	bl	8002dec <HAL_ADC_ConvCpltCallback>
}
 8003f5a:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f5c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003f5e:	f012 0f10 	tst.w	r2, #16
 8003f62:	d104      	bne.n	8003f6e <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f64:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003f66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f68:	4618      	mov	r0, r3
 8003f6a:	4790      	blx	r2
}
 8003f6c:	e7f5      	b.n	8003f5a <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8003f6e:	f7ff fe71 	bl	8003c54 <HAL_ADC_ErrorCallback>
 8003f72:	e7f2      	b.n	8003f5a <ADC_DMAConvCplt+0x6e>

08003f74 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f74:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f76:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f78:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f7e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f80:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f88:	f7ff fe64 	bl	8003c54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f8c:	bd08      	pop	{r3, pc}
	...

08003f90 <HAL_ADC_ConfigChannel>:
{
 8003f90:	b4f0      	push	{r4, r5, r6, r7}
 8003f92:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8003f94:	2200      	movs	r2, #0
 8003f96:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003f98:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8003f9c:	2a01      	cmp	r2, #1
 8003f9e:	f000 8256 	beq.w	800444e <HAL_ADC_ConfigChannel+0x4be>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003faa:	6806      	ldr	r6, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fac:	68b0      	ldr	r0, [r6, #8]
 8003fae:	f010 0f04 	tst.w	r0, #4
 8003fb2:	d00a      	beq.n	8003fca <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fb6:	f042 0220 	orr.w	r2, r2, #32
 8003fba:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003fbc:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8003fc4:	b002      	add	sp, #8
 8003fc6:	bcf0      	pop	{r4, r5, r6, r7}
 8003fc8:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003fca:	684d      	ldr	r5, [r1, #4]
 8003fcc:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003fce:	3630      	adds	r6, #48	; 0x30
 8003fd0:	0a2a      	lsrs	r2, r5, #8
 8003fd2:	0092      	lsls	r2, r2, #2
 8003fd4:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8003fd8:	58b0      	ldr	r0, [r6, r2]
 8003fda:	f005 051f 	and.w	r5, r5, #31
 8003fde:	271f      	movs	r7, #31
 8003fe0:	40af      	lsls	r7, r5
 8003fe2:	ea20 0007 	bic.w	r0, r0, r7
 8003fe6:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003fea:	40ac      	lsls	r4, r5
 8003fec:	4320      	orrs	r0, r4
 8003fee:	50b0      	str	r0, [r6, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ff0:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ff2:	6882      	ldr	r2, [r0, #8]
 8003ff4:	f012 0204 	ands.w	r2, r2, #4
 8003ff8:	d000      	beq.n	8003ffc <HAL_ADC_ConfigChannel+0x6c>
 8003ffa:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ffc:	6884      	ldr	r4, [r0, #8]
 8003ffe:	f014 0408 	ands.w	r4, r4, #8
 8004002:	d000      	beq.n	8004006 <HAL_ADC_ConfigChannel+0x76>
 8004004:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004006:	2a00      	cmp	r2, #0
 8004008:	d14d      	bne.n	80040a6 <HAL_ADC_ConfigChannel+0x116>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800400a:	2c00      	cmp	r4, #0
 800400c:	d14b      	bne.n	80040a6 <HAL_ADC_ConfigChannel+0x116>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800400e:	688d      	ldr	r5, [r1, #8]
 8004010:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8004014:	d07e      	beq.n	8004114 <HAL_ADC_ConfigChannel+0x184>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004016:	680f      	ldr	r7, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004018:	3014      	adds	r0, #20
 800401a:	0e7a      	lsrs	r2, r7, #25
 800401c:	0092      	lsls	r2, r2, #2
 800401e:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8004022:	5886      	ldr	r6, [r0, r2]
 8004024:	f3c7 5704 	ubfx	r7, r7, #20, #5
 8004028:	f04f 0c07 	mov.w	ip, #7
 800402c:	fa0c fc07 	lsl.w	ip, ip, r7
 8004030:	ea26 060c 	bic.w	r6, r6, ip
 8004034:	40bd      	lsls	r5, r7
 8004036:	4335      	orrs	r5, r6
 8004038:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800403a:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800403c:	6942      	ldr	r2, [r0, #20]
 800403e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004042:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004044:	694d      	ldr	r5, [r1, #20]
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	68c2      	ldr	r2, [r0, #12]
 800404a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800404e:	0052      	lsls	r2, r2, #1
 8004050:	fa05 f202 	lsl.w	r2, r5, r2
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004054:	690e      	ldr	r6, [r1, #16]
 8004056:	2e04      	cmp	r6, #4
 8004058:	d074      	beq.n	8004144 <HAL_ADC_ConfigChannel+0x1b4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800405a:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 800405c:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8004060:	4da6      	ldr	r5, [pc, #664]	; (80042fc <HAL_ADC_ConfigChannel+0x36c>)
 8004062:	403d      	ands	r5, r7
 8004064:	680f      	ldr	r7, [r1, #0]
 8004066:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 800406a:	433a      	orrs	r2, r7
 800406c:	4315      	orrs	r5, r2
 800406e:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8004072:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	690e      	ldr	r6, [r1, #16]
 800407a:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800407c:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 800407e:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 8004082:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8004086:	4328      	orrs	r0, r5
 8004088:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	690d      	ldr	r5, [r1, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004090:	7f08      	ldrb	r0, [r1, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004092:	2801      	cmp	r0, #1
 8004094:	d053      	beq.n	800413e <HAL_ADC_ConfigChannel+0x1ae>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004096:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8004098:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800409c:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80040a0:	4304      	orrs	r4, r0
 80040a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040a6:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040a8:	6882      	ldr	r2, [r0, #8]
 80040aa:	f012 0f01 	tst.w	r2, #1
 80040ae:	d116      	bne.n	80040de <HAL_ADC_ConfigChannel+0x14e>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80040b0:	680a      	ldr	r2, [r1, #0]
 80040b2:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80040b4:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80040b8:	f3c2 0612 	ubfx	r6, r2, #0, #19
 80040bc:	ea24 0406 	bic.w	r4, r4, r6
 80040c0:	f005 0618 	and.w	r6, r5, #24
 80040c4:	4d8e      	ldr	r5, [pc, #568]	; (8004300 <HAL_ADC_ConfigChannel+0x370>)
 80040c6:	40f5      	lsrs	r5, r6
 80040c8:	402a      	ands	r2, r5
 80040ca:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80040ce:	4322      	orrs	r2, r4
 80040d0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040d4:	68c8      	ldr	r0, [r1, #12]
 80040d6:	4a8b      	ldr	r2, [pc, #556]	; (8004304 <HAL_ADC_ConfigChannel+0x374>)
 80040d8:	4290      	cmp	r0, r2
 80040da:	f000 809b 	beq.w	8004214 <HAL_ADC_ConfigChannel+0x284>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040de:	680a      	ldr	r2, [r1, #0]
 80040e0:	4989      	ldr	r1, [pc, #548]	; (8004308 <HAL_ADC_ConfigChannel+0x378>)
 80040e2:	420a      	tst	r2, r1
 80040e4:	f000 81ab 	beq.w	800443e <HAL_ADC_ConfigChannel+0x4ae>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80040e8:	4988      	ldr	r1, [pc, #544]	; (800430c <HAL_ADC_ConfigChannel+0x37c>)
 80040ea:	6889      	ldr	r1, [r1, #8]
 80040ec:	f001 70e0 	and.w	r0, r1, #29360128	; 0x1c00000
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80040f0:	4c87      	ldr	r4, [pc, #540]	; (8004310 <HAL_ADC_ConfigChannel+0x380>)
 80040f2:	42a2      	cmp	r2, r4
 80040f4:	f000 815a 	beq.w	80043ac <HAL_ADC_ConfigChannel+0x41c>
 80040f8:	4c86      	ldr	r4, [pc, #536]	; (8004314 <HAL_ADC_ConfigChannel+0x384>)
 80040fa:	42a2      	cmp	r2, r4
 80040fc:	f000 8156 	beq.w	80043ac <HAL_ADC_ConfigChannel+0x41c>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004100:	4c85      	ldr	r4, [pc, #532]	; (8004318 <HAL_ADC_ConfigChannel+0x388>)
 8004102:	42a2      	cmp	r2, r4
 8004104:	f000 8178 	beq.w	80043f8 <HAL_ADC_ConfigChannel+0x468>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004108:	4c84      	ldr	r4, [pc, #528]	; (800431c <HAL_ADC_ConfigChannel+0x38c>)
 800410a:	42a2      	cmp	r2, r4
 800410c:	f000 8186 	beq.w	800441c <HAL_ADC_ConfigChannel+0x48c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004110:	2000      	movs	r0, #0
 8004112:	e754      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004114:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004116:	3014      	adds	r0, #20
 8004118:	0e6a      	lsrs	r2, r5, #25
 800411a:	0092      	lsls	r2, r2, #2
 800411c:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8004120:	5886      	ldr	r6, [r0, r2]
 8004122:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8004126:	2707      	movs	r7, #7
 8004128:	fa07 f505 	lsl.w	r5, r7, r5
 800412c:	ea26 0505 	bic.w	r5, r6, r5
 8004130:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004132:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004134:	6942      	ldr	r2, [r0, #20]
 8004136:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800413a:	6142      	str	r2, [r0, #20]
}
 800413c:	e782      	b.n	8004044 <HAL_ADC_ConfigChannel+0xb4>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800413e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8004142:	e7a8      	b.n	8004096 <HAL_ADC_ConfigChannel+0x106>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004144:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004146:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004148:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800414c:	680a      	ldr	r2, [r1, #0]
 800414e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8004152:	bb85      	cbnz	r5, 80041b6 <HAL_ADC_ConfigChannel+0x226>
 8004154:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004158:	4294      	cmp	r4, r2
 800415a:	d034      	beq.n	80041c6 <HAL_ADC_ConfigChannel+0x236>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800415c:	681c      	ldr	r4, [r3, #0]
 800415e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004160:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004162:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004166:	680a      	ldr	r2, [r1, #0]
 8004168:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800416c:	bb85      	cbnz	r5, 80041d0 <HAL_ADC_ConfigChannel+0x240>
 800416e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004172:	4290      	cmp	r0, r2
 8004174:	d034      	beq.n	80041e0 <HAL_ADC_ConfigChannel+0x250>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004176:	681c      	ldr	r4, [r3, #0]
 8004178:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800417a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800417c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004180:	680a      	ldr	r2, [r1, #0]
 8004182:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8004186:	bb85      	cbnz	r5, 80041ea <HAL_ADC_ConfigChannel+0x25a>
 8004188:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800418c:	4290      	cmp	r0, r2
 800418e:	d034      	beq.n	80041fa <HAL_ADC_ConfigChannel+0x26a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004190:	681c      	ldr	r4, [r3, #0]
 8004192:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004194:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004196:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800419a:	680a      	ldr	r2, [r1, #0]
 800419c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80041a0:	bb85      	cbnz	r5, 8004204 <HAL_ADC_ConfigChannel+0x274>
 80041a2:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041a6:	4290      	cmp	r0, r2
 80041a8:	f47f af7d 	bne.w	80040a6 <HAL_ADC_ConfigChannel+0x116>
  MODIFY_REG(*preg,
 80041ac:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80041ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041b2:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 80041b4:	e777      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x116>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041ba:	b112      	cbz	r2, 80041c2 <HAL_ADC_ConfigChannel+0x232>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80041bc:	fab2 f282 	clz	r2, r2
 80041c0:	e7ca      	b.n	8004158 <HAL_ADC_ConfigChannel+0x1c8>
    return 32U;
 80041c2:	2220      	movs	r2, #32
 80041c4:	e7c8      	b.n	8004158 <HAL_ADC_ConfigChannel+0x1c8>
  MODIFY_REG(*preg,
 80041c6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80041c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041cc:	6602      	str	r2, [r0, #96]	; 0x60
}
 80041ce:	e7c5      	b.n	800415c <HAL_ADC_ConfigChannel+0x1cc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80041d4:	b112      	cbz	r2, 80041dc <HAL_ADC_ConfigChannel+0x24c>
  return __builtin_clz(value);
 80041d6:	fab2 f282 	clz	r2, r2
 80041da:	e7ca      	b.n	8004172 <HAL_ADC_ConfigChannel+0x1e2>
    return 32U;
 80041dc:	2220      	movs	r2, #32
 80041de:	e7c8      	b.n	8004172 <HAL_ADC_ConfigChannel+0x1e2>
  MODIFY_REG(*preg,
 80041e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041e6:	6662      	str	r2, [r4, #100]	; 0x64
}
 80041e8:	e7c5      	b.n	8004176 <HAL_ADC_ConfigChannel+0x1e6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80041ee:	b112      	cbz	r2, 80041f6 <HAL_ADC_ConfigChannel+0x266>
  return __builtin_clz(value);
 80041f0:	fab2 f282 	clz	r2, r2
 80041f4:	e7ca      	b.n	800418c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80041f6:	2220      	movs	r2, #32
 80041f8:	e7c8      	b.n	800418c <HAL_ADC_ConfigChannel+0x1fc>
  MODIFY_REG(*preg,
 80041fa:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80041fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004200:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8004202:	e7c5      	b.n	8004190 <HAL_ADC_ConfigChannel+0x200>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004204:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004208:	b112      	cbz	r2, 8004210 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800420a:	fab2 f282 	clz	r2, r2
 800420e:	e7ca      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x216>
    return 32U;
 8004210:	2220      	movs	r2, #32
 8004212:	e7c8      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x216>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004214:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004216:	680a      	ldr	r2, [r1, #0]
 8004218:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800421c:	2e00      	cmp	r6, #0
 800421e:	d135      	bne.n	800428c <HAL_ADC_ConfigChannel+0x2fc>
 8004220:	0e90      	lsrs	r0, r2, #26
 8004222:	3001      	adds	r0, #1
 8004224:	f000 001f 	and.w	r0, r0, #31
 8004228:	2809      	cmp	r0, #9
 800422a:	bf8c      	ite	hi
 800422c:	2000      	movhi	r0, #0
 800422e:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004230:	2800      	cmp	r0, #0
 8004232:	d075      	beq.n	8004320 <HAL_ADC_ConfigChannel+0x390>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004234:	2e00      	cmp	r6, #0
 8004236:	d138      	bne.n	80042aa <HAL_ADC_ConfigChannel+0x31a>
 8004238:	0e94      	lsrs	r4, r2, #26
 800423a:	3401      	adds	r4, #1
 800423c:	06a4      	lsls	r4, r4, #26
 800423e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004242:	2e00      	cmp	r6, #0
 8004244:	d13d      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x332>
 8004246:	0e90      	lsrs	r0, r2, #26
 8004248:	3001      	adds	r0, #1
 800424a:	f000 071f 	and.w	r7, r0, #31
 800424e:	2001      	movs	r0, #1
 8004250:	40b8      	lsls	r0, r7
 8004252:	4304      	orrs	r4, r0
 8004254:	2e00      	cmp	r6, #0
 8004256:	d142      	bne.n	80042de <HAL_ADC_ConfigChannel+0x34e>
 8004258:	0e92      	lsrs	r2, r2, #26
 800425a:	3201      	adds	r2, #1
 800425c:	f002 021f 	and.w	r2, r2, #31
 8004260:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004264:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004266:	4322      	orrs	r2, r4
 8004268:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800426a:	3514      	adds	r5, #20
 800426c:	0e50      	lsrs	r0, r2, #25
 800426e:	0080      	lsls	r0, r0, #2
 8004270:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8004274:	582e      	ldr	r6, [r5, r0]
 8004276:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800427a:	2707      	movs	r7, #7
 800427c:	4097      	lsls	r7, r2
 800427e:	ea26 0607 	bic.w	r6, r6, r7
 8004282:	fa04 f202 	lsl.w	r2, r4, r2
 8004286:	4332      	orrs	r2, r6
 8004288:	502a      	str	r2, [r5, r0]
}
 800428a:	e728      	b.n	80040de <HAL_ADC_ConfigChannel+0x14e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8004290:	b148      	cbz	r0, 80042a6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004292:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004296:	3001      	adds	r0, #1
 8004298:	f000 001f 	and.w	r0, r0, #31
 800429c:	2809      	cmp	r0, #9
 800429e:	bf8c      	ite	hi
 80042a0:	2000      	movhi	r0, #0
 80042a2:	2001      	movls	r0, #1
 80042a4:	e7c4      	b.n	8004230 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80042a6:	2020      	movs	r0, #32
 80042a8:	e7f5      	b.n	8004296 <HAL_ADC_ConfigChannel+0x306>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042aa:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 80042ae:	b134      	cbz	r4, 80042be <HAL_ADC_ConfigChannel+0x32e>
  return __builtin_clz(value);
 80042b0:	fab4 f484 	clz	r4, r4
 80042b4:	3401      	adds	r4, #1
 80042b6:	06a4      	lsls	r4, r4, #26
 80042b8:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80042bc:	e7c1      	b.n	8004242 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80042be:	2420      	movs	r4, #32
 80042c0:	e7f8      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x324>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c2:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80042c6:	b140      	cbz	r0, 80042da <HAL_ADC_ConfigChannel+0x34a>
  return __builtin_clz(value);
 80042c8:	fab0 f080 	clz	r0, r0
 80042cc:	3001      	adds	r0, #1
 80042ce:	f000 001f 	and.w	r0, r0, #31
 80042d2:	2701      	movs	r7, #1
 80042d4:	fa07 f000 	lsl.w	r0, r7, r0
 80042d8:	e7bb      	b.n	8004252 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80042da:	2020      	movs	r0, #32
 80042dc:	e7f6      	b.n	80042cc <HAL_ADC_ConfigChannel+0x33c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80042e2:	b142      	cbz	r2, 80042f6 <HAL_ADC_ConfigChannel+0x366>
  return __builtin_clz(value);
 80042e4:	fab2 f282 	clz	r2, r2
 80042e8:	3201      	adds	r2, #1
 80042ea:	f002 021f 	and.w	r2, r2, #31
 80042ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80042f2:	0512      	lsls	r2, r2, #20
 80042f4:	e7b7      	b.n	8004266 <HAL_ADC_ConfigChannel+0x2d6>
    return 32U;
 80042f6:	2220      	movs	r2, #32
 80042f8:	e7f6      	b.n	80042e8 <HAL_ADC_ConfigChannel+0x358>
 80042fa:	bf00      	nop
 80042fc:	03fff000 	.word	0x03fff000
 8004300:	0007ffff 	.word	0x0007ffff
 8004304:	407f0000 	.word	0x407f0000
 8004308:	80080000 	.word	0x80080000
 800430c:	50000300 	.word	0x50000300
 8004310:	c3210000 	.word	0xc3210000
 8004314:	90c00010 	.word	0x90c00010
 8004318:	c7520000 	.word	0xc7520000
 800431c:	cb840000 	.word	0xcb840000
 8004320:	b9ce      	cbnz	r6, 8004356 <HAL_ADC_ConfigChannel+0x3c6>
 8004322:	0e94      	lsrs	r4, r2, #26
 8004324:	3401      	adds	r4, #1
 8004326:	06a4      	lsls	r4, r4, #26
 8004328:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800432c:	b9fe      	cbnz	r6, 800436e <HAL_ADC_ConfigChannel+0x3de>
 800432e:	0e90      	lsrs	r0, r2, #26
 8004330:	3001      	adds	r0, #1
 8004332:	f000 071f 	and.w	r7, r0, #31
 8004336:	2001      	movs	r0, #1
 8004338:	40b8      	lsls	r0, r7
 800433a:	4304      	orrs	r4, r0
 800433c:	bb2e      	cbnz	r6, 800438a <HAL_ADC_ConfigChannel+0x3fa>
 800433e:	0e90      	lsrs	r0, r2, #26
 8004340:	3001      	adds	r0, #1
 8004342:	f000 001f 	and.w	r0, r0, #31
 8004346:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800434a:	3a1e      	subs	r2, #30
 800434c:	0512      	lsls	r2, r2, #20
 800434e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004352:	4322      	orrs	r2, r4
 8004354:	e788      	b.n	8004268 <HAL_ADC_ConfigChannel+0x2d8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 800435a:	b134      	cbz	r4, 800436a <HAL_ADC_ConfigChannel+0x3da>
  return __builtin_clz(value);
 800435c:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004360:	3401      	adds	r4, #1
 8004362:	06a4      	lsls	r4, r4, #26
 8004364:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004368:	e7e0      	b.n	800432c <HAL_ADC_ConfigChannel+0x39c>
    return 32U;
 800436a:	2420      	movs	r4, #32
 800436c:	e7f8      	b.n	8004360 <HAL_ADC_ConfigChannel+0x3d0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8004372:	b140      	cbz	r0, 8004386 <HAL_ADC_ConfigChannel+0x3f6>
  return __builtin_clz(value);
 8004374:	fab0 f080 	clz	r0, r0
 8004378:	3001      	adds	r0, #1
 800437a:	f000 001f 	and.w	r0, r0, #31
 800437e:	2701      	movs	r7, #1
 8004380:	fa07 f000 	lsl.w	r0, r7, r0
 8004384:	e7d9      	b.n	800433a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004386:	2020      	movs	r0, #32
 8004388:	e7f6      	b.n	8004378 <HAL_ADC_ConfigChannel+0x3e8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800438e:	b15a      	cbz	r2, 80043a8 <HAL_ADC_ConfigChannel+0x418>
  return __builtin_clz(value);
 8004390:	fab2 f082 	clz	r0, r2
 8004394:	3001      	adds	r0, #1
 8004396:	f000 001f 	and.w	r0, r0, #31
 800439a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800439e:	3a1e      	subs	r2, #30
 80043a0:	0512      	lsls	r2, r2, #20
 80043a2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80043a6:	e7d4      	b.n	8004352 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80043a8:	2020      	movs	r0, #32
 80043aa:	e7f3      	b.n	8004394 <HAL_ADC_ConfigChannel+0x404>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043ac:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 80043b0:	f47f aea6 	bne.w	8004100 <HAL_ADC_ConfigChannel+0x170>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80043ba:	d001      	beq.n	80043c0 <HAL_ADC_ConfigChannel+0x430>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043bc:	2000      	movs	r0, #0
 80043be:	e5fe      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80043c4:	4923      	ldr	r1, [pc, #140]	; (8004454 <HAL_ADC_ConfigChannel+0x4c4>)
 80043c6:	688a      	ldr	r2, [r1, #8]
 80043c8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80043cc:	4310      	orrs	r0, r2
 80043ce:	6088      	str	r0, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043d0:	4a21      	ldr	r2, [pc, #132]	; (8004458 <HAL_ADC_ConfigChannel+0x4c8>)
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	0992      	lsrs	r2, r2, #6
 80043d6:	4921      	ldr	r1, [pc, #132]	; (800445c <HAL_ADC_ConfigChannel+0x4cc>)
 80043d8:	fba1 1202 	umull	r1, r2, r1, r2
 80043dc:	0992      	lsrs	r2, r2, #6
 80043de:	3201      	adds	r2, #1
 80043e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80043e4:	0092      	lsls	r2, r2, #2
 80043e6:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80043e8:	9a01      	ldr	r2, [sp, #4]
 80043ea:	b11a      	cbz	r2, 80043f4 <HAL_ADC_ConfigChannel+0x464>
            wait_loop_index--;
 80043ec:	9a01      	ldr	r2, [sp, #4]
 80043ee:	3a01      	subs	r2, #1
 80043f0:	9201      	str	r2, [sp, #4]
 80043f2:	e7f9      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x458>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f4:	2000      	movs	r0, #0
 80043f6:	e5e2      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x2e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043f8:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 80043fc:	f47f ae84 	bne.w	8004108 <HAL_ADC_ConfigChannel+0x178>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004400:	6819      	ldr	r1, [r3, #0]
 8004402:	4a17      	ldr	r2, [pc, #92]	; (8004460 <HAL_ADC_ConfigChannel+0x4d0>)
 8004404:	4291      	cmp	r1, r2
 8004406:	d01c      	beq.n	8004442 <HAL_ADC_ConfigChannel+0x4b2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004408:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 800440c:	4911      	ldr	r1, [pc, #68]	; (8004454 <HAL_ADC_ConfigChannel+0x4c4>)
 800440e:	688a      	ldr	r2, [r1, #8]
 8004410:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004414:	4310      	orrs	r0, r2
 8004416:	6088      	str	r0, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004418:	2000      	movs	r0, #0
}
 800441a:	e5d0      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x2e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800441c:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8004420:	d111      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x4b6>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004422:	6819      	ldr	r1, [r3, #0]
 8004424:	4a0e      	ldr	r2, [pc, #56]	; (8004460 <HAL_ADC_ConfigChannel+0x4d0>)
 8004426:	4291      	cmp	r1, r2
 8004428:	d00f      	beq.n	800444a <HAL_ADC_ConfigChannel+0x4ba>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800442a:	f440 0280 	orr.w	r2, r0, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800442e:	4809      	ldr	r0, [pc, #36]	; (8004454 <HAL_ADC_ConfigChannel+0x4c4>)
 8004430:	6881      	ldr	r1, [r0, #8]
 8004432:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004436:	430a      	orrs	r2, r1
 8004438:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800443a:	2000      	movs	r0, #0
}
 800443c:	e5bf      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x2e>
 800443e:	2000      	movs	r0, #0
 8004440:	e5bd      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x2e>
 8004442:	2000      	movs	r0, #0
 8004444:	e5bb      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x2e>
 8004446:	2000      	movs	r0, #0
 8004448:	e5b9      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x2e>
 800444a:	2000      	movs	r0, #0
 800444c:	e5b7      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 800444e:	2002      	movs	r0, #2
 8004450:	e5b8      	b.n	8003fc4 <HAL_ADC_ConfigChannel+0x34>
 8004452:	bf00      	nop
 8004454:	50000300 	.word	0x50000300
 8004458:	20000004 	.word	0x20000004
 800445c:	053e2d63 	.word	0x053e2d63
 8004460:	50000100 	.word	0x50000100

08004464 <ADC_Enable>:
{
 8004464:	b530      	push	{r4, r5, lr}
 8004466:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8004468:	2300      	movs	r3, #0
 800446a:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800446c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	f012 0f01 	tst.w	r2, #1
 8004474:	d157      	bne.n	8004526 <ADC_Enable+0xc2>
 8004476:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004478:	6899      	ldr	r1, [r3, #8]
 800447a:	4a2c      	ldr	r2, [pc, #176]	; (800452c <ADC_Enable+0xc8>)
 800447c:	4211      	tst	r1, r2
 800447e:	d11e      	bne.n	80044be <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004486:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004490:	4b27      	ldr	r3, [pc, #156]	; (8004530 <ADC_Enable+0xcc>)
 8004492:	689b      	ldr	r3, [r3, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004494:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004498:	d01b      	beq.n	80044d2 <ADC_Enable+0x6e>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800449a:	4b26      	ldr	r3, [pc, #152]	; (8004534 <ADC_Enable+0xd0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	099b      	lsrs	r3, r3, #6
 80044a0:	4a25      	ldr	r2, [pc, #148]	; (8004538 <ADC_Enable+0xd4>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	099b      	lsrs	r3, r3, #6
 80044a8:	3301      	adds	r3, #1
 80044aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80044b2:	9b01      	ldr	r3, [sp, #4]
 80044b4:	b16b      	cbz	r3, 80044d2 <ADC_Enable+0x6e>
        wait_loop_index--;
 80044b6:	9b01      	ldr	r3, [sp, #4]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	e7f9      	b.n	80044b2 <ADC_Enable+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044be:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80044c0:	f043 0310 	orr.w	r3, r3, #16
 80044c4:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044c6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 80044ce:	2001      	movs	r0, #1
 80044d0:	e02a      	b.n	8004528 <ADC_Enable+0xc4>
    tickstart = HAL_GetTick();
 80044d2:	f7ff fa83 	bl	80039dc <HAL_GetTick>
 80044d6:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	f012 0f01 	tst.w	r2, #1
 80044e0:	d11f      	bne.n	8004522 <ADC_Enable+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	f012 0f01 	tst.w	r2, #1
 80044e8:	d107      	bne.n	80044fa <ADC_Enable+0x96>
  MODIFY_REG(ADCx->CR,
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044f0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044fa:	f7ff fa6f 	bl	80039dc <HAL_GetTick>
 80044fe:	1b43      	subs	r3, r0, r5
 8004500:	2b02      	cmp	r3, #2
 8004502:	d9e9      	bls.n	80044d8 <ADC_Enable+0x74>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f013 0f01 	tst.w	r3, #1
 800450c:	d1e4      	bne.n	80044d8 <ADC_Enable+0x74>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800450e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004510:	f043 0310 	orr.w	r3, r3, #16
 8004514:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004516:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 800451e:	2001      	movs	r0, #1
 8004520:	e002      	b.n	8004528 <ADC_Enable+0xc4>
  return HAL_OK;
 8004522:	2000      	movs	r0, #0
 8004524:	e000      	b.n	8004528 <ADC_Enable+0xc4>
 8004526:	2000      	movs	r0, #0
}
 8004528:	b003      	add	sp, #12
 800452a:	bd30      	pop	{r4, r5, pc}
 800452c:	8000003f 	.word	0x8000003f
 8004530:	50000300 	.word	0x50000300
 8004534:	20000004 	.word	0x20000004
 8004538:	053e2d63 	.word	0x053e2d63

0800453c <HAL_ADC_Start_DMA>:
{
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800453e:	4b3b      	ldr	r3, [pc, #236]	; (800462c <HAL_ADC_Start_DMA+0xf0>)
 8004540:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004542:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f013 0f04 	tst.w	r3, #4
 800454a:	d16a      	bne.n	8004622 <HAL_ADC_Start_DMA+0xe6>
 800454c:	4604      	mov	r4, r0
 800454e:	460e      	mov	r6, r1
 8004550:	4617      	mov	r7, r2
 8004552:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 8004556:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800455a:	2b01      	cmp	r3, #1
 800455c:	d063      	beq.n	8004626 <HAL_ADC_Start_DMA+0xea>
 800455e:	2301      	movs	r3, #1
 8004560:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004564:	b145      	cbz	r5, 8004578 <HAL_ADC_Start_DMA+0x3c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004566:	2d05      	cmp	r5, #5
 8004568:	d006      	beq.n	8004578 <HAL_ADC_Start_DMA+0x3c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800456a:	2d09      	cmp	r5, #9
 800456c:	d004      	beq.n	8004578 <HAL_ADC_Start_DMA+0x3c>
      __HAL_UNLOCK(hadc);
 800456e:	2300      	movs	r3, #0
 8004570:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8004574:	2001      	movs	r0, #1
 8004576:	e055      	b.n	8004624 <HAL_ADC_Start_DMA+0xe8>
      tmp_hal_status = ADC_Enable(hadc);
 8004578:	4620      	mov	r0, r4
 800457a:	f7ff ff73 	bl	8004464 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800457e:	2800      	cmp	r0, #0
 8004580:	d14b      	bne.n	800461a <HAL_ADC_Start_DMA+0xde>
        ADC_STATE_CLR_SET(hadc->State,
 8004582:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004584:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004590:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	4a26      	ldr	r2, [pc, #152]	; (8004630 <HAL_ADC_Start_DMA+0xf4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d039      	beq.n	800460e <HAL_ADC_Start_DMA+0xd2>
 800459a:	461a      	mov	r2, r3
 800459c:	4293      	cmp	r3, r2
 800459e:	d000      	beq.n	80045a2 <HAL_ADC_Start_DMA+0x66>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045a0:	b91d      	cbnz	r5, 80045aa <HAL_ADC_Start_DMA+0x6e>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80045a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80045a8:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80045aa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80045ac:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80045b0:	d030      	beq.n	8004614 <HAL_ADC_Start_DMA+0xd8>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80045b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80045b4:	f023 0306 	bic.w	r3, r3, #6
 80045b8:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80045ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045bc:	4a1d      	ldr	r2, [pc, #116]	; (8004634 <HAL_ADC_Start_DMA+0xf8>)
 80045be:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80045c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045c2:	4a1d      	ldr	r2, [pc, #116]	; (8004638 <HAL_ADC_Start_DMA+0xfc>)
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045c8:	4a1c      	ldr	r2, [pc, #112]	; (800463c <HAL_ADC_Start_DMA+0x100>)
 80045ca:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	221c      	movs	r2, #28
 80045d0:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 80045d2:	2300      	movs	r3, #0
 80045d4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045d8:	6822      	ldr	r2, [r4, #0]
 80045da:	6853      	ldr	r3, [r2, #4]
 80045dc:	f043 0310 	orr.w	r3, r3, #16
 80045e0:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	68d3      	ldr	r3, [r2, #12]
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045ec:	6821      	ldr	r1, [r4, #0]
 80045ee:	463b      	mov	r3, r7
 80045f0:	4632      	mov	r2, r6
 80045f2:	3140      	adds	r1, #64	; 0x40
 80045f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045f6:	f000 f957 	bl	80048a8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80045fa:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80045fc:	6893      	ldr	r3, [r2, #8]
 80045fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004602:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004606:	f043 0304 	orr.w	r3, r3, #4
 800460a:	6093      	str	r3, [r2, #8]
}
 800460c:	e00a      	b.n	8004624 <HAL_ADC_Start_DMA+0xe8>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800460e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004612:	e7c3      	b.n	800459c <HAL_ADC_Start_DMA+0x60>
          ADC_CLEAR_ERRORCODE(hadc);
 8004614:	2300      	movs	r3, #0
 8004616:	6623      	str	r3, [r4, #96]	; 0x60
 8004618:	e7cf      	b.n	80045ba <HAL_ADC_Start_DMA+0x7e>
        __HAL_UNLOCK(hadc);
 800461a:	2300      	movs	r3, #0
 800461c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8004620:	e000      	b.n	8004624 <HAL_ADC_Start_DMA+0xe8>
    tmp_hal_status = HAL_BUSY;
 8004622:	2002      	movs	r0, #2
}
 8004624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8004626:	2002      	movs	r0, #2
 8004628:	e7fc      	b.n	8004624 <HAL_ADC_Start_DMA+0xe8>
 800462a:	bf00      	nop
 800462c:	50000300 	.word	0x50000300
 8004630:	50000100 	.word	0x50000100
 8004634:	08003eed 	.word	0x08003eed
 8004638:	08003c49 	.word	0x08003c49
 800463c:	08003f75 	.word	0x08003f75

08004640 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004640:	4770      	bx	lr

08004642 <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004642:	4770      	bx	lr

08004644 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004644:	4770      	bx	lr

08004646 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004646:	4770      	bx	lr

08004648 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004648:	4770      	bx	lr
	...

0800464c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800464c:	4a07      	ldr	r2, [pc, #28]	; (800466c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800464e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004650:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004654:	041b      	lsls	r3, r3, #16
 8004656:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004658:	0200      	lsls	r0, r0, #8
 800465a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800465e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004668:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800466a:	4770      	bx	lr
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004670:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004672:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <HAL_NVIC_SetPriority+0x60>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800467a:	f1c3 0407 	rsb	r4, r3, #7
 800467e:	2c04      	cmp	r4, #4
 8004680:	bf28      	it	cs
 8004682:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004684:	1d1d      	adds	r5, r3, #4
 8004686:	2d06      	cmp	r5, #6
 8004688:	d918      	bls.n	80046bc <HAL_NVIC_SetPriority+0x4c>
 800468a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800468c:	f04f 35ff 	mov.w	r5, #4294967295
 8004690:	fa05 f404 	lsl.w	r4, r5, r4
 8004694:	ea21 0104 	bic.w	r1, r1, r4
 8004698:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800469a:	fa05 f303 	lsl.w	r3, r5, r3
 800469e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80046a4:	2800      	cmp	r0, #0
 80046a6:	db0b      	blt.n	80046c0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a8:	0109      	lsls	r1, r1, #4
 80046aa:	b2c9      	uxtb	r1, r1
 80046ac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80046b0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80046b4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80046b8:	bc30      	pop	{r4, r5}
 80046ba:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046bc:	2300      	movs	r3, #0
 80046be:	e7e5      	b.n	800468c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c0:	f000 000f 	and.w	r0, r0, #15
 80046c4:	0109      	lsls	r1, r1, #4
 80046c6:	b2c9      	uxtb	r1, r1
 80046c8:	4b02      	ldr	r3, [pc, #8]	; (80046d4 <HAL_NVIC_SetPriority+0x64>)
 80046ca:	5419      	strb	r1, [r3, r0]
 80046cc:	e7f4      	b.n	80046b8 <HAL_NVIC_SetPriority+0x48>
 80046ce:	bf00      	nop
 80046d0:	e000ed00 	.word	0xe000ed00
 80046d4:	e000ed14 	.word	0xe000ed14

080046d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80046d8:	2800      	cmp	r0, #0
 80046da:	db07      	blt.n	80046ec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046dc:	f000 021f 	and.w	r2, r0, #31
 80046e0:	0940      	lsrs	r0, r0, #5
 80046e2:	2301      	movs	r3, #1
 80046e4:	4093      	lsls	r3, r2
 80046e6:	4a02      	ldr	r2, [pc, #8]	; (80046f0 <HAL_NVIC_EnableIRQ+0x18>)
 80046e8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	e000e100 	.word	0xe000e100

080046f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f4:	3801      	subs	r0, #1
 80046f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80046fa:	d20a      	bcs.n	8004712 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046fc:	4b06      	ldr	r3, [pc, #24]	; (8004718 <HAL_SYSTICK_Config+0x24>)
 80046fe:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004700:	4a06      	ldr	r2, [pc, #24]	; (800471c <HAL_SYSTICK_Config+0x28>)
 8004702:	21f0      	movs	r1, #240	; 0xf0
 8004704:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004708:	2000      	movs	r0, #0
 800470a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800470c:	2207      	movs	r2, #7
 800470e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004710:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004712:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	e000e010 	.word	0xe000e010
 800471c:	e000ed00 	.word	0xe000ed00

08004720 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004720:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004722:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8004724:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8004726:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004728:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800472a:	b114      	cbz	r4, 8004732 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800472c:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800472e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004730:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004732:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004734:	f004 051f 	and.w	r5, r4, #31
 8004738:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800473a:	2401      	movs	r4, #1
 800473c:	40ac      	lsls	r4, r5
 800473e:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004740:	6804      	ldr	r4, [r0, #0]
 8004742:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004744:	6883      	ldr	r3, [r0, #8]
 8004746:	2b10      	cmp	r3, #16
 8004748:	d005      	beq.n	8004756 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800474a:	6803      	ldr	r3, [r0, #0]
 800474c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800474e:	6803      	ldr	r3, [r0, #0]
 8004750:	60da      	str	r2, [r3, #12]
  }
}
 8004752:	bc70      	pop	{r4, r5, r6}
 8004754:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8004756:	6803      	ldr	r3, [r0, #0]
 8004758:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800475a:	6803      	ldr	r3, [r0, #0]
 800475c:	60d9      	str	r1, [r3, #12]
 800475e:	e7f8      	b.n	8004752 <DMA_SetConfig+0x32>

08004760 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004760:	6803      	ldr	r3, [r0, #0]
 8004762:	4a0c      	ldr	r2, [pc, #48]	; (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d813      	bhi.n	8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004768:	490b      	ldr	r1, [pc, #44]	; (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800476a:	b2db      	uxtb	r3, r3
 800476c:	3b08      	subs	r3, #8
 800476e:	4a0b      	ldr	r2, [pc, #44]	; (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 8004770:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004774:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004776:	f022 0203 	bic.w	r2, r2, #3
 800477a:	440a      	add	r2, r1
 800477c:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800477e:	4a08      	ldr	r2, [pc, #32]	; (80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8004780:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004782:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8004786:	2201      	movs	r2, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	6503      	str	r3, [r0, #80]	; 0x50
}
 800478e:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004790:	4904      	ldr	r1, [pc, #16]	; (80047a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8004792:	e7ea      	b.n	800476a <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8004794:	40020407 	.word	0x40020407
 8004798:	40020800 	.word	0x40020800
 800479c:	cccccccd 	.word	0xcccccccd
 80047a0:	40020880 	.word	0x40020880
 80047a4:	40020820 	.word	0x40020820

080047a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047a8:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047aa:	4a07      	ldr	r2, [pc, #28]	; (80047c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 80047ac:	441a      	add	r2, r3
 80047ae:	0092      	lsls	r2, r2, #2
 80047b0:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047b2:	4a06      	ldr	r2, [pc, #24]	; (80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80047b4:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80047b6:	3b01      	subs	r3, #1
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	2201      	movs	r2, #1
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	1000823f 	.word	0x1000823f
 80047cc:	40020940 	.word	0x40020940

080047d0 <HAL_DMA_Init>:
  if (hdma == NULL)
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d05b      	beq.n	800488c <HAL_DMA_Init+0xbc>
{
 80047d4:	b510      	push	{r4, lr}
 80047d6:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047d8:	6801      	ldr	r1, [r0, #0]
 80047da:	4b2d      	ldr	r3, [pc, #180]	; (8004890 <HAL_DMA_Init+0xc0>)
 80047dc:	4299      	cmp	r1, r3
 80047de:	d83d      	bhi.n	800485c <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80047e0:	4b2c      	ldr	r3, [pc, #176]	; (8004894 <HAL_DMA_Init+0xc4>)
 80047e2:	440b      	add	r3, r1
 80047e4:	4a2c      	ldr	r2, [pc, #176]	; (8004898 <HAL_DMA_Init+0xc8>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	091b      	lsrs	r3, r3, #4
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80047f0:	4b2a      	ldr	r3, [pc, #168]	; (800489c <HAL_DMA_Init+0xcc>)
 80047f2:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80047f4:	2302      	movs	r3, #2
 80047f6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 80047fa:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80047fc:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8004800:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8004804:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004806:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8004808:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800480a:	6920      	ldr	r0, [r4, #16]
 800480c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800480e:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004810:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004812:	69a0      	ldr	r0, [r4, #24]
 8004814:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004816:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004818:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800481a:	6a20      	ldr	r0, [r4, #32]
 800481c:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 800481e:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8004820:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004822:	4620      	mov	r0, r4
 8004824:	f7ff ff9c 	bl	8004760 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004828:	68a3      	ldr	r3, [r4, #8]
 800482a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800482e:	d020      	beq.n	8004872 <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004830:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004832:	7922      	ldrb	r2, [r4, #4]
 8004834:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004836:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004838:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800483a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800483c:	6863      	ldr	r3, [r4, #4]
 800483e:	3b01      	subs	r3, #1
 8004840:	2b03      	cmp	r3, #3
 8004842:	d919      	bls.n	8004878 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004848:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800484a:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800484c:	2000      	movs	r0, #0
 800484e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8004850:	2301      	movs	r3, #1
 8004852:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8004856:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800485a:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800485c:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <HAL_DMA_Init+0xd0>)
 800485e:	440b      	add	r3, r1
 8004860:	4a0d      	ldr	r2, [pc, #52]	; (8004898 <HAL_DMA_Init+0xc8>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	091b      	lsrs	r3, r3, #4
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800486c:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <HAL_DMA_Init+0xd4>)
 800486e:	6403      	str	r3, [r0, #64]	; 0x40
 8004870:	e7c0      	b.n	80047f4 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004872:	2300      	movs	r3, #0
 8004874:	6063      	str	r3, [r4, #4]
 8004876:	e7db      	b.n	8004830 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004878:	4620      	mov	r0, r4
 800487a:	f7ff ff95 	bl	80047a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800487e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004884:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004886:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	e7df      	b.n	800484c <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 800488c:	2001      	movs	r0, #1
}
 800488e:	4770      	bx	lr
 8004890:	40020407 	.word	0x40020407
 8004894:	bffdfff8 	.word	0xbffdfff8
 8004898:	cccccccd 	.word	0xcccccccd
 800489c:	40020000 	.word	0x40020000
 80048a0:	bffdfbf8 	.word	0xbffdfbf8
 80048a4:	40020400 	.word	0x40020400

080048a8 <HAL_DMA_Start_IT>:
{
 80048a8:	b538      	push	{r3, r4, r5, lr}
 80048aa:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80048ac:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80048b0:	2801      	cmp	r0, #1
 80048b2:	d041      	beq.n	8004938 <HAL_DMA_Start_IT+0x90>
 80048b4:	2001      	movs	r0, #1
 80048b6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80048ba:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 80048be:	b2c0      	uxtb	r0, r0
 80048c0:	2801      	cmp	r0, #1
 80048c2:	d004      	beq.n	80048ce <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 80048c4:	2300      	movs	r3, #0
 80048c6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 80048ca:	2002      	movs	r0, #2
}
 80048cc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80048ce:	2002      	movs	r0, #2
 80048d0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048d4:	2000      	movs	r0, #0
 80048d6:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80048d8:	6825      	ldr	r5, [r4, #0]
 80048da:	6828      	ldr	r0, [r5, #0]
 80048dc:	f020 0001 	bic.w	r0, r0, #1
 80048e0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048e2:	4620      	mov	r0, r4
 80048e4:	f7ff ff1c 	bl	8004720 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80048e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048ea:	b1d3      	cbz	r3, 8004922 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ec:	6822      	ldr	r2, [r4, #0]
 80048ee:	6813      	ldr	r3, [r2, #0]
 80048f0:	f043 030e 	orr.w	r3, r3, #14
 80048f4:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80048f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80048fe:	d003      	beq.n	8004908 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004906:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8004908:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800490a:	b11b      	cbz	r3, 8004914 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004912:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004914:	6822      	ldr	r2, [r4, #0]
 8004916:	6813      	ldr	r3, [r2, #0]
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800491e:	2000      	movs	r0, #0
 8004920:	e7d4      	b.n	80048cc <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	6813      	ldr	r3, [r2, #0]
 8004926:	f023 0304 	bic.w	r3, r3, #4
 800492a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800492c:	6822      	ldr	r2, [r4, #0]
 800492e:	6813      	ldr	r3, [r2, #0]
 8004930:	f043 030a 	orr.w	r3, r3, #10
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	e7de      	b.n	80048f6 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8004938:	2002      	movs	r0, #2
 800493a:	e7c7      	b.n	80048cc <HAL_DMA_Start_IT+0x24>

0800493c <HAL_DMA_Abort>:
{
 800493c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800493e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	2a02      	cmp	r2, #2
 8004946:	d009      	beq.n	800495c <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004948:	2204      	movs	r2, #4
 800494a:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800494c:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800495a:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800495c:	6801      	ldr	r1, [r0, #0]
 800495e:	680a      	ldr	r2, [r1, #0]
 8004960:	f022 020e 	bic.w	r2, r2, #14
 8004964:	600a      	str	r2, [r1, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004966:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004968:	680a      	ldr	r2, [r1, #0]
 800496a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800496e:	600a      	str	r2, [r1, #0]
     __HAL_DMA_DISABLE(hdma);
 8004970:	6801      	ldr	r1, [r0, #0]
 8004972:	680a      	ldr	r2, [r1, #0]
 8004974:	f022 0201 	bic.w	r2, r2, #1
 8004978:	600a      	str	r2, [r1, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800497a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800497c:	f002 011f 	and.w	r1, r2, #31
 8004980:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8004982:	2201      	movs	r2, #1
 8004984:	408a      	lsls	r2, r1
 8004986:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004988:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800498a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800498c:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 800498e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004990:	b142      	cbz	r2, 80049a4 <HAL_DMA_Abort+0x68>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004992:	6811      	ldr	r1, [r2, #0]
 8004994:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004998:	6011      	str	r1, [r2, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800499a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800499c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800499e:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a0:	2000      	movs	r0, #0
 80049a2:	e7d4      	b.n	800494e <HAL_DMA_Abort+0x12>
 80049a4:	2000      	movs	r0, #0
 80049a6:	e7d2      	b.n	800494e <HAL_DMA_Abort+0x12>

080049a8 <HAL_DMA_Abort_IT>:
{
 80049a8:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80049aa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d009      	beq.n	80049c8 <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049b4:	2304      	movs	r3, #4
 80049b6:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80049b8:	2301      	movs	r3, #1
 80049ba:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80049be:	2200      	movs	r2, #0
 80049c0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 80049c4:	4618      	mov	r0, r3
}
 80049c6:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049c8:	6802      	ldr	r2, [r0, #0]
 80049ca:	6813      	ldr	r3, [r2, #0]
 80049cc:	f023 030e 	bic.w	r3, r3, #14
 80049d0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80049d2:	6802      	ldr	r2, [r0, #0]
 80049d4:	6813      	ldr	r3, [r2, #0]
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049dc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80049de:	6813      	ldr	r3, [r2, #0]
 80049e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049e4:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049e6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80049e8:	f003 021f 	and.w	r2, r3, #31
 80049ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80049ee:	2301      	movs	r3, #1
 80049f0:	4093      	lsls	r3, r2
 80049f2:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049f4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80049f6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80049f8:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80049fa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80049fc:	b133      	cbz	r3, 8004a0c <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a04:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a06:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004a08:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004a0a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004a12:	2300      	movs	r3, #0
 8004a14:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8004a18:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004a1a:	b113      	cbz	r3, 8004a22 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 8004a1c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004a1e:	2000      	movs	r0, #0
 8004a20:	e7d1      	b.n	80049c6 <HAL_DMA_Abort_IT+0x1e>
 8004a22:	2000      	movs	r0, #0
 8004a24:	e7cf      	b.n	80049c6 <HAL_DMA_Abort_IT+0x1e>

08004a26 <HAL_DMA_IRQHandler>:
{
 8004a26:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a28:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004a2a:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004a2c:	6804      	ldr	r4, [r0, #0]
 8004a2e:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a30:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	2204      	movs	r2, #4
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	420a      	tst	r2, r1
 8004a3c:	d015      	beq.n	8004a6a <HAL_DMA_IRQHandler+0x44>
 8004a3e:	f015 0f04 	tst.w	r5, #4
 8004a42:	d012      	beq.n	8004a6a <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	f013 0f20 	tst.w	r3, #32
 8004a4a:	d103      	bne.n	8004a54 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	f023 0304 	bic.w	r3, r3, #4
 8004a52:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a54:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004a56:	f003 021f 	and.w	r2, r3, #31
 8004a5a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	4093      	lsls	r3, r2
 8004a60:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004a62:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004a64:	b103      	cbz	r3, 8004a68 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8004a66:	4798      	blx	r3
}
 8004a68:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	420a      	tst	r2, r1
 8004a70:	d01c      	beq.n	8004aac <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8004a72:	f015 0f02 	tst.w	r5, #2
 8004a76:	d019      	beq.n	8004aac <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	f013 0f20 	tst.w	r3, #32
 8004a7e:	d106      	bne.n	8004a8e <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	f023 030a 	bic.w	r3, r3, #10
 8004a86:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004a90:	f003 021f 	and.w	r2, r3, #31
 8004a94:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004a96:	2302      	movs	r3, #2
 8004a98:	4093      	lsls	r3, r2
 8004a9a:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8004aa2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0df      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8004aa8:	4798      	blx	r3
 8004aaa:	e7dd      	b.n	8004a68 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004aac:	2208      	movs	r2, #8
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	420b      	tst	r3, r1
 8004ab4:	d0d8      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 8004ab6:	f015 0f08 	tst.w	r5, #8
 8004aba:	d0d5      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	f023 030e 	bic.w	r3, r3, #14
 8004ac2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ac4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004acc:	2201      	movs	r2, #1
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ad4:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004ad6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004ada:	2300      	movs	r3, #0
 8004adc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004ae0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0c0      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004ae6:	4798      	blx	r3
  return;
 8004ae8:	e7be      	b.n	8004a68 <HAL_DMA_IRQHandler+0x42>
	...

08004aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aec:	b4f0      	push	{r4, r5, r6, r7}
 8004aee:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 8004af0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004af2:	e05b      	b.n	8004bac <HAL_GPIO_Init+0xc0>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004af4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004af6:	005f      	lsls	r7, r3, #1
 8004af8:	2503      	movs	r5, #3
 8004afa:	40bd      	lsls	r5, r7
 8004afc:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b00:	68cd      	ldr	r5, [r1, #12]
 8004b02:	40bd      	lsls	r5, r7
 8004b04:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8004b06:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b08:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b0a:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b0e:	684d      	ldr	r5, [r1, #4]
 8004b10:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8004b14:	409c      	lsls	r4, r3
 8004b16:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8004b18:	6044      	str	r4, [r0, #4]
 8004b1a:	e055      	b.n	8004bc8 <HAL_GPIO_Init+0xdc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b1c:	08dd      	lsrs	r5, r3, #3
 8004b1e:	3508      	adds	r5, #8
 8004b20:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b24:	f003 0407 	and.w	r4, r3, #7
 8004b28:	00a6      	lsls	r6, r4, #2
 8004b2a:	240f      	movs	r4, #15
 8004b2c:	40b4      	lsls	r4, r6
 8004b2e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b32:	690c      	ldr	r4, [r1, #16]
 8004b34:	40b4      	lsls	r4, r6
 8004b36:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3U] = temp;
 8004b38:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004b3c:	e058      	b.n	8004bf0 <HAL_GPIO_Init+0x104>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b3e:	2405      	movs	r4, #5
 8004b40:	e000      	b.n	8004b44 <HAL_GPIO_Init+0x58>
 8004b42:	2400      	movs	r4, #0
 8004b44:	40b4      	lsls	r4, r6
 8004b46:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b48:	3502      	adds	r5, #2
 8004b4a:	4e4f      	ldr	r6, [pc, #316]	; (8004c88 <HAL_GPIO_Init+0x19c>)
 8004b4c:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b50:	4c4e      	ldr	r4, [pc, #312]	; (8004c8c <HAL_GPIO_Init+0x1a0>)
 8004b52:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8004b54:	43d4      	mvns	r4, r2
 8004b56:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b5a:	684f      	ldr	r7, [r1, #4]
 8004b5c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004b60:	d001      	beq.n	8004b66 <HAL_GPIO_Init+0x7a>
        {
          temp |= iocurrent;
 8004b62:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004b66:	4d49      	ldr	r5, [pc, #292]	; (8004c8c <HAL_GPIO_Init+0x1a0>)
 8004b68:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8004b6a:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8004b6c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b70:	684f      	ldr	r7, [r1, #4]
 8004b72:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8004b76:	d001      	beq.n	8004b7c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8004b78:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004b7c:	4d43      	ldr	r5, [pc, #268]	; (8004c8c <HAL_GPIO_Init+0x1a0>)
 8004b7e:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 8004b80:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004b82:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b86:	684f      	ldr	r7, [r1, #4]
 8004b88:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004b8c:	d001      	beq.n	8004b92 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8004b8e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8004b92:	4d3e      	ldr	r5, [pc, #248]	; (8004c8c <HAL_GPIO_Init+0x1a0>)
 8004b94:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b96:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8004b98:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b9a:	684e      	ldr	r6, [r1, #4]
 8004b9c:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8004ba0:	d001      	beq.n	8004ba6 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8004ba2:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8004ba6:	4a39      	ldr	r2, [pc, #228]	; (8004c8c <HAL_GPIO_Init+0x1a0>)
 8004ba8:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8004baa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bac:	680a      	ldr	r2, [r1, #0]
 8004bae:	fa32 f403 	lsrs.w	r4, r2, r3
 8004bb2:	d065      	beq.n	8004c80 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bb4:	2401      	movs	r4, #1
 8004bb6:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8004bb8:	4022      	ands	r2, r4
 8004bba:	d0f6      	beq.n	8004baa <HAL_GPIO_Init+0xbe>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bbc:	684d      	ldr	r5, [r1, #4]
 8004bbe:	f005 0503 	and.w	r5, r5, #3
 8004bc2:	3d01      	subs	r5, #1
 8004bc4:	2d01      	cmp	r5, #1
 8004bc6:	d995      	bls.n	8004af4 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bc8:	684c      	ldr	r4, [r1, #4]
 8004bca:	f004 0403 	and.w	r4, r4, #3
 8004bce:	2c03      	cmp	r4, #3
 8004bd0:	d009      	beq.n	8004be6 <HAL_GPIO_Init+0xfa>
        temp = GPIOx->PUPDR;
 8004bd2:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bd4:	005e      	lsls	r6, r3, #1
 8004bd6:	2403      	movs	r4, #3
 8004bd8:	40b4      	lsls	r4, r6
 8004bda:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bde:	688c      	ldr	r4, [r1, #8]
 8004be0:	40b4      	lsls	r4, r6
 8004be2:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8004be4:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004be6:	684c      	ldr	r4, [r1, #4]
 8004be8:	f004 0403 	and.w	r4, r4, #3
 8004bec:	2c02      	cmp	r4, #2
 8004bee:	d095      	beq.n	8004b1c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8004bf0:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bf2:	005e      	lsls	r6, r3, #1
 8004bf4:	2403      	movs	r4, #3
 8004bf6:	40b4      	lsls	r4, r6
 8004bf8:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bfc:	684c      	ldr	r4, [r1, #4]
 8004bfe:	f004 0403 	and.w	r4, r4, #3
 8004c02:	40b4      	lsls	r4, r6
 8004c04:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8004c06:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c08:	684c      	ldr	r4, [r1, #4]
 8004c0a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8004c0e:	d0cc      	beq.n	8004baa <HAL_GPIO_Init+0xbe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c10:	4c1f      	ldr	r4, [pc, #124]	; (8004c90 <HAL_GPIO_Init+0x1a4>)
 8004c12:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8004c14:	f045 0501 	orr.w	r5, r5, #1
 8004c18:	6625      	str	r5, [r4, #96]	; 0x60
 8004c1a:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8004c1c:	f004 0401 	and.w	r4, r4, #1
 8004c20:	9401      	str	r4, [sp, #4]
 8004c22:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004c24:	089d      	lsrs	r5, r3, #2
 8004c26:	1cae      	adds	r6, r5, #2
 8004c28:	4c17      	ldr	r4, [pc, #92]	; (8004c88 <HAL_GPIO_Init+0x19c>)
 8004c2a:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c2e:	f003 0403 	and.w	r4, r3, #3
 8004c32:	00a6      	lsls	r6, r4, #2
 8004c34:	240f      	movs	r4, #15
 8004c36:	40b4      	lsls	r4, r6
 8004c38:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c3c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004c40:	f43f af7f 	beq.w	8004b42 <HAL_GPIO_Init+0x56>
 8004c44:	4c13      	ldr	r4, [pc, #76]	; (8004c94 <HAL_GPIO_Init+0x1a8>)
 8004c46:	42a0      	cmp	r0, r4
 8004c48:	d012      	beq.n	8004c70 <HAL_GPIO_Init+0x184>
 8004c4a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c4e:	42a0      	cmp	r0, r4
 8004c50:	d010      	beq.n	8004c74 <HAL_GPIO_Init+0x188>
 8004c52:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c56:	42a0      	cmp	r0, r4
 8004c58:	d00e      	beq.n	8004c78 <HAL_GPIO_Init+0x18c>
 8004c5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c5e:	42a0      	cmp	r0, r4
 8004c60:	d00c      	beq.n	8004c7c <HAL_GPIO_Init+0x190>
 8004c62:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c66:	42a0      	cmp	r0, r4
 8004c68:	f43f af69 	beq.w	8004b3e <HAL_GPIO_Init+0x52>
 8004c6c:	2406      	movs	r4, #6
 8004c6e:	e769      	b.n	8004b44 <HAL_GPIO_Init+0x58>
 8004c70:	2401      	movs	r4, #1
 8004c72:	e767      	b.n	8004b44 <HAL_GPIO_Init+0x58>
 8004c74:	2402      	movs	r4, #2
 8004c76:	e765      	b.n	8004b44 <HAL_GPIO_Init+0x58>
 8004c78:	2403      	movs	r4, #3
 8004c7a:	e763      	b.n	8004b44 <HAL_GPIO_Init+0x58>
 8004c7c:	2404      	movs	r4, #4
 8004c7e:	e761      	b.n	8004b44 <HAL_GPIO_Init+0x58>
  }
}
 8004c80:	b002      	add	sp, #8
 8004c82:	bcf0      	pop	{r4, r5, r6, r7}
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40010400 	.word	0x40010400
 8004c90:	40021000 	.word	0x40021000
 8004c94:	48000400 	.word	0x48000400

08004c98 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004c98:	6903      	ldr	r3, [r0, #16]
 8004c9a:	4219      	tst	r1, r3
 8004c9c:	d001      	beq.n	8004ca2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004c9e:	2001      	movs	r0, #1
 8004ca0:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ca2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ca6:	b10a      	cbz	r2, 8004cac <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ca8:	6181      	str	r1, [r0, #24]
 8004caa:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004cac:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004cae:	4770      	bx	lr

08004cb0 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d136      	bne.n	8004d22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cb4:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc0:	d008      	beq.n	8004cd4 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cc2:	4a3b      	ldr	r2, [pc, #236]	; (8004db0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004cc4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ccc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cd4:	4a36      	ldr	r2, [pc, #216]	; (8004db0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004cd6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004cda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cde:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ce2:	6813      	ldr	r3, [r2, #0]
 8004ce4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ce8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cec:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cee:	4b31      	ldr	r3, [pc, #196]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	2332      	movs	r3, #50	; 0x32
 8004cf4:	fb03 f302 	mul.w	r3, r3, r2
 8004cf8:	4a2f      	ldr	r2, [pc, #188]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	0c9b      	lsrs	r3, r3, #18
 8004d00:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d02:	e000      	b.n	8004d06 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8004d04:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d06:	4a2a      	ldr	r2, [pc, #168]	; (8004db0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004d08:	6952      	ldr	r2, [r2, #20]
 8004d0a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004d0e:	d001      	beq.n	8004d14 <HAL_PWREx_ControlVoltageScaling+0x64>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f7      	bne.n	8004d04 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d14:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004d1c:	d144      	bne.n	8004da8 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 8004d1e:	2000      	movs	r0, #0
 8004d20:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d22:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004d26:	d008      	beq.n	8004d3a <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d28:	4a21      	ldr	r2, [pc, #132]	; (8004db0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004d2a:	6813      	ldr	r3, [r2, #0]
 8004d2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d34:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004d36:	2000      	movs	r0, #0
 8004d38:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d46:	d008      	beq.n	8004d5a <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d48:	4a19      	ldr	r2, [pc, #100]	; (8004db0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004d4a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8004d56:	2000      	movs	r0, #0
 8004d58:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d5a:	4a15      	ldr	r2, [pc, #84]	; (8004db0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004d5c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d68:	6813      	ldr	r3, [r2, #0]
 8004d6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d72:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d74:	4b0f      	ldr	r3, [pc, #60]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	2332      	movs	r3, #50	; 0x32
 8004d7a:	fb03 f302 	mul.w	r3, r3, r2
 8004d7e:	4a0e      	ldr	r2, [pc, #56]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	0c9b      	lsrs	r3, r3, #18
 8004d86:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d88:	e000      	b.n	8004d8c <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8004d8a:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d8c:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004d8e:	6952      	ldr	r2, [r2, #20]
 8004d90:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004d94:	d001      	beq.n	8004d9a <HAL_PWREx_ControlVoltageScaling+0xea>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f7      	bne.n	8004d8a <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d9a:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004da2:	d103      	bne.n	8004dac <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8004da4:	2000      	movs	r0, #0
 8004da6:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004da8:	2003      	movs	r0, #3
 8004daa:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004dac:	2003      	movs	r0, #3
}
 8004dae:	4770      	bx	lr
 8004db0:	40007000 	.word	0x40007000
 8004db4:	20000004 	.word	0x20000004
 8004db8:	431bde83 	.word	0x431bde83

08004dbc <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004dbc:	4a02      	ldr	r2, [pc, #8]	; (8004dc8 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004dbe:	6893      	ldr	r3, [r2, #8]
 8004dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dc4:	6093      	str	r3, [r2, #8]
}
 8004dc6:	4770      	bx	lr
 8004dc8:	40007000 	.word	0x40007000

08004dcc <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dcc:	4a12      	ldr	r2, [pc, #72]	; (8004e18 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004dce:	68d3      	ldr	r3, [r2, #12]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dd4:	68d0      	ldr	r0, [r2, #12]
 8004dd6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8004dda:	3001      	adds	r0, #1

  switch (pllsource)
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d011      	beq.n	8004e04 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004de0:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8004de2:	fbb3 f3f0 	udiv	r3, r3, r0
 8004de6:	4a0c      	ldr	r2, [pc, #48]	; (8004e18 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004de8:	68d0      	ldr	r0, [r2, #12]
 8004dea:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8004dee:	fb00 f003 	mul.w	r0, r0, r3
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004df2:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8004dfe:	fbb0 f0f3 	udiv	r0, r0, r3
 8004e02:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 8004e06:	fbb3 f3f0 	udiv	r3, r3, r0
 8004e0a:	68d0      	ldr	r0, [r2, #12]
 8004e0c:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8004e10:	fb00 f003 	mul.w	r0, r0, r3
    break;
 8004e14:	e7ed      	b.n	8004df2 <RCC_GetSysClockFreqFromPLLSource+0x26>
 8004e16:	bf00      	nop
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	00f42400 	.word	0x00f42400
 8004e20:	007a1200 	.word	0x007a1200

08004e24 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004e24:	2800      	cmp	r0, #0
 8004e26:	f000 824f 	beq.w	80052c8 <HAL_RCC_OscConfig+0x4a4>
{
 8004e2a:	b570      	push	{r4, r5, r6, lr}
 8004e2c:	b082      	sub	sp, #8
 8004e2e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e30:	6803      	ldr	r3, [r0, #0]
 8004e32:	f013 0f01 	tst.w	r3, #1
 8004e36:	d037      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e38:	4ab4      	ldr	r2, [pc, #720]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004e3a:	6893      	ldr	r3, [r2, #8]
 8004e3c:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e40:	68d2      	ldr	r2, [r2, #12]
 8004e42:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e46:	2b0c      	cmp	r3, #12
 8004e48:	d023      	beq.n	8004e92 <HAL_RCC_OscConfig+0x6e>
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d023      	beq.n	8004e96 <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e4e:	6863      	ldr	r3, [r4, #4]
 8004e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e54:	d04e      	beq.n	8004ef4 <HAL_RCC_OscConfig+0xd0>
 8004e56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e5a:	d051      	beq.n	8004f00 <HAL_RCC_OscConfig+0xdc>
 8004e5c:	4bab      	ldr	r3, [pc, #684]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e6c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e6e:	6863      	ldr	r3, [r4, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d052      	beq.n	8004f1a <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8004e74:	f7fe fdb2 	bl	80039dc <HAL_GetTick>
 8004e78:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e7a:	4ba4      	ldr	r3, [pc, #656]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004e82:	d111      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e84:	f7fe fdaa 	bl	80039dc <HAL_GetTick>
 8004e88:	1b40      	subs	r0, r0, r5
 8004e8a:	2864      	cmp	r0, #100	; 0x64
 8004e8c:	d9f5      	bls.n	8004e7a <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8004e8e:	2003      	movs	r0, #3
 8004e90:	e223      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e92:	2a03      	cmp	r2, #3
 8004e94:	d1d9      	bne.n	8004e4a <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e96:	4b9d      	ldr	r3, [pc, #628]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004e9e:	d003      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x84>
 8004ea0:	6863      	ldr	r3, [r4, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 8212 	beq.w	80052cc <HAL_RCC_OscConfig+0x4a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	f013 0f02 	tst.w	r3, #2
 8004eae:	d05d      	beq.n	8004f6c <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb0:	4a96      	ldr	r2, [pc, #600]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004eb2:	6893      	ldr	r3, [r2, #8]
 8004eb4:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eb8:	68d2      	ldr	r2, [r2, #12]
 8004eba:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ebe:	2b0c      	cmp	r3, #12
 8004ec0:	d03a      	beq.n	8004f38 <HAL_RCC_OscConfig+0x114>
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d03a      	beq.n	8004f3c <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ec6:	68e3      	ldr	r3, [r4, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d075      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8004ecc:	4a8f      	ldr	r2, [pc, #572]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004ece:	6813      	ldr	r3, [r2, #0]
 8004ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ed6:	f7fe fd81 	bl	80039dc <HAL_GetTick>
 8004eda:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004edc:	4b8b      	ldr	r3, [pc, #556]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004ee4:	d15f      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee6:	f7fe fd79 	bl	80039dc <HAL_GetTick>
 8004eea:	1b40      	subs	r0, r0, r5
 8004eec:	2802      	cmp	r0, #2
 8004eee:	d9f5      	bls.n	8004edc <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8004ef0:	2003      	movs	r0, #3
 8004ef2:	e1f2      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ef4:	4a85      	ldr	r2, [pc, #532]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004ef6:	6813      	ldr	r3, [r2, #0]
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	e7b6      	b.n	8004e6e <HAL_RCC_OscConfig+0x4a>
 8004f00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f04:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e7a9      	b.n	8004e6e <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8004f1a:	f7fe fd5f 	bl	80039dc <HAL_GetTick>
 8004f1e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f20:	4b7a      	ldr	r3, [pc, #488]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004f28:	d0be      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f2a:	f7fe fd57 	bl	80039dc <HAL_GetTick>
 8004f2e:	1b40      	subs	r0, r0, r5
 8004f30:	2864      	cmp	r0, #100	; 0x64
 8004f32:	d9f5      	bls.n	8004f20 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8004f34:	2003      	movs	r0, #3
 8004f36:	e1d0      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f38:	2a02      	cmp	r2, #2
 8004f3a:	d1c2      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f3c:	4b73      	ldr	r3, [pc, #460]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004f44:	d003      	beq.n	8004f4e <HAL_RCC_OscConfig+0x12a>
 8004f46:	68e3      	ldr	r3, [r4, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 81c1 	beq.w	80052d0 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4e:	4a6f      	ldr	r2, [pc, #444]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004f50:	6853      	ldr	r3, [r2, #4]
 8004f52:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004f56:	6921      	ldr	r1, [r4, #16]
 8004f58:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004f5c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f5e:	4b6c      	ldr	r3, [pc, #432]	; (8005110 <HAL_RCC_OscConfig+0x2ec>)
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	f7fe fcf7 	bl	8003954 <HAL_InitTick>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	f040 81b4 	bne.w	80052d4 <HAL_RCC_OscConfig+0x4b0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	f013 0f08 	tst.w	r3, #8
 8004f72:	d04c      	beq.n	800500e <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f74:	6963      	ldr	r3, [r4, #20]
 8004f76:	b39b      	cbz	r3, 8004fe0 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 8004f78:	4a64      	ldr	r2, [pc, #400]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004f7a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004f86:	f7fe fd29 	bl	80039dc <HAL_GetTick>
 8004f8a:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f8c:	4b5f      	ldr	r3, [pc, #380]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f92:	f013 0f02 	tst.w	r3, #2
 8004f96:	d13a      	bne.n	800500e <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f98:	f7fe fd20 	bl	80039dc <HAL_GetTick>
 8004f9c:	1b40      	subs	r0, r0, r5
 8004f9e:	2802      	cmp	r0, #2
 8004fa0:	d9f4      	bls.n	8004f8c <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 8004fa2:	2003      	movs	r0, #3
 8004fa4:	e199      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa6:	4a59      	ldr	r2, [pc, #356]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004fa8:	6853      	ldr	r3, [r2, #4]
 8004faa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004fae:	6921      	ldr	r1, [r4, #16]
 8004fb0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004fb4:	6053      	str	r3, [r2, #4]
 8004fb6:	e7d9      	b.n	8004f6c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8004fb8:	4a54      	ldr	r2, [pc, #336]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004fba:	6813      	ldr	r3, [r2, #0]
 8004fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004fc2:	f7fe fd0b 	bl	80039dc <HAL_GetTick>
 8004fc6:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fc8:	4b50      	ldr	r3, [pc, #320]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004fd0:	d0cc      	beq.n	8004f6c <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd2:	f7fe fd03 	bl	80039dc <HAL_GetTick>
 8004fd6:	1b40      	subs	r0, r0, r5
 8004fd8:	2802      	cmp	r0, #2
 8004fda:	d9f5      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8004fdc:	2003      	movs	r0, #3
 8004fde:	e17c      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_LSI_DISABLE();
 8004fe0:	4a4a      	ldr	r2, [pc, #296]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004fe2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004fe6:	f023 0301 	bic.w	r3, r3, #1
 8004fea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004fee:	f7fe fcf5 	bl	80039dc <HAL_GetTick>
 8004ff2:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ff4:	4b45      	ldr	r3, [pc, #276]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8004ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ffa:	f013 0f02 	tst.w	r3, #2
 8004ffe:	d006      	beq.n	800500e <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005000:	f7fe fcec 	bl	80039dc <HAL_GetTick>
 8005004:	1b40      	subs	r0, r0, r5
 8005006:	2802      	cmp	r0, #2
 8005008:	d9f4      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 800500a:	2003      	movs	r0, #3
 800500c:	e165      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	f013 0f04 	tst.w	r3, #4
 8005014:	f000 8081 	beq.w	800511a <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005018:	4b3c      	ldr	r3, [pc, #240]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005020:	d136      	bne.n	8005090 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005022:	4b3a      	ldr	r3, [pc, #232]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8005024:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005026:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800502a:	659a      	str	r2, [r3, #88]	; 0x58
 800502c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005036:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005038:	4b36      	ldr	r3, [pc, #216]	; (8005114 <HAL_RCC_OscConfig+0x2f0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005040:	d028      	beq.n	8005094 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005042:	68a3      	ldr	r3, [r4, #8]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d039      	beq.n	80050bc <HAL_RCC_OscConfig+0x298>
 8005048:	2b05      	cmp	r3, #5
 800504a:	d03f      	beq.n	80050cc <HAL_RCC_OscConfig+0x2a8>
 800504c:	4b2f      	ldr	r3, [pc, #188]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 800504e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005052:	f022 0201 	bic.w	r2, r2, #1
 8005056:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800505a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800505e:	f022 0204 	bic.w	r2, r2, #4
 8005062:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005066:	68a3      	ldr	r3, [r4, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d03d      	beq.n	80050e8 <HAL_RCC_OscConfig+0x2c4>
      tickstart = HAL_GetTick();
 800506c:	f7fe fcb6 	bl	80039dc <HAL_GetTick>
 8005070:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005072:	4b26      	ldr	r3, [pc, #152]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 8005074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005078:	f013 0f02 	tst.w	r3, #2
 800507c:	d14c      	bne.n	8005118 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507e:	f7fe fcad 	bl	80039dc <HAL_GetTick>
 8005082:	1b80      	subs	r0, r0, r6
 8005084:	f241 3388 	movw	r3, #5000	; 0x1388
 8005088:	4298      	cmp	r0, r3
 800508a:	d9f2      	bls.n	8005072 <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 800508c:	2003      	movs	r0, #3
 800508e:	e124      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
    FlagStatus       pwrclkchanged = RESET;
 8005090:	2500      	movs	r5, #0
 8005092:	e7d1      	b.n	8005038 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005094:	4a1f      	ldr	r2, [pc, #124]	; (8005114 <HAL_RCC_OscConfig+0x2f0>)
 8005096:	6813      	ldr	r3, [r2, #0]
 8005098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800509e:	f7fe fc9d 	bl	80039dc <HAL_GetTick>
 80050a2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a4:	4b1b      	ldr	r3, [pc, #108]	; (8005114 <HAL_RCC_OscConfig+0x2f0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80050ac:	d1c9      	bne.n	8005042 <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ae:	f7fe fc95 	bl	80039dc <HAL_GetTick>
 80050b2:	1b80      	subs	r0, r0, r6
 80050b4:	2802      	cmp	r0, #2
 80050b6:	d9f5      	bls.n	80050a4 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 80050b8:	2003      	movs	r0, #3
 80050ba:	e10e      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050bc:	4a13      	ldr	r2, [pc, #76]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 80050be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050ca:	e7cc      	b.n	8005066 <HAL_RCC_OscConfig+0x242>
 80050cc:	4b0f      	ldr	r3, [pc, #60]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 80050ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050d2:	f042 0204 	orr.w	r2, r2, #4
 80050d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80050da:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80050e6:	e7be      	b.n	8005066 <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 80050e8:	f7fe fc78 	bl	80039dc <HAL_GetTick>
 80050ec:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050ee:	4b07      	ldr	r3, [pc, #28]	; (800510c <HAL_RCC_OscConfig+0x2e8>)
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f4:	f013 0f02 	tst.w	r3, #2
 80050f8:	d00e      	beq.n	8005118 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fa:	f7fe fc6f 	bl	80039dc <HAL_GetTick>
 80050fe:	1b80      	subs	r0, r0, r6
 8005100:	f241 3388 	movw	r3, #5000	; 0x1388
 8005104:	4298      	cmp	r0, r3
 8005106:	d9f2      	bls.n	80050ee <HAL_RCC_OscConfig+0x2ca>
          return HAL_TIMEOUT;
 8005108:	2003      	movs	r0, #3
 800510a:	e0e6      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
 800510c:	40021000 	.word	0x40021000
 8005110:	2000000c 	.word	0x2000000c
 8005114:	40007000 	.word	0x40007000
    if (pwrclkchanged == SET)
 8005118:	b9e5      	cbnz	r5, 8005154 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	f013 0f20 	tst.w	r3, #32
 8005120:	d035      	beq.n	800518e <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005122:	69a3      	ldr	r3, [r4, #24]
 8005124:	b1e3      	cbz	r3, 8005160 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 8005126:	4a75      	ldr	r2, [pc, #468]	; (80052fc <HAL_RCC_OscConfig+0x4d8>)
 8005128:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800512c:	f043 0301 	orr.w	r3, r3, #1
 8005130:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005134:	f7fe fc52 	bl	80039dc <HAL_GetTick>
 8005138:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800513a:	4b70      	ldr	r3, [pc, #448]	; (80052fc <HAL_RCC_OscConfig+0x4d8>)
 800513c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005140:	f013 0f02 	tst.w	r3, #2
 8005144:	d123      	bne.n	800518e <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005146:	f7fe fc49 	bl	80039dc <HAL_GetTick>
 800514a:	1b40      	subs	r0, r0, r5
 800514c:	2802      	cmp	r0, #2
 800514e:	d9f4      	bls.n	800513a <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8005150:	2003      	movs	r0, #3
 8005152:	e0c2      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005154:	4a69      	ldr	r2, [pc, #420]	; (80052fc <HAL_RCC_OscConfig+0x4d8>)
 8005156:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515c:	6593      	str	r3, [r2, #88]	; 0x58
 800515e:	e7dc      	b.n	800511a <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8005160:	4a66      	ldr	r2, [pc, #408]	; (80052fc <HAL_RCC_OscConfig+0x4d8>)
 8005162:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8005166:	f023 0301 	bic.w	r3, r3, #1
 800516a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800516e:	f7fe fc35 	bl	80039dc <HAL_GetTick>
 8005172:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005174:	4b61      	ldr	r3, [pc, #388]	; (80052fc <HAL_RCC_OscConfig+0x4d8>)
 8005176:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800517a:	f013 0f02 	tst.w	r3, #2
 800517e:	d006      	beq.n	800518e <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005180:	f7fe fc2c 	bl	80039dc <HAL_GetTick>
 8005184:	1b40      	subs	r0, r0, r5
 8005186:	2802      	cmp	r0, #2
 8005188:	d9f4      	bls.n	8005174 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 800518a:	2003      	movs	r0, #3
 800518c:	e0a5      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800518e:	69e3      	ldr	r3, [r4, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 80a1 	beq.w	80052d8 <HAL_RCC_OscConfig+0x4b4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005196:	4a59      	ldr	r2, [pc, #356]	; (80052fc <HAL_RCC_OscConfig+0x4d8>)
 8005198:	6892      	ldr	r2, [r2, #8]
 800519a:	f002 020c 	and.w	r2, r2, #12
 800519e:	2a0c      	cmp	r2, #12
 80051a0:	d064      	beq.n	800526c <HAL_RCC_OscConfig+0x448>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d013      	beq.n	80051ce <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_PLL_DISABLE();
 80051a6:	4a55      	ldr	r2, [pc, #340]	; (80052fc <HAL_RCC_OscConfig+0x4d8>)
 80051a8:	6813      	ldr	r3, [r2, #0]
 80051aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80051b0:	f7fe fc14 	bl	80039dc <HAL_GetTick>
 80051b4:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b6:	4b51      	ldr	r3, [pc, #324]	; (80052fc <HAL_RCC_OscConfig+0x4d8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80051be:	d04e      	beq.n	800525e <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c0:	f7fe fc0c 	bl	80039dc <HAL_GetTick>
 80051c4:	1b00      	subs	r0, r0, r4
 80051c6:	2802      	cmp	r0, #2
 80051c8:	d9f5      	bls.n	80051b6 <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 80051ca:	2003      	movs	r0, #3
 80051cc:	e085      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_DISABLE();
 80051ce:	4a4b      	ldr	r2, [pc, #300]	; (80052fc <HAL_RCC_OscConfig+0x4d8>)
 80051d0:	6813      	ldr	r3, [r2, #0]
 80051d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051d6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80051d8:	f7fe fc00 	bl	80039dc <HAL_GetTick>
 80051dc:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051de:	4b47      	ldr	r3, [pc, #284]	; (80052fc <HAL_RCC_OscConfig+0x4d8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80051e6:	d006      	beq.n	80051f6 <HAL_RCC_OscConfig+0x3d2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e8:	f7fe fbf8 	bl	80039dc <HAL_GetTick>
 80051ec:	1b40      	subs	r0, r0, r5
 80051ee:	2802      	cmp	r0, #2
 80051f0:	d9f5      	bls.n	80051de <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 80051f2:	2003      	movs	r0, #3
 80051f4:	e071      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051f6:	4a41      	ldr	r2, [pc, #260]	; (80052fc <HAL_RCC_OscConfig+0x4d8>)
 80051f8:	68d3      	ldr	r3, [r2, #12]
 80051fa:	4941      	ldr	r1, [pc, #260]	; (8005300 <HAL_RCC_OscConfig+0x4dc>)
 80051fc:	4019      	ands	r1, r3
 80051fe:	6a23      	ldr	r3, [r4, #32]
 8005200:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005202:	3801      	subs	r0, #1
 8005204:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005208:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800520a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800520e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005210:	0840      	lsrs	r0, r0, #1
 8005212:	3801      	subs	r0, #1
 8005214:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8005218:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800521a:	0840      	lsrs	r0, r0, #1
 800521c:	3801      	subs	r0, #1
 800521e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8005222:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005224:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8005228:	430b      	orrs	r3, r1
 800522a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800522c:	6813      	ldr	r3, [r2, #0]
 800522e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005232:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005234:	68d3      	ldr	r3, [r2, #12]
 8005236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800523a:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800523c:	f7fe fbce 	bl	80039dc <HAL_GetTick>
 8005240:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005242:	4b2e      	ldr	r3, [pc, #184]	; (80052fc <HAL_RCC_OscConfig+0x4d8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800524a:	d106      	bne.n	800525a <HAL_RCC_OscConfig+0x436>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524c:	f7fe fbc6 	bl	80039dc <HAL_GetTick>
 8005250:	1b00      	subs	r0, r0, r4
 8005252:	2802      	cmp	r0, #2
 8005254:	d9f5      	bls.n	8005242 <HAL_RCC_OscConfig+0x41e>
            return HAL_TIMEOUT;
 8005256:	2003      	movs	r0, #3
 8005258:	e03f      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
  return HAL_OK;
 800525a:	2000      	movs	r0, #0
 800525c:	e03d      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800525e:	4a27      	ldr	r2, [pc, #156]	; (80052fc <HAL_RCC_OscConfig+0x4d8>)
 8005260:	68d1      	ldr	r1, [r2, #12]
 8005262:	4b28      	ldr	r3, [pc, #160]	; (8005304 <HAL_RCC_OscConfig+0x4e0>)
 8005264:	400b      	ands	r3, r1
 8005266:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8005268:	2000      	movs	r0, #0
 800526a:	e036      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800526c:	2b01      	cmp	r3, #1
 800526e:	d036      	beq.n	80052de <HAL_RCC_OscConfig+0x4ba>
      temp_pllckcfg = RCC->PLLCFGR;
 8005270:	4b22      	ldr	r3, [pc, #136]	; (80052fc <HAL_RCC_OscConfig+0x4d8>)
 8005272:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005274:	f003 0103 	and.w	r1, r3, #3
 8005278:	6a22      	ldr	r2, [r4, #32]
 800527a:	4291      	cmp	r1, r2
 800527c:	d131      	bne.n	80052e2 <HAL_RCC_OscConfig+0x4be>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800527e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005282:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005284:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005286:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800528a:	d12c      	bne.n	80052e6 <HAL_RCC_OscConfig+0x4c2>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800528c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005290:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005292:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005296:	d128      	bne.n	80052ea <HAL_RCC_OscConfig+0x4c6>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005298:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800529c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800529e:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80052a2:	d124      	bne.n	80052ee <HAL_RCC_OscConfig+0x4ca>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052a4:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80052a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80052aa:	0852      	lsrs	r2, r2, #1
 80052ac:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052ae:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80052b2:	d11e      	bne.n	80052f2 <HAL_RCC_OscConfig+0x4ce>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052b4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80052b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80052ba:	0852      	lsrs	r2, r2, #1
 80052bc:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052be:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80052c2:	d118      	bne.n	80052f6 <HAL_RCC_OscConfig+0x4d2>
  return HAL_OK;
 80052c4:	2000      	movs	r0, #0
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
    return HAL_ERROR;
 80052c8:	2001      	movs	r0, #1
}
 80052ca:	4770      	bx	lr
        return HAL_ERROR;
 80052cc:	2001      	movs	r0, #1
 80052ce:	e004      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
        return HAL_ERROR;
 80052d0:	2001      	movs	r0, #1
 80052d2:	e002      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
          return HAL_ERROR;
 80052d4:	2001      	movs	r0, #1
 80052d6:	e000      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
  return HAL_OK;
 80052d8:	2000      	movs	r0, #0
}
 80052da:	b002      	add	sp, #8
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80052de:	2001      	movs	r0, #1
 80052e0:	e7fb      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
        return HAL_ERROR;
 80052e2:	2001      	movs	r0, #1
 80052e4:	e7f9      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
 80052e6:	2001      	movs	r0, #1
 80052e8:	e7f7      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
 80052ea:	2001      	movs	r0, #1
 80052ec:	e7f5      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
 80052ee:	2001      	movs	r0, #1
 80052f0:	e7f3      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
 80052f2:	2001      	movs	r0, #1
 80052f4:	e7f1      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
 80052f6:	2001      	movs	r0, #1
 80052f8:	e7ef      	b.n	80052da <HAL_RCC_OscConfig+0x4b6>
 80052fa:	bf00      	nop
 80052fc:	40021000 	.word	0x40021000
 8005300:	019f800c 	.word	0x019f800c
 8005304:	feeefffc 	.word	0xfeeefffc

08005308 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005308:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <HAL_RCC_GetSysClockFreq+0x7c>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 030c 	and.w	r3, r3, #12
 8005310:	2b04      	cmp	r3, #4
 8005312:	d032      	beq.n	800537a <HAL_RCC_GetSysClockFreq+0x72>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005314:	4b1b      	ldr	r3, [pc, #108]	; (8005384 <HAL_RCC_GetSysClockFreq+0x7c>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 030c 	and.w	r3, r3, #12
 800531c:	2b08      	cmp	r3, #8
 800531e:	d02e      	beq.n	800537e <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005320:	4b18      	ldr	r3, [pc, #96]	; (8005384 <HAL_RCC_GetSysClockFreq+0x7c>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 030c 	and.w	r3, r3, #12
 8005328:	2b0c      	cmp	r3, #12
 800532a:	d001      	beq.n	8005330 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 800532c:	2000      	movs	r0, #0
}
 800532e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005330:	4a14      	ldr	r2, [pc, #80]	; (8005384 <HAL_RCC_GetSysClockFreq+0x7c>)
 8005332:	68d3      	ldr	r3, [r2, #12]
 8005334:	f003 0303 	and.w	r3, r3, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005338:	68d0      	ldr	r0, [r2, #12]
 800533a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800533e:	3001      	adds	r0, #1
    switch (pllsource)
 8005340:	2b03      	cmp	r3, #3
 8005342:	d011      	beq.n	8005368 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005344:	4b10      	ldr	r3, [pc, #64]	; (8005388 <HAL_RCC_GetSysClockFreq+0x80>)
 8005346:	fbb3 f3f0 	udiv	r3, r3, r0
 800534a:	4a0e      	ldr	r2, [pc, #56]	; (8005384 <HAL_RCC_GetSysClockFreq+0x7c>)
 800534c:	68d0      	ldr	r0, [r2, #12]
 800534e:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8005352:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <HAL_RCC_GetSysClockFreq+0x7c>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800535e:	3301      	adds	r3, #1
 8005360:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005362:	fbb0 f0f3 	udiv	r0, r0, r3
 8005366:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005368:	4b08      	ldr	r3, [pc, #32]	; (800538c <HAL_RCC_GetSysClockFreq+0x84>)
 800536a:	fbb3 f3f0 	udiv	r3, r3, r0
 800536e:	68d0      	ldr	r0, [r2, #12]
 8005370:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8005374:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8005378:	e7ed      	b.n	8005356 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 800537a:	4803      	ldr	r0, [pc, #12]	; (8005388 <HAL_RCC_GetSysClockFreq+0x80>)
 800537c:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800537e:	4803      	ldr	r0, [pc, #12]	; (800538c <HAL_RCC_GetSysClockFreq+0x84>)
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40021000 	.word	0x40021000
 8005388:	00f42400 	.word	0x00f42400
 800538c:	007a1200 	.word	0x007a1200

08005390 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005390:	2800      	cmp	r0, #0
 8005392:	f000 80e6 	beq.w	8005562 <HAL_RCC_ClockConfig+0x1d2>
{
 8005396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005398:	460c      	mov	r4, r1
 800539a:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800539c:	4b74      	ldr	r3, [pc, #464]	; (8005570 <HAL_RCC_ClockConfig+0x1e0>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	428b      	cmp	r3, r1
 80053a6:	d20b      	bcs.n	80053c0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a8:	4a71      	ldr	r2, [pc, #452]	; (8005570 <HAL_RCC_ClockConfig+0x1e0>)
 80053aa:	6813      	ldr	r3, [r2, #0]
 80053ac:	f023 030f 	bic.w	r3, r3, #15
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b4:	6813      	ldr	r3, [r2, #0]
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	428b      	cmp	r3, r1
 80053bc:	f040 80d3 	bne.w	8005566 <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053c0:	682e      	ldr	r6, [r5, #0]
 80053c2:	f016 0601 	ands.w	r6, r6, #1
 80053c6:	d05f      	beq.n	8005488 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053c8:	686b      	ldr	r3, [r5, #4]
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d015      	beq.n	80053fa <HAL_RCC_ClockConfig+0x6a>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d033      	beq.n	800543a <HAL_RCC_ClockConfig+0xaa>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053d2:	4b68      	ldr	r3, [pc, #416]	; (8005574 <HAL_RCC_ClockConfig+0x1e4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80053da:	f000 80c6 	beq.w	800556a <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80053de:	f7ff ff93 	bl	8005308 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80053e2:	4b65      	ldr	r3, [pc, #404]	; (8005578 <HAL_RCC_ClockConfig+0x1e8>)
 80053e4:	4298      	cmp	r0, r3
 80053e6:	d933      	bls.n	8005450 <HAL_RCC_ClockConfig+0xc0>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053e8:	4a62      	ldr	r2, [pc, #392]	; (8005574 <HAL_RCC_ClockConfig+0x1e4>)
 80053ea:	6893      	ldr	r3, [r2, #8]
 80053ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80053f6:	2680      	movs	r6, #128	; 0x80
 80053f8:	e02b      	b.n	8005452 <HAL_RCC_ClockConfig+0xc2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053fa:	4b5e      	ldr	r3, [pc, #376]	; (8005574 <HAL_RCC_ClockConfig+0x1e4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005402:	d101      	bne.n	8005408 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8005404:	2001      	movs	r0, #1
 8005406:	e08b      	b.n	8005520 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005408:	f7ff fce0 	bl	8004dcc <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 800540c:	4b5a      	ldr	r3, [pc, #360]	; (8005578 <HAL_RCC_ClockConfig+0x1e8>)
 800540e:	4298      	cmp	r0, r3
 8005410:	d91a      	bls.n	8005448 <HAL_RCC_ClockConfig+0xb8>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005412:	4b58      	ldr	r3, [pc, #352]	; (8005574 <HAL_RCC_ClockConfig+0x1e4>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800541a:	d005      	beq.n	8005428 <HAL_RCC_ClockConfig+0x98>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800541c:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800541e:	f016 0602 	ands.w	r6, r6, #2
 8005422:	d016      	beq.n	8005452 <HAL_RCC_ClockConfig+0xc2>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005424:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005426:	b98b      	cbnz	r3, 800544c <HAL_RCC_ClockConfig+0xbc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005428:	4a52      	ldr	r2, [pc, #328]	; (8005574 <HAL_RCC_ClockConfig+0x1e4>)
 800542a:	6893      	ldr	r3, [r2, #8]
 800542c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005434:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005436:	2680      	movs	r6, #128	; 0x80
 8005438:	e00b      	b.n	8005452 <HAL_RCC_ClockConfig+0xc2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800543a:	4b4e      	ldr	r3, [pc, #312]	; (8005574 <HAL_RCC_ClockConfig+0x1e4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005442:	d1cc      	bne.n	80053de <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8005444:	2001      	movs	r0, #1
 8005446:	e06b      	b.n	8005520 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005448:	2600      	movs	r6, #0
 800544a:	e002      	b.n	8005452 <HAL_RCC_ClockConfig+0xc2>
 800544c:	2600      	movs	r6, #0
 800544e:	e000      	b.n	8005452 <HAL_RCC_ClockConfig+0xc2>
 8005450:	2600      	movs	r6, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005452:	4a48      	ldr	r2, [pc, #288]	; (8005574 <HAL_RCC_ClockConfig+0x1e4>)
 8005454:	6893      	ldr	r3, [r2, #8]
 8005456:	f023 0303 	bic.w	r3, r3, #3
 800545a:	6869      	ldr	r1, [r5, #4]
 800545c:	430b      	orrs	r3, r1
 800545e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005460:	f7fe fabc 	bl	80039dc <HAL_GetTick>
 8005464:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005466:	4b43      	ldr	r3, [pc, #268]	; (8005574 <HAL_RCC_ClockConfig+0x1e4>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	686a      	ldr	r2, [r5, #4]
 8005470:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005474:	d008      	beq.n	8005488 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005476:	f7fe fab1 	bl	80039dc <HAL_GetTick>
 800547a:	1bc0      	subs	r0, r0, r7
 800547c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005480:	4298      	cmp	r0, r3
 8005482:	d9f0      	bls.n	8005466 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8005484:	2003      	movs	r0, #3
 8005486:	e04b      	b.n	8005520 <HAL_RCC_ClockConfig+0x190>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	f013 0f02 	tst.w	r3, #2
 800548e:	d048      	beq.n	8005522 <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005490:	f013 0f04 	tst.w	r3, #4
 8005494:	d004      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005496:	4a37      	ldr	r2, [pc, #220]	; (8005574 <HAL_RCC_ClockConfig+0x1e4>)
 8005498:	6893      	ldr	r3, [r2, #8]
 800549a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800549e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	f013 0f08 	tst.w	r3, #8
 80054a6:	d006      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80054a8:	4a32      	ldr	r2, [pc, #200]	; (8005574 <HAL_RCC_ClockConfig+0x1e4>)
 80054aa:	6893      	ldr	r3, [r2, #8]
 80054ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80054b0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054b4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054b6:	4a2f      	ldr	r2, [pc, #188]	; (8005574 <HAL_RCC_ClockConfig+0x1e4>)
 80054b8:	6893      	ldr	r3, [r2, #8]
 80054ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054be:	68a9      	ldr	r1, [r5, #8]
 80054c0:	430b      	orrs	r3, r1
 80054c2:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054c4:	4b2a      	ldr	r3, [pc, #168]	; (8005570 <HAL_RCC_ClockConfig+0x1e0>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	d830      	bhi.n	8005532 <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d0:	682b      	ldr	r3, [r5, #0]
 80054d2:	f013 0f04 	tst.w	r3, #4
 80054d6:	d006      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d8:	4a26      	ldr	r2, [pc, #152]	; (8005574 <HAL_RCC_ClockConfig+0x1e4>)
 80054da:	6893      	ldr	r3, [r2, #8]
 80054dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80054e0:	68e9      	ldr	r1, [r5, #12]
 80054e2:	430b      	orrs	r3, r1
 80054e4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e6:	682b      	ldr	r3, [r5, #0]
 80054e8:	f013 0f08 	tst.w	r3, #8
 80054ec:	d007      	beq.n	80054fe <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ee:	4a21      	ldr	r2, [pc, #132]	; (8005574 <HAL_RCC_ClockConfig+0x1e4>)
 80054f0:	6893      	ldr	r3, [r2, #8]
 80054f2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80054f6:	6929      	ldr	r1, [r5, #16]
 80054f8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80054fc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054fe:	f7ff ff03 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 8005502:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <HAL_RCC_ClockConfig+0x1e4>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800550a:	4a1c      	ldr	r2, [pc, #112]	; (800557c <HAL_RCC_ClockConfig+0x1ec>)
 800550c:	5cd3      	ldrb	r3, [r2, r3]
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	40d8      	lsrs	r0, r3
 8005514:	4b1a      	ldr	r3, [pc, #104]	; (8005580 <HAL_RCC_ClockConfig+0x1f0>)
 8005516:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8005518:	4b1a      	ldr	r3, [pc, #104]	; (8005584 <HAL_RCC_ClockConfig+0x1f4>)
 800551a:	6818      	ldr	r0, [r3, #0]
 800551c:	f7fe fa1a 	bl	8003954 <HAL_InitTick>
}
 8005520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 8005522:	2e80      	cmp	r6, #128	; 0x80
 8005524:	d1ce      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005526:	4a13      	ldr	r2, [pc, #76]	; (8005574 <HAL_RCC_ClockConfig+0x1e4>)
 8005528:	6893      	ldr	r3, [r2, #8]
 800552a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800552e:	6093      	str	r3, [r2, #8]
 8005530:	e7c8      	b.n	80054c4 <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005532:	4a0f      	ldr	r2, [pc, #60]	; (8005570 <HAL_RCC_ClockConfig+0x1e0>)
 8005534:	6813      	ldr	r3, [r2, #0]
 8005536:	f023 030f 	bic.w	r3, r3, #15
 800553a:	4323      	orrs	r3, r4
 800553c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800553e:	f7fe fa4d 	bl	80039dc <HAL_GetTick>
 8005542:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005544:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <HAL_RCC_ClockConfig+0x1e0>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	42a3      	cmp	r3, r4
 800554e:	d0bf      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005550:	f7fe fa44 	bl	80039dc <HAL_GetTick>
 8005554:	1b80      	subs	r0, r0, r6
 8005556:	f241 3388 	movw	r3, #5000	; 0x1388
 800555a:	4298      	cmp	r0, r3
 800555c:	d9f2      	bls.n	8005544 <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 800555e:	2003      	movs	r0, #3
 8005560:	e7de      	b.n	8005520 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 8005562:	2001      	movs	r0, #1
}
 8005564:	4770      	bx	lr
      return HAL_ERROR;
 8005566:	2001      	movs	r0, #1
 8005568:	e7da      	b.n	8005520 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 800556a:	2001      	movs	r0, #1
 800556c:	e7d8      	b.n	8005520 <HAL_RCC_ClockConfig+0x190>
 800556e:	bf00      	nop
 8005570:	40022000 	.word	0x40022000
 8005574:	40021000 	.word	0x40021000
 8005578:	04c4b400 	.word	0x04c4b400
 800557c:	0800afe4 	.word	0x0800afe4
 8005580:	20000004 	.word	0x20000004
 8005584:	2000000c 	.word	0x2000000c

08005588 <HAL_RCC_GetHCLKFreq>:
}
 8005588:	4b01      	ldr	r3, [pc, #4]	; (8005590 <HAL_RCC_GetHCLKFreq+0x8>)
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	20000004 	.word	0x20000004

08005594 <HAL_RCC_GetPCLK1Freq>:
{
 8005594:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005596:	f7ff fff7 	bl	8005588 <HAL_RCC_GetHCLKFreq>
 800559a:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80055a2:	4a04      	ldr	r2, [pc, #16]	; (80055b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055a4:	5cd3      	ldrb	r3, [r2, r3]
 80055a6:	f003 031f 	and.w	r3, r3, #31
}
 80055aa:	40d8      	lsrs	r0, r3
 80055ac:	bd08      	pop	{r3, pc}
 80055ae:	bf00      	nop
 80055b0:	40021000 	.word	0x40021000
 80055b4:	0800aff4 	.word	0x0800aff4

080055b8 <HAL_RCC_GetPCLK2Freq>:
{
 80055b8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055ba:	f7ff ffe5 	bl	8005588 <HAL_RCC_GetHCLKFreq>
 80055be:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80055c6:	4a04      	ldr	r2, [pc, #16]	; (80055d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055c8:	5cd3      	ldrb	r3, [r2, r3]
 80055ca:	f003 031f 	and.w	r3, r3, #31
}
 80055ce:	40d8      	lsrs	r0, r3
 80055d0:	bd08      	pop	{r3, pc}
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000
 80055d8:	0800aff4 	.word	0x0800aff4

080055dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055de:	b083      	sub	sp, #12
 80055e0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055e2:	6803      	ldr	r3, [r0, #0]
 80055e4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80055e8:	d069      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xe2>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ea:	4bb3      	ldr	r3, [pc, #716]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80055ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80055f2:	d11e      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055f4:	4bb0      	ldr	r3, [pc, #704]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80055f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80055f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80055fc:	659a      	str	r2, [r3, #88]	; 0x58
 80055fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005604:	9301      	str	r3, [sp, #4]
 8005606:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005608:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800560a:	4aac      	ldr	r2, [pc, #688]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800560c:	6813      	ldr	r3, [r2, #0]
 800560e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005612:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005614:	f7fe f9e2 	bl	80039dc <HAL_GetTick>
 8005618:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800561a:	4ba8      	ldr	r3, [pc, #672]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005622:	d108      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005624:	f7fe f9da 	bl	80039dc <HAL_GetTick>
 8005628:	1b40      	subs	r0, r0, r5
 800562a:	2802      	cmp	r0, #2
 800562c:	d9f5      	bls.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 800562e:	2503      	movs	r5, #3
 8005630:	e002      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 8005632:	2600      	movs	r6, #0
 8005634:	e7e9      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005636:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8005638:	bb45      	cbnz	r5, 800568c <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800563a:	4b9f      	ldr	r3, [pc, #636]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800563c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005640:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005644:	d015      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8005646:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005648:	429a      	cmp	r2, r3
 800564a:	d012      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800564c:	4a9a      	ldr	r2, [pc, #616]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800564e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005656:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800565a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800565e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005662:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8005666:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800566a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800566e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005672:	f013 0f01 	tst.w	r3, #1
 8005676:	d110      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 8005678:	b945      	cbnz	r5, 800568c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800567a:	4a8f      	ldr	r2, [pc, #572]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800567c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005684:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005686:	430b      	orrs	r3, r1
 8005688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800568c:	b1c6      	cbz	r6, 80056c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800568e:	4a8a      	ldr	r2, [pc, #552]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005690:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005696:	6593      	str	r3, [r2, #88]	; 0x58
 8005698:	e012      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 800569a:	f7fe f99f 	bl	80039dc <HAL_GetTick>
 800569e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a0:	4b85      	ldr	r3, [pc, #532]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a6:	f013 0f02 	tst.w	r3, #2
 80056aa:	d1e5      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ac:	f7fe f996 	bl	80039dc <HAL_GetTick>
 80056b0:	1bc0      	subs	r0, r0, r7
 80056b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80056b6:	4298      	cmp	r0, r3
 80056b8:	d9f2      	bls.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 80056ba:	2503      	movs	r5, #3
 80056bc:	e7dc      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056be:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	f013 0f01 	tst.w	r3, #1
 80056c6:	d008      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056c8:	4a7b      	ldr	r2, [pc, #492]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80056ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80056ce:	f023 0303 	bic.w	r3, r3, #3
 80056d2:	6861      	ldr	r1, [r4, #4]
 80056d4:	430b      	orrs	r3, r1
 80056d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	f013 0f02 	tst.w	r3, #2
 80056e0:	d008      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056e2:	4a75      	ldr	r2, [pc, #468]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80056e4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80056e8:	f023 030c 	bic.w	r3, r3, #12
 80056ec:	68a1      	ldr	r1, [r4, #8]
 80056ee:	430b      	orrs	r3, r1
 80056f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	f013 0f04 	tst.w	r3, #4
 80056fa:	d008      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056fc:	4a6e      	ldr	r2, [pc, #440]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80056fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005702:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005706:	68e1      	ldr	r1, [r4, #12]
 8005708:	430b      	orrs	r3, r1
 800570a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	f013 0f08 	tst.w	r3, #8
 8005714:	d008      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005716:	4a68      	ldr	r2, [pc, #416]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005718:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800571c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005720:	6921      	ldr	r1, [r4, #16]
 8005722:	430b      	orrs	r3, r1
 8005724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	f013 0f20 	tst.w	r3, #32
 800572e:	d008      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005730:	4a61      	ldr	r2, [pc, #388]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005732:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005736:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800573a:	6961      	ldr	r1, [r4, #20]
 800573c:	430b      	orrs	r3, r1
 800573e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005748:	d008      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800574a:	4a5b      	ldr	r2, [pc, #364]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800574c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005750:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005754:	69a1      	ldr	r1, [r4, #24]
 8005756:	430b      	orrs	r3, r1
 8005758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005762:	d008      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005764:	4a54      	ldr	r2, [pc, #336]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005766:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800576a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800576e:	69e1      	ldr	r1, [r4, #28]
 8005770:	430b      	orrs	r3, r1
 8005772:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	f413 7f80 	tst.w	r3, #256	; 0x100
 800577c:	d008      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800577e:	4a4e      	ldr	r2, [pc, #312]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005780:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005784:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005788:	6a21      	ldr	r1, [r4, #32]
 800578a:	430b      	orrs	r3, r1
 800578c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005796:	d008      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005798:	4a47      	ldr	r2, [pc, #284]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800579a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800579e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80057a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80057a4:	430b      	orrs	r3, r1
 80057a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80057b0:	d00c      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057b2:	4a41      	ldr	r2, [pc, #260]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80057b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80057b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80057bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80057be:	430b      	orrs	r3, r1
 80057c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80057c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80057c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ca:	d057      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80057d2:	d00c      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057d4:	4a38      	ldr	r2, [pc, #224]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80057d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80057da:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80057de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80057e0:	430b      	orrs	r3, r1
 80057e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80057e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80057e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ec:	d04b      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80057f4:	d00c      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057f6:	4a30      	ldr	r2, [pc, #192]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80057f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80057fc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005800:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005802:	430b      	orrs	r3, r1
 8005804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005808:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800580a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800580e:	d03f      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005816:	d00c      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005818:	4a27      	ldr	r2, [pc, #156]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800581a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800581e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005824:	430b      	orrs	r3, r1
 8005826:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800582a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800582c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005830:	d033      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005838:	d00c      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800583a:	4a1f      	ldr	r2, [pc, #124]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800583c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005840:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005844:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005846:	430b      	orrs	r3, r1
 8005848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800584c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800584e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005852:	d027      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800585a:	d00c      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800585c:	4a16      	ldr	r2, [pc, #88]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800585e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005862:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005866:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005868:	430b      	orrs	r3, r1
 800586a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800586e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005870:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005874:	d01b      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  }

#endif /* QUADSPI */

  return status;
}
 8005876:	4628      	mov	r0, r5
 8005878:	b003      	add	sp, #12
 800587a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800587c:	68d3      	ldr	r3, [r2, #12]
 800587e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005882:	60d3      	str	r3, [r2, #12]
 8005884:	e7a2      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005886:	68d3      	ldr	r3, [r2, #12]
 8005888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800588c:	60d3      	str	r3, [r2, #12]
 800588e:	e7ae      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005890:	68d3      	ldr	r3, [r2, #12]
 8005892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005896:	60d3      	str	r3, [r2, #12]
 8005898:	e7ba      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800589a:	68d3      	ldr	r3, [r2, #12]
 800589c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058a0:	60d3      	str	r3, [r2, #12]
 80058a2:	e7c6      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x256>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058a4:	68d3      	ldr	r3, [r2, #12]
 80058a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058aa:	60d3      	str	r3, [r2, #12]
 80058ac:	e7d2      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058ae:	68d3      	ldr	r3, [r2, #12]
 80058b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b4:	60d3      	str	r3, [r2, #12]
 80058b6:	e7de      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80058b8:	40021000 	.word	0x40021000
 80058bc:	40007000 	.word	0x40007000

080058c0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80058c0:	4770      	bx	lr
	...

080058c4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d132      	bne.n	8005934 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ce:	2302      	movs	r3, #2
 80058d0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058d4:	6802      	ldr	r2, [r0, #0]
 80058d6:	68d3      	ldr	r3, [r2, #12]
 80058d8:	f043 0301 	orr.w	r3, r3, #1
 80058dc:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058de:	6803      	ldr	r3, [r0, #0]
 80058e0:	4a17      	ldr	r2, [pc, #92]	; (8005940 <HAL_TIM_Base_Start_IT+0x7c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d018      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x54>
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ea:	d015      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x54>
 80058ec:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d011      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x54>
 80058f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00d      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x54>
 80058fc:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8005900:	4293      	cmp	r3, r2
 8005902:	d009      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x54>
 8005904:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005908:	4293      	cmp	r3, r2
 800590a:	d005      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005914:	2000      	movs	r0, #0
 8005916:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005918:	6899      	ldr	r1, [r3, #8]
 800591a:	4a0a      	ldr	r2, [pc, #40]	; (8005944 <HAL_TIM_Base_Start_IT+0x80>)
 800591c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800591e:	2a06      	cmp	r2, #6
 8005920:	d00a      	beq.n	8005938 <HAL_TIM_Base_Start_IT+0x74>
 8005922:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005926:	d009      	beq.n	800593c <HAL_TIM_Base_Start_IT+0x78>
      __HAL_TIM_ENABLE(htim);
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005930:	2000      	movs	r0, #0
 8005932:	4770      	bx	lr
    return HAL_ERROR;
 8005934:	2001      	movs	r0, #1
 8005936:	4770      	bx	lr
  return HAL_OK;
 8005938:	2000      	movs	r0, #0
 800593a:	4770      	bx	lr
 800593c:	2000      	movs	r0, #0
}
 800593e:	4770      	bx	lr
 8005940:	40012c00 	.word	0x40012c00
 8005944:	00010007 	.word	0x00010007

08005948 <HAL_TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005948:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d00c      	beq.n	800596a <HAL_TIM_GenerateEvent+0x22>

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	2302      	movs	r3, #2
 8005952:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8005956:	6803      	ldr	r3, [r0, #0]
 8005958:	6159      	str	r1, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800595a:	2301      	movs	r3, #1
 800595c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005960:	2300      	movs	r3, #0
 8005962:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8005966:	4618      	mov	r0, r3
 8005968:	4770      	bx	lr
  __HAL_LOCK(htim);
 800596a:	2002      	movs	r0, #2
}
 800596c:	4770      	bx	lr
	...

08005970 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005970:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005972:	4a30      	ldr	r2, [pc, #192]	; (8005a34 <TIM_Base_SetConfig+0xc4>)
 8005974:	4290      	cmp	r0, r2
 8005976:	d00e      	beq.n	8005996 <TIM_Base_SetConfig+0x26>
 8005978:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800597c:	d00b      	beq.n	8005996 <TIM_Base_SetConfig+0x26>
 800597e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005982:	4290      	cmp	r0, r2
 8005984:	d007      	beq.n	8005996 <TIM_Base_SetConfig+0x26>
 8005986:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800598a:	4290      	cmp	r0, r2
 800598c:	d003      	beq.n	8005996 <TIM_Base_SetConfig+0x26>
 800598e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8005992:	4290      	cmp	r0, r2
 8005994:	d103      	bne.n	800599e <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800599a:	684a      	ldr	r2, [r1, #4]
 800599c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800599e:	4a25      	ldr	r2, [pc, #148]	; (8005a34 <TIM_Base_SetConfig+0xc4>)
 80059a0:	4290      	cmp	r0, r2
 80059a2:	d01a      	beq.n	80059da <TIM_Base_SetConfig+0x6a>
 80059a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80059a8:	d017      	beq.n	80059da <TIM_Base_SetConfig+0x6a>
 80059aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80059ae:	4290      	cmp	r0, r2
 80059b0:	d013      	beq.n	80059da <TIM_Base_SetConfig+0x6a>
 80059b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059b6:	4290      	cmp	r0, r2
 80059b8:	d00f      	beq.n	80059da <TIM_Base_SetConfig+0x6a>
 80059ba:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80059be:	4290      	cmp	r0, r2
 80059c0:	d00b      	beq.n	80059da <TIM_Base_SetConfig+0x6a>
 80059c2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80059c6:	4290      	cmp	r0, r2
 80059c8:	d007      	beq.n	80059da <TIM_Base_SetConfig+0x6a>
 80059ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059ce:	4290      	cmp	r0, r2
 80059d0:	d003      	beq.n	80059da <TIM_Base_SetConfig+0x6a>
 80059d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059d6:	4290      	cmp	r0, r2
 80059d8:	d103      	bne.n	80059e2 <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059de:	68ca      	ldr	r2, [r1, #12]
 80059e0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e6:	694a      	ldr	r2, [r1, #20]
 80059e8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80059ea:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059ec:	688b      	ldr	r3, [r1, #8]
 80059ee:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f0:	680b      	ldr	r3, [r1, #0]
 80059f2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059f4:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <TIM_Base_SetConfig+0xc4>)
 80059f6:	4298      	cmp	r0, r3
 80059f8:	d00f      	beq.n	8005a1a <TIM_Base_SetConfig+0xaa>
 80059fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fe:	4298      	cmp	r0, r3
 8005a00:	d00b      	beq.n	8005a1a <TIM_Base_SetConfig+0xaa>
 8005a02:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005a06:	4298      	cmp	r0, r3
 8005a08:	d007      	beq.n	8005a1a <TIM_Base_SetConfig+0xaa>
 8005a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a0e:	4298      	cmp	r0, r3
 8005a10:	d003      	beq.n	8005a1a <TIM_Base_SetConfig+0xaa>
 8005a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a16:	4298      	cmp	r0, r3
 8005a18:	d101      	bne.n	8005a1e <TIM_Base_SetConfig+0xae>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a1a:	690b      	ldr	r3, [r1, #16]
 8005a1c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a22:	6903      	ldr	r3, [r0, #16]
 8005a24:	f013 0f01 	tst.w	r3, #1
 8005a28:	d003      	beq.n	8005a32 <TIM_Base_SetConfig+0xc2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a2a:	6903      	ldr	r3, [r0, #16]
 8005a2c:	f023 0301 	bic.w	r3, r3, #1
 8005a30:	6103      	str	r3, [r0, #16]
  }
}
 8005a32:	4770      	bx	lr
 8005a34:	40012c00 	.word	0x40012c00

08005a38 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005a38:	b360      	cbz	r0, 8005a94 <HAL_TIM_Base_Init+0x5c>
{
 8005a3a:	b510      	push	{r4, lr}
 8005a3c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a3e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a42:	b313      	cbz	r3, 8005a8a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	2302      	movs	r3, #2
 8005a46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005a50:	f7ff ff8e 	bl	8005970 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005a5e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005a62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005a66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005a6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a72:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a7a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005a7e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005a82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005a86:	2000      	movs	r0, #0
}
 8005a88:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005a8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005a8e:	f7ff ff17 	bl	80058c0 <HAL_TIM_Base_MspInit>
 8005a92:	e7d7      	b.n	8005a44 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005a94:	2001      	movs	r0, #1
}
 8005a96:	4770      	bx	lr

08005a98 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a98:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d040      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
{
 8005aa0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aae:	6802      	ldr	r2, [r0, #0]
 8005ab0:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ab2:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ab4:	4c1c      	ldr	r4, [pc, #112]	; (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8005ab6:	42a2      	cmp	r2, r4
 8005ab8:	d003      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8005aba:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005abe:	42a2      	cmp	r2, r4
 8005ac0:	d103      	bne.n	8005aca <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ac2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ac6:	684c      	ldr	r4, [r1, #4]
 8005ac8:	4323      	orrs	r3, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ad2:	680c      	ldr	r4, [r1, #0]
 8005ad4:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ad6:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad8:	6803      	ldr	r3, [r0, #0]
 8005ada:	4a13      	ldr	r2, [pc, #76]	; (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d012      	beq.n	8005b06 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae4:	d00f      	beq.n	8005b06 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005ae6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00b      	beq.n	8005b06 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005aee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d007      	beq.n	8005b06 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005af6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d003      	beq.n	8005b06 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005afe:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d104      	bne.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b06:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b0a:	688a      	ldr	r2, [r1, #8]
 8005b0c:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b0e:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b10:	2301      	movs	r3, #1
 8005b12:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b16:	2300      	movs	r3, #0
 8005b18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005b1c:	4618      	mov	r0, r3
}
 8005b1e:	bc30      	pop	{r4, r5}
 8005b20:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005b22:	2002      	movs	r0, #2
}
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40012c00 	.word	0x40012c00

08005b2c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b2c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2e:	e852 3f00 	ldrex	r3, [r2]
 8005b32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	e842 3100 	strex	r1, r3, [r2]
 8005b3a:	2900      	cmp	r1, #0
 8005b3c:	d1f6      	bne.n	8005b2c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b3e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	f102 0308 	add.w	r3, r2, #8
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b4c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	3208      	adds	r2, #8
 8005b52:	e842 3100 	strex	r1, r3, [r2]
 8005b56:	2900      	cmp	r1, #0
 8005b58:	d1f1      	bne.n	8005b3e <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b5a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d006      	beq.n	8005b6e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b60:	2320      	movs	r3, #32
 8005b62:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b66:	2300      	movs	r3, #0
 8005b68:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b6a:	6743      	str	r3, [r0, #116]	; 0x74
}
 8005b6c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	e852 3f00 	ldrex	r3, [r2]
 8005b74:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	e842 3100 	strex	r1, r3, [r2]
 8005b7c:	2900      	cmp	r1, #0
 8005b7e:	d1f6      	bne.n	8005b6e <UART_EndRxTransfer+0x42>
 8005b80:	e7ee      	b.n	8005b60 <UART_EndRxTransfer+0x34>

08005b82 <HAL_UART_TxCpltCallback>:
}
 8005b82:	4770      	bx	lr

08005b84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b84:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b86:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	e852 3f00 	ldrex	r3, [r2]
 8005b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	e842 3100 	strex	r1, r3, [r2]
 8005b94:	2900      	cmp	r1, #0
 8005b96:	d1f6      	bne.n	8005b86 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b98:	2320      	movs	r3, #32
 8005b9a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ba2:	f7ff ffee 	bl	8005b82 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ba6:	bd08      	pop	{r3, pc}

08005ba8 <UART_DMAAbortOnError>:
{
 8005ba8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005baa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005bb2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8005bb6:	f7fd fe81 	bl	80038bc <HAL_UART_ErrorCallback>
}
 8005bba:	bd08      	pop	{r3, pc}

08005bbc <HAL_UARTEx_RxEventCallback>:
}
 8005bbc:	4770      	bx	lr
	...

08005bc0 <HAL_UART_IRQHandler>:
{
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bc4:	6801      	ldr	r1, [r0, #0]
 8005bc6:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bc8:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bca:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005bcc:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8005bd0:	401a      	ands	r2, r3
 8005bd2:	d108      	bne.n	8005be6 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005bd4:	f013 0f20 	tst.w	r3, #32
 8005bd8:	d005      	beq.n	8005be6 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005bda:	f010 0f20 	tst.w	r0, #32
 8005bde:	d134      	bne.n	8005c4a <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005be0:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005be4:	d131      	bne.n	8005c4a <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8005be6:	b12a      	cbz	r2, 8005bf4 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005be8:	4abe      	ldr	r2, [pc, #760]	; (8005ee4 <HAL_UART_IRQHandler+0x324>)
 8005bea:	402a      	ands	r2, r5
 8005bec:	d133      	bne.n	8005c56 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005bee:	4ebe      	ldr	r6, [pc, #760]	; (8005ee8 <HAL_UART_IRQHandler+0x328>)
 8005bf0:	4230      	tst	r0, r6
 8005bf2:	d130      	bne.n	8005c56 <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005bf6:	2a01      	cmp	r2, #1
 8005bf8:	f000 80c6 	beq.w	8005d88 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bfc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005c00:	d003      	beq.n	8005c0a <HAL_UART_IRQHandler+0x4a>
 8005c02:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8005c06:	f040 815e 	bne.w	8005ec6 <HAL_UART_IRQHandler+0x306>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c0a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c0e:	d007      	beq.n	8005c20 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c10:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005c14:	f040 815e 	bne.w	8005ed4 <HAL_UART_IRQHandler+0x314>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c18:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8005c1c:	f040 815a 	bne.w	8005ed4 <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c24:	d003      	beq.n	8005c2e <HAL_UART_IRQHandler+0x6e>
 8005c26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c2a:	f040 8161 	bne.w	8005ef0 <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c2e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005c32:	d003      	beq.n	8005c3c <HAL_UART_IRQHandler+0x7c>
 8005c34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c38:	f040 815e 	bne.w	8005ef8 <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c3c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005c40:	d002      	beq.n	8005c48 <HAL_UART_IRQHandler+0x88>
 8005c42:	2800      	cmp	r0, #0
 8005c44:	f2c0 815c 	blt.w	8005f00 <HAL_UART_IRQHandler+0x340>
}
 8005c48:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005c4a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0fb      	beq.n	8005c48 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005c50:	4620      	mov	r0, r4
 8005c52:	4798      	blx	r3
      return;
 8005c54:	e7f8      	b.n	8005c48 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c56:	f013 0f01 	tst.w	r3, #1
 8005c5a:	d009      	beq.n	8005c70 <HAL_UART_IRQHandler+0xb0>
 8005c5c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005c60:	d006      	beq.n	8005c70 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c62:	2601      	movs	r6, #1
 8005c64:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c66:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005c6a:	4331      	orrs	r1, r6
 8005c6c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c70:	f013 0f02 	tst.w	r3, #2
 8005c74:	d00b      	beq.n	8005c8e <HAL_UART_IRQHandler+0xce>
 8005c76:	f015 0f01 	tst.w	r5, #1
 8005c7a:	d008      	beq.n	8005c8e <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c7c:	6821      	ldr	r1, [r4, #0]
 8005c7e:	2602      	movs	r6, #2
 8005c80:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c82:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005c86:	f041 0104 	orr.w	r1, r1, #4
 8005c8a:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c8e:	f013 0f04 	tst.w	r3, #4
 8005c92:	d00b      	beq.n	8005cac <HAL_UART_IRQHandler+0xec>
 8005c94:	f015 0f01 	tst.w	r5, #1
 8005c98:	d008      	beq.n	8005cac <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c9a:	6821      	ldr	r1, [r4, #0]
 8005c9c:	2604      	movs	r6, #4
 8005c9e:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ca0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005ca4:	f041 0102 	orr.w	r1, r1, #2
 8005ca8:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cac:	f013 0f08 	tst.w	r3, #8
 8005cb0:	d00b      	beq.n	8005cca <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005cb2:	f010 0f20 	tst.w	r0, #32
 8005cb6:	d100      	bne.n	8005cba <HAL_UART_IRQHandler+0xfa>
 8005cb8:	b13a      	cbz	r2, 8005cca <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cba:	6822      	ldr	r2, [r4, #0]
 8005cbc:	2108      	movs	r1, #8
 8005cbe:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cc0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005cca:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005cce:	d00c      	beq.n	8005cea <HAL_UART_IRQHandler+0x12a>
 8005cd0:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005cd4:	d009      	beq.n	8005cea <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005cdc:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cde:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005ce2:	f042 0220 	orr.w	r2, r2, #32
 8005ce6:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cea:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005cee:	2a00      	cmp	r2, #0
 8005cf0:	d0aa      	beq.n	8005c48 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cf2:	f013 0f20 	tst.w	r3, #32
 8005cf6:	d009      	beq.n	8005d0c <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cf8:	f010 0f20 	tst.w	r0, #32
 8005cfc:	d102      	bne.n	8005d04 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cfe:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005d02:	d003      	beq.n	8005d0c <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8005d04:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005d06:	b10b      	cbz	r3, 8005d0c <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8005d08:	4620      	mov	r0, r4
 8005d0a:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005d0c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005d18:	d102      	bne.n	8005d20 <HAL_UART_IRQHandler+0x160>
 8005d1a:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005d1e:	d02c      	beq.n	8005d7a <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 8005d20:	4620      	mov	r0, r4
 8005d22:	f7ff ff03 	bl	8005b2c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005d2e:	d020      	beq.n	8005d72 <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d30:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	f102 0308 	add.w	r3, r2, #8
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	3208      	adds	r2, #8
 8005d40:	e842 3100 	strex	r1, r3, [r2]
 8005d44:	2900      	cmp	r1, #0
 8005d46:	d1f3      	bne.n	8005d30 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005d48:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005d4c:	b16b      	cbz	r3, 8005d6a <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d4e:	4a67      	ldr	r2, [pc, #412]	; (8005eec <HAL_UART_IRQHandler+0x32c>)
 8005d50:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d52:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005d56:	f7fe fe27 	bl	80049a8 <HAL_DMA_Abort_IT>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	f43f af74 	beq.w	8005c48 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d60:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005d64:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005d66:	4798      	blx	r3
 8005d68:	e76e      	b.n	8005c48 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f7fd fda6 	bl	80038bc <HAL_UART_ErrorCallback>
 8005d70:	e76a      	b.n	8005c48 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8005d72:	4620      	mov	r0, r4
 8005d74:	f7fd fda2 	bl	80038bc <HAL_UART_ErrorCallback>
 8005d78:	e766      	b.n	8005c48 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f7fd fd9e 	bl	80038bc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d80:	2300      	movs	r3, #0
 8005d82:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 8005d86:	e75f      	b.n	8005c48 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d88:	f013 0f10 	tst.w	r3, #16
 8005d8c:	f43f af36 	beq.w	8005bfc <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d90:	f010 0f10 	tst.w	r0, #16
 8005d94:	f43f af32 	beq.w	8005bfc <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d98:	2310      	movs	r3, #16
 8005d9a:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005da4:	d053      	beq.n	8005e4e <HAL_UART_IRQHandler+0x28e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005da6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005daa:	6813      	ldr	r3, [r2, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f43f af49 	beq.w	8005c48 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005db6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005dba:	4299      	cmp	r1, r3
 8005dbc:	f67f af44 	bls.w	8005c48 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005dc0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005dc4:	6813      	ldr	r3, [r2, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f013 0f20 	tst.w	r3, #32
 8005dcc:	d132      	bne.n	8005e34 <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd0:	e852 3f00 	ldrex	r3, [r2]
 8005dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	e842 3100 	strex	r1, r3, [r2]
 8005ddc:	2900      	cmp	r1, #0
 8005dde:	d1f6      	bne.n	8005dce <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	f102 0308 	add.w	r3, r2, #8
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	3208      	adds	r2, #8
 8005df0:	e842 3100 	strex	r1, r3, [r2]
 8005df4:	2900      	cmp	r1, #0
 8005df6:	d1f3      	bne.n	8005de0 <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfa:	f102 0308 	add.w	r3, r2, #8
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e06:	3208      	adds	r2, #8
 8005e08:	e842 3100 	strex	r1, r3, [r2]
 8005e0c:	2900      	cmp	r1, #0
 8005e0e:	d1f3      	bne.n	8005df8 <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 8005e10:	2320      	movs	r3, #32
 8005e12:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e16:	2300      	movs	r3, #0
 8005e18:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e1a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	e852 3f00 	ldrex	r3, [r2]
 8005e20:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	e842 3100 	strex	r1, r3, [r2]
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	d1f6      	bne.n	8005e1a <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e2c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005e30:	f7fe fd84 	bl	800493c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e34:	2302      	movs	r3, #2
 8005e36:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e38:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005e3c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	1ac9      	subs	r1, r1, r3
 8005e44:	b289      	uxth	r1, r1
 8005e46:	4620      	mov	r0, r4
 8005e48:	f7ff feb8 	bl	8005bbc <HAL_UARTEx_RxEventCallback>
      return;
 8005e4c:	e6fc      	b.n	8005c48 <HAL_UART_IRQHandler+0x88>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e4e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005e52:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	1ac9      	subs	r1, r1, r3
 8005e5a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005e5c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f43f aef0 	beq.w	8005c48 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 8005e68:	2900      	cmp	r1, #0
 8005e6a:	f43f aeed 	beq.w	8005c48 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e6e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	e852 3f00 	ldrex	r3, [r2]
 8005e74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	e842 3000 	strex	r0, r3, [r2]
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d1f6      	bne.n	8005e6e <HAL_UART_IRQHandler+0x2ae>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e80:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	f102 0308 	add.w	r3, r2, #8
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	3208      	adds	r2, #8
 8005e94:	e842 3000 	strex	r0, r3, [r2]
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d1f1      	bne.n	8005e80 <HAL_UART_IRQHandler+0x2c0>
        huart->RxState = HAL_UART_STATE_READY;
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005ea6:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	e852 3f00 	ldrex	r3, [r2]
 8005eae:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	e842 3000 	strex	r0, r3, [r2]
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d1f6      	bne.n	8005ea8 <HAL_UART_IRQHandler+0x2e8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eba:	2302      	movs	r3, #2
 8005ebc:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f7ff fe7c 	bl	8005bbc <HAL_UARTEx_RxEventCallback>
      return;
 8005ec4:	e6c0      	b.n	8005c48 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ec6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005eca:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f000 ff05 	bl	8006cdc <HAL_UARTEx_WakeupCallback>
    return;
 8005ed2:	e6b9      	b.n	8005c48 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8005ed4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f43f aeb6 	beq.w	8005c48 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8005edc:	4620      	mov	r0, r4
 8005ede:	4798      	blx	r3
    return;
 8005ee0:	e6b2      	b.n	8005c48 <HAL_UART_IRQHandler+0x88>
 8005ee2:	bf00      	nop
 8005ee4:	10000001 	.word	0x10000001
 8005ee8:	04000120 	.word	0x04000120
 8005eec:	08005ba9 	.word	0x08005ba9
    UART_EndTransmit_IT(huart);
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f7ff fe47 	bl	8005b84 <UART_EndTransmit_IT>
    return;
 8005ef6:	e6a7      	b.n	8005c48 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f000 fef1 	bl	8006ce0 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005efe:	e6a3      	b.n	8005c48 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f00:	4620      	mov	r0, r4
 8005f02:	f000 feec 	bl	8006cde <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005f06:	e69f      	b.n	8005c48 <HAL_UART_IRQHandler+0x88>

08005f08 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005f08:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8005f0a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f0e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8005f12:	2a22      	cmp	r2, #34	; 0x22
 8005f14:	d005      	beq.n	8005f22 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f16:	6802      	ldr	r2, [r0, #0]
 8005f18:	6993      	ldr	r3, [r2, #24]
 8005f1a:	f043 0308 	orr.w	r3, r3, #8
 8005f1e:	6193      	str	r3, [r2, #24]
  }
}
 8005f20:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f22:	6802      	ldr	r2, [r0, #0]
 8005f24:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005f2a:	400b      	ands	r3, r1
 8005f2c:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005f2e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005f30:	3301      	adds	r3, #1
 8005f32:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005f34:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005f42:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e9      	bne.n	8005f20 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f4c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	e852 3f00 	ldrex	r3, [r2]
 8005f52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	e842 3100 	strex	r1, r3, [r2]
 8005f5a:	2900      	cmp	r1, #0
 8005f5c:	d1f6      	bne.n	8005f4c <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f60:	f102 0308 	add.w	r3, r2, #8
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	3208      	adds	r2, #8
 8005f6e:	e842 3100 	strex	r1, r3, [r2]
 8005f72:	2900      	cmp	r1, #0
 8005f74:	d1f3      	bne.n	8005f5e <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8005f76:	2320      	movs	r3, #32
 8005f78:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f80:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f82:	6803      	ldr	r3, [r0, #0]
 8005f84:	4a16      	ldr	r2, [pc, #88]	; (8005fe0 <UART_RxISR_8BIT+0xd8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00c      	beq.n	8005fa4 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005f90:	d008      	beq.n	8005fa4 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f92:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	e852 3f00 	ldrex	r3, [r2]
 8005f98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	e842 3100 	strex	r1, r3, [r2]
 8005fa0:	2900      	cmp	r1, #0
 8005fa2:	d1f6      	bne.n	8005f92 <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d116      	bne.n	8005fd8 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005faa:	2300      	movs	r3, #0
 8005fac:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	e852 3f00 	ldrex	r3, [r2]
 8005fb4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	e842 3100 	strex	r1, r3, [r2]
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	d1f6      	bne.n	8005fae <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fc0:	6803      	ldr	r3, [r0, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	f012 0f10 	tst.w	r2, #16
 8005fc8:	d001      	beq.n	8005fce <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fca:	2210      	movs	r2, #16
 8005fcc:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fce:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005fd2:	f7ff fdf3 	bl	8005bbc <HAL_UARTEx_RxEventCallback>
 8005fd6:	e7a3      	b.n	8005f20 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005fd8:	f7fd fc80 	bl	80038dc <HAL_UART_RxCpltCallback>
 8005fdc:	e7a0      	b.n	8005f20 <UART_RxISR_8BIT+0x18>
 8005fde:	bf00      	nop
 8005fe0:	40008000 	.word	0x40008000

08005fe4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005fe4:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005fe6:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fea:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8005fee:	2b22      	cmp	r3, #34	; 0x22
 8005ff0:	d005      	beq.n	8005ffe <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ff2:	6802      	ldr	r2, [r0, #0]
 8005ff4:	6993      	ldr	r3, [r2, #24]
 8005ff6:	f043 0308 	orr.w	r3, r3, #8
 8005ffa:	6193      	str	r3, [r2, #24]
  }
}
 8005ffc:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ffe:	6803      	ldr	r3, [r0, #0]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006002:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8006004:	4013      	ands	r3, r2
 8006006:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8006008:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800600a:	3302      	adds	r3, #2
 800600c:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800600e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29b      	uxth	r3, r3
 8006018:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800601c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1ea      	bne.n	8005ffc <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006026:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	e852 3f00 	ldrex	r3, [r2]
 800602c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	e842 3100 	strex	r1, r3, [r2]
 8006034:	2900      	cmp	r1, #0
 8006036:	d1f6      	bne.n	8006026 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006038:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	f102 0308 	add.w	r3, r2, #8
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	3208      	adds	r2, #8
 8006048:	e842 3100 	strex	r1, r3, [r2]
 800604c:	2900      	cmp	r1, #0
 800604e:	d1f3      	bne.n	8006038 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8006050:	2320      	movs	r3, #32
 8006052:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8006056:	2300      	movs	r3, #0
 8006058:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800605a:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800605c:	6803      	ldr	r3, [r0, #0]
 800605e:	4a16      	ldr	r2, [pc, #88]	; (80060b8 <UART_RxISR_16BIT+0xd4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00c      	beq.n	800607e <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800606a:	d008      	beq.n	800607e <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800606c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606e:	e852 3f00 	ldrex	r3, [r2]
 8006072:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	e842 3100 	strex	r1, r3, [r2]
 800607a:	2900      	cmp	r1, #0
 800607c:	d1f6      	bne.n	800606c <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800607e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006080:	2b01      	cmp	r3, #1
 8006082:	d116      	bne.n	80060b2 <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006084:	2300      	movs	r3, #0
 8006086:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006088:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	e852 3f00 	ldrex	r3, [r2]
 800608e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	e842 3100 	strex	r1, r3, [r2]
 8006096:	2900      	cmp	r1, #0
 8006098:	d1f6      	bne.n	8006088 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800609a:	6803      	ldr	r3, [r0, #0]
 800609c:	69da      	ldr	r2, [r3, #28]
 800609e:	f012 0f10 	tst.w	r2, #16
 80060a2:	d001      	beq.n	80060a8 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060a4:	2210      	movs	r2, #16
 80060a6:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060a8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80060ac:	f7ff fd86 	bl	8005bbc <HAL_UARTEx_RxEventCallback>
 80060b0:	e7a4      	b.n	8005ffc <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80060b2:	f7fd fc13 	bl	80038dc <HAL_UART_RxCpltCallback>
 80060b6:	e7a1      	b.n	8005ffc <UART_RxISR_16BIT+0x18>
 80060b8:	40008000 	.word	0x40008000

080060bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80060bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80060c0:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80060c4:	6803      	ldr	r3, [r0, #0]
 80060c6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80060c8:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80060cc:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060d0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80060d4:	2a22      	cmp	r2, #34	; 0x22
 80060d6:	d005      	beq.n	80060e4 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	f042 0208 	orr.w	r2, r2, #8
 80060de:	619a      	str	r2, [r3, #24]
  }
}
 80060e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060e4:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80060e6:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060ea:	e008      	b.n	80060fe <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d14c      	bne.n	800618e <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 80060f4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d04e      	beq.n	800619c <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060fe:	2f00      	cmp	r7, #0
 8006100:	f000 809a 	beq.w	8006238 <UART_RxISR_8BIT_FIFOEN+0x17c>
 8006104:	f015 0f20 	tst.w	r5, #32
 8006108:	f000 8096 	beq.w	8006238 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006110:	b2f3      	uxtb	r3, r6
 8006112:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006114:	400b      	ands	r3, r1
 8006116:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8006118:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800611a:	3301      	adds	r3, #1
 800611c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800611e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29b      	uxth	r3, r3
 8006128:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006130:	f015 0f07 	tst.w	r5, #7
 8006134:	d0de      	beq.n	80060f4 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006136:	f015 0f01 	tst.w	r5, #1
 800613a:	d009      	beq.n	8006150 <UART_RxISR_8BIT_FIFOEN+0x94>
 800613c:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006140:	d006      	beq.n	8006150 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006142:	2201      	movs	r2, #1
 8006144:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006146:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006150:	f015 0f02 	tst.w	r5, #2
 8006154:	d00b      	beq.n	800616e <UART_RxISR_8BIT_FIFOEN+0xb2>
 8006156:	f018 0f01 	tst.w	r8, #1
 800615a:	d008      	beq.n	800616e <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	2202      	movs	r2, #2
 8006160:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006162:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006166:	f043 0304 	orr.w	r3, r3, #4
 800616a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800616e:	f015 0f04 	tst.w	r5, #4
 8006172:	d0bb      	beq.n	80060ec <UART_RxISR_8BIT_FIFOEN+0x30>
 8006174:	f018 0f01 	tst.w	r8, #1
 8006178:	d0b8      	beq.n	80060ec <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	2204      	movs	r2, #4
 800617e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006180:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006184:	f043 0302 	orr.w	r3, r3, #2
 8006188:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800618c:	e7ae      	b.n	80060ec <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800618e:	4620      	mov	r0, r4
 8006190:	f7fd fb94 	bl	80038bc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006194:	2300      	movs	r3, #0
 8006196:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800619a:	e7ab      	b.n	80060f4 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800619c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	e852 3f00 	ldrex	r3, [r2]
 80061a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	e842 3100 	strex	r1, r3, [r2]
 80061aa:	2900      	cmp	r1, #0
 80061ac:	d1f6      	bne.n	800619c <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	f102 0308 	add.w	r3, r2, #8
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061bc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	3208      	adds	r2, #8
 80061c2:	e842 3100 	strex	r1, r3, [r2]
 80061c6:	2900      	cmp	r1, #0
 80061c8:	d1f1      	bne.n	80061ae <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80061ca:	2320      	movs	r3, #32
 80061cc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061d4:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	4a29      	ldr	r2, [pc, #164]	; (8006280 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d003      	beq.n	80061e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80061e4:	d106      	bne.n	80061f4 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d00d      	beq.n	8006208 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 80061ec:	4620      	mov	r0, r4
 80061ee:	f7fd fb75 	bl	80038dc <HAL_UART_RxCpltCallback>
 80061f2:	e784      	b.n	80060fe <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061f4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	e852 3f00 	ldrex	r3, [r2]
 80061fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	e842 3100 	strex	r1, r3, [r2]
 8006202:	2900      	cmp	r1, #0
 8006204:	d1f6      	bne.n	80061f4 <UART_RxISR_8BIT_FIFOEN+0x138>
 8006206:	e7ee      	b.n	80061e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006208:	2300      	movs	r3, #0
 800620a:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	e852 3f00 	ldrex	r3, [r2]
 8006212:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	e842 3100 	strex	r1, r3, [r2]
 800621a:	2900      	cmp	r1, #0
 800621c:	d1f6      	bne.n	800620c <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	69da      	ldr	r2, [r3, #28]
 8006222:	f012 0f10 	tst.w	r2, #16
 8006226:	d001      	beq.n	800622c <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006228:	2210      	movs	r2, #16
 800622a:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800622c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006230:	4620      	mov	r0, r4
 8006232:	f7ff fcc3 	bl	8005bbc <HAL_UARTEx_RxEventCallback>
 8006236:	e762      	b.n	80060fe <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006238:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800623c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800623e:	2b00      	cmp	r3, #0
 8006240:	f43f af4e 	beq.w	80060e0 <UART_RxISR_8BIT_FIFOEN+0x24>
 8006244:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006248:	429a      	cmp	r2, r3
 800624a:	f67f af49 	bls.w	80060e0 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800624e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	f102 0308 	add.w	r3, r2, #8
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	3208      	adds	r2, #8
 800625e:	e842 3100 	strex	r1, r3, [r2]
 8006262:	2900      	cmp	r1, #0
 8006264:	d1f3      	bne.n	800624e <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 8006266:	4b07      	ldr	r3, [pc, #28]	; (8006284 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8006268:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800626a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	e852 3f00 	ldrex	r3, [r2]
 8006270:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	e842 3100 	strex	r1, r3, [r2]
 8006278:	2900      	cmp	r1, #0
 800627a:	d1f6      	bne.n	800626a <UART_RxISR_8BIT_FIFOEN+0x1ae>
 800627c:	e730      	b.n	80060e0 <UART_RxISR_8BIT_FIFOEN+0x24>
 800627e:	bf00      	nop
 8006280:	40008000 	.word	0x40008000
 8006284:	08005f09 	.word	0x08005f09

08006288 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800628c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006290:	6803      	ldr	r3, [r0, #0]
 8006292:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006294:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006298:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800629c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80062a0:	2a22      	cmp	r2, #34	; 0x22
 80062a2:	d005      	beq.n	80062b0 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	f042 0208 	orr.w	r2, r2, #8
 80062aa:	619a      	str	r2, [r3, #24]
  }
}
 80062ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b0:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80062b2:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062b6:	e008      	b.n	80062ca <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062b8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d14b      	bne.n	8006358 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80062c0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d04d      	beq.n	8006366 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062ca:	2f00      	cmp	r7, #0
 80062cc:	f000 8099 	beq.w	8006402 <UART_RxISR_16BIT_FIFOEN+0x17a>
 80062d0:	f015 0f20 	tst.w	r5, #32
 80062d4:	f000 8095 	beq.w	8006402 <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062dc:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80062de:	4033      	ands	r3, r6
 80062e0:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80062e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062e4:	3302      	adds	r3, #2
 80062e6:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80062e8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	3b01      	subs	r3, #1
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80062fa:	f015 0f07 	tst.w	r5, #7
 80062fe:	d0df      	beq.n	80062c0 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006300:	f015 0f01 	tst.w	r5, #1
 8006304:	d009      	beq.n	800631a <UART_RxISR_16BIT_FIFOEN+0x92>
 8006306:	f419 7f80 	tst.w	r9, #256	; 0x100
 800630a:	d006      	beq.n	800631a <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800630c:	2201      	movs	r2, #1
 800630e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006310:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800631a:	f015 0f02 	tst.w	r5, #2
 800631e:	d00b      	beq.n	8006338 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8006320:	f018 0f01 	tst.w	r8, #1
 8006324:	d008      	beq.n	8006338 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	2202      	movs	r2, #2
 800632a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800632c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006330:	f043 0304 	orr.w	r3, r3, #4
 8006334:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006338:	f015 0f04 	tst.w	r5, #4
 800633c:	d0bc      	beq.n	80062b8 <UART_RxISR_16BIT_FIFOEN+0x30>
 800633e:	f018 0f01 	tst.w	r8, #1
 8006342:	d0b9      	beq.n	80062b8 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	2204      	movs	r2, #4
 8006348:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800634a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800634e:	f043 0302 	orr.w	r3, r3, #2
 8006352:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8006356:	e7af      	b.n	80062b8 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006358:	4620      	mov	r0, r4
 800635a:	f7fd faaf 	bl	80038bc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800635e:	2300      	movs	r3, #0
 8006360:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8006364:	e7ac      	b.n	80062c0 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006366:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	e852 3f00 	ldrex	r3, [r2]
 800636c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	e842 3100 	strex	r1, r3, [r2]
 8006374:	2900      	cmp	r1, #0
 8006376:	d1f6      	bne.n	8006366 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006378:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	f102 0308 	add.w	r3, r2, #8
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006386:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	3208      	adds	r2, #8
 800638c:	e842 3100 	strex	r1, r3, [r2]
 8006390:	2900      	cmp	r1, #0
 8006392:	d1f1      	bne.n	8006378 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8006394:	2320      	movs	r3, #32
 8006396:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800639e:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	4a29      	ldr	r2, [pc, #164]	; (8006448 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d003      	beq.n	80063b0 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80063ae:	d106      	bne.n	80063be <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d00d      	beq.n	80063d2 <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 80063b6:	4620      	mov	r0, r4
 80063b8:	f7fd fa90 	bl	80038dc <HAL_UART_RxCpltCallback>
 80063bc:	e785      	b.n	80062ca <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063be:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	e852 3f00 	ldrex	r3, [r2]
 80063c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	e842 3100 	strex	r1, r3, [r2]
 80063cc:	2900      	cmp	r1, #0
 80063ce:	d1f6      	bne.n	80063be <UART_RxISR_16BIT_FIFOEN+0x136>
 80063d0:	e7ee      	b.n	80063b0 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d2:	2300      	movs	r3, #0
 80063d4:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	e852 3f00 	ldrex	r3, [r2]
 80063dc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	e842 3100 	strex	r1, r3, [r2]
 80063e4:	2900      	cmp	r1, #0
 80063e6:	d1f6      	bne.n	80063d6 <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	69da      	ldr	r2, [r3, #28]
 80063ec:	f012 0f10 	tst.w	r2, #16
 80063f0:	d001      	beq.n	80063f6 <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063f2:	2210      	movs	r2, #16
 80063f4:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063f6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80063fa:	4620      	mov	r0, r4
 80063fc:	f7ff fbde 	bl	8005bbc <HAL_UARTEx_RxEventCallback>
 8006400:	e763      	b.n	80062ca <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006402:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006406:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006408:	2b00      	cmp	r3, #0
 800640a:	f43f af4f 	beq.w	80062ac <UART_RxISR_16BIT_FIFOEN+0x24>
 800640e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006412:	429a      	cmp	r2, r3
 8006414:	f67f af4a 	bls.w	80062ac <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006418:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	f102 0308 	add.w	r3, r2, #8
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	3208      	adds	r2, #8
 8006428:	e842 3100 	strex	r1, r3, [r2]
 800642c:	2900      	cmp	r1, #0
 800642e:	d1f3      	bne.n	8006418 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8006430:	4b06      	ldr	r3, [pc, #24]	; (800644c <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8006432:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006434:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	e852 3f00 	ldrex	r3, [r2]
 800643a:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643e:	e842 3100 	strex	r1, r3, [r2]
 8006442:	2900      	cmp	r1, #0
 8006444:	d1f6      	bne.n	8006434 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8006446:	e731      	b.n	80062ac <UART_RxISR_16BIT_FIFOEN+0x24>
 8006448:	40008000 	.word	0x40008000
 800644c:	08005fe5 	.word	0x08005fe5

08006450 <UART_SetConfig>:
{
 8006450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006454:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006456:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006458:	6883      	ldr	r3, [r0, #8]
 800645a:	6902      	ldr	r2, [r0, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	6942      	ldr	r2, [r0, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	69c2      	ldr	r2, [r0, #28]
 8006464:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006466:	6808      	ldr	r0, [r1, #0]
 8006468:	4a9d      	ldr	r2, [pc, #628]	; (80066e0 <UART_SetConfig+0x290>)
 800646a:	4002      	ands	r2, r0
 800646c:	4313      	orrs	r3, r2
 800646e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006470:	6822      	ldr	r2, [r4, #0]
 8006472:	6853      	ldr	r3, [r2, #4]
 8006474:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006478:	68e1      	ldr	r1, [r4, #12]
 800647a:	430b      	orrs	r3, r1
 800647c:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800647e:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006480:	6822      	ldr	r2, [r4, #0]
 8006482:	4b98      	ldr	r3, [pc, #608]	; (80066e4 <UART_SetConfig+0x294>)
 8006484:	429a      	cmp	r2, r3
 8006486:	d001      	beq.n	800648c <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8006488:	6a23      	ldr	r3, [r4, #32]
 800648a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800648c:	6893      	ldr	r3, [r2, #8]
 800648e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006492:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006496:	430b      	orrs	r3, r1
 8006498:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800649a:	6822      	ldr	r2, [r4, #0]
 800649c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800649e:	f023 030f 	bic.w	r3, r3, #15
 80064a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064a4:	430b      	orrs	r3, r1
 80064a6:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064a8:	6822      	ldr	r2, [r4, #0]
 80064aa:	4b8f      	ldr	r3, [pc, #572]	; (80066e8 <UART_SetConfig+0x298>)
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d023      	beq.n	80064f8 <UART_SetConfig+0xa8>
 80064b0:	4b8e      	ldr	r3, [pc, #568]	; (80066ec <UART_SetConfig+0x29c>)
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d034      	beq.n	8006520 <UART_SetConfig+0xd0>
 80064b6:	4b8e      	ldr	r3, [pc, #568]	; (80066f0 <UART_SetConfig+0x2a0>)
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d04a      	beq.n	8006552 <UART_SetConfig+0x102>
 80064bc:	4b8d      	ldr	r3, [pc, #564]	; (80066f4 <UART_SetConfig+0x2a4>)
 80064be:	429a      	cmp	r2, r3
 80064c0:	d059      	beq.n	8006576 <UART_SetConfig+0x126>
 80064c2:	4b88      	ldr	r3, [pc, #544]	; (80066e4 <UART_SetConfig+0x294>)
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d068      	beq.n	800659a <UART_SetConfig+0x14a>
 80064c8:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80064ca:	4986      	ldr	r1, [pc, #536]	; (80066e4 <UART_SetConfig+0x294>)
 80064cc:	428a      	cmp	r2, r1
 80064ce:	f000 8095 	beq.w	80065fc <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064d2:	69e0      	ldr	r0, [r4, #28]
 80064d4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80064d8:	f000 80d4 	beq.w	8006684 <UART_SetConfig+0x234>
    switch (clocksource)
 80064dc:	2b08      	cmp	r3, #8
 80064de:	f200 8152 	bhi.w	8006786 <UART_SetConfig+0x336>
 80064e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80064e6:	0114      	.short	0x0114
 80064e8:	01120137 	.word	0x01120137
 80064ec:	013a0150 	.word	0x013a0150
 80064f0:	01500150 	.word	0x01500150
 80064f4:	013d0150 	.word	0x013d0150
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064f8:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80064fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006500:	f003 0303 	and.w	r3, r3, #3
 8006504:	2b03      	cmp	r3, #3
 8006506:	d809      	bhi.n	800651c <UART_SetConfig+0xcc>
 8006508:	e8df f003 	tbb	[pc, r3]
 800650c:	065c0402 	.word	0x065c0402
 8006510:	2301      	movs	r3, #1
 8006512:	e7da      	b.n	80064ca <UART_SetConfig+0x7a>
 8006514:	2304      	movs	r3, #4
 8006516:	e7d8      	b.n	80064ca <UART_SetConfig+0x7a>
 8006518:	2308      	movs	r3, #8
 800651a:	e7d6      	b.n	80064ca <UART_SetConfig+0x7a>
 800651c:	2310      	movs	r3, #16
 800651e:	e7d4      	b.n	80064ca <UART_SetConfig+0x7a>
 8006520:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8006524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006528:	f003 030c 	and.w	r3, r3, #12
 800652c:	2b0c      	cmp	r3, #12
 800652e:	d80e      	bhi.n	800654e <UART_SetConfig+0xfe>
 8006530:	e8df f003 	tbb	[pc, r3]
 8006534:	0d0d0d07 	.word	0x0d0d0d07
 8006538:	0d0d0d09 	.word	0x0d0d0d09
 800653c:	0d0d0d4a 	.word	0x0d0d0d4a
 8006540:	0b          	.byte	0x0b
 8006541:	00          	.byte	0x00
 8006542:	2300      	movs	r3, #0
 8006544:	e7c1      	b.n	80064ca <UART_SetConfig+0x7a>
 8006546:	2304      	movs	r3, #4
 8006548:	e7bf      	b.n	80064ca <UART_SetConfig+0x7a>
 800654a:	2308      	movs	r3, #8
 800654c:	e7bd      	b.n	80064ca <UART_SetConfig+0x7a>
 800654e:	2310      	movs	r3, #16
 8006550:	e7bb      	b.n	80064ca <UART_SetConfig+0x7a>
 8006552:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8006556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800655e:	2b20      	cmp	r3, #32
 8006560:	d034      	beq.n	80065cc <UART_SetConfig+0x17c>
 8006562:	d804      	bhi.n	800656e <UART_SetConfig+0x11e>
 8006564:	b3a3      	cbz	r3, 80065d0 <UART_SetConfig+0x180>
 8006566:	2b10      	cmp	r3, #16
 8006568:	d134      	bne.n	80065d4 <UART_SetConfig+0x184>
 800656a:	2304      	movs	r3, #4
 800656c:	e7ad      	b.n	80064ca <UART_SetConfig+0x7a>
 800656e:	2b30      	cmp	r3, #48	; 0x30
 8006570:	d132      	bne.n	80065d8 <UART_SetConfig+0x188>
 8006572:	2308      	movs	r3, #8
 8006574:	e7a9      	b.n	80064ca <UART_SetConfig+0x7a>
 8006576:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006582:	2b80      	cmp	r3, #128	; 0x80
 8006584:	d02a      	beq.n	80065dc <UART_SetConfig+0x18c>
 8006586:	d804      	bhi.n	8006592 <UART_SetConfig+0x142>
 8006588:	b353      	cbz	r3, 80065e0 <UART_SetConfig+0x190>
 800658a:	2b40      	cmp	r3, #64	; 0x40
 800658c:	d12a      	bne.n	80065e4 <UART_SetConfig+0x194>
 800658e:	2304      	movs	r3, #4
 8006590:	e79b      	b.n	80064ca <UART_SetConfig+0x7a>
 8006592:	2bc0      	cmp	r3, #192	; 0xc0
 8006594:	d128      	bne.n	80065e8 <UART_SetConfig+0x198>
 8006596:	2308      	movs	r3, #8
 8006598:	e797      	b.n	80064ca <UART_SetConfig+0x7a>
 800659a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800659e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065aa:	d01f      	beq.n	80065ec <UART_SetConfig+0x19c>
 80065ac:	d805      	bhi.n	80065ba <UART_SetConfig+0x16a>
 80065ae:	b1fb      	cbz	r3, 80065f0 <UART_SetConfig+0x1a0>
 80065b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b4:	d11e      	bne.n	80065f4 <UART_SetConfig+0x1a4>
 80065b6:	2304      	movs	r3, #4
 80065b8:	e787      	b.n	80064ca <UART_SetConfig+0x7a>
 80065ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065be:	d11b      	bne.n	80065f8 <UART_SetConfig+0x1a8>
 80065c0:	2308      	movs	r3, #8
 80065c2:	e782      	b.n	80064ca <UART_SetConfig+0x7a>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e780      	b.n	80064ca <UART_SetConfig+0x7a>
 80065c8:	2302      	movs	r3, #2
 80065ca:	e77e      	b.n	80064ca <UART_SetConfig+0x7a>
 80065cc:	2302      	movs	r3, #2
 80065ce:	e77c      	b.n	80064ca <UART_SetConfig+0x7a>
 80065d0:	2300      	movs	r3, #0
 80065d2:	e77a      	b.n	80064ca <UART_SetConfig+0x7a>
 80065d4:	2310      	movs	r3, #16
 80065d6:	e778      	b.n	80064ca <UART_SetConfig+0x7a>
 80065d8:	2310      	movs	r3, #16
 80065da:	e776      	b.n	80064ca <UART_SetConfig+0x7a>
 80065dc:	2302      	movs	r3, #2
 80065de:	e774      	b.n	80064ca <UART_SetConfig+0x7a>
 80065e0:	2300      	movs	r3, #0
 80065e2:	e772      	b.n	80064ca <UART_SetConfig+0x7a>
 80065e4:	2310      	movs	r3, #16
 80065e6:	e770      	b.n	80064ca <UART_SetConfig+0x7a>
 80065e8:	2310      	movs	r3, #16
 80065ea:	e76e      	b.n	80064ca <UART_SetConfig+0x7a>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e76c      	b.n	80064ca <UART_SetConfig+0x7a>
 80065f0:	2300      	movs	r3, #0
 80065f2:	e76a      	b.n	80064ca <UART_SetConfig+0x7a>
 80065f4:	2310      	movs	r3, #16
 80065f6:	e768      	b.n	80064ca <UART_SetConfig+0x7a>
 80065f8:	2310      	movs	r3, #16
 80065fa:	e766      	b.n	80064ca <UART_SetConfig+0x7a>
    switch (clocksource)
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	f200 80b2 	bhi.w	8006766 <UART_SetConfig+0x316>
 8006602:	e8df f003 	tbb	[pc, r3]
 8006606:	b008      	.short	0xb008
 8006608:	b03ab03d 	.word	0xb03ab03d
 800660c:	b0b0      	.short	0xb0b0
 800660e:	05          	.byte	0x05
 800660f:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 8006610:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006614:	e004      	b.n	8006620 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006616:	f7fe ffbd 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800661a:	2800      	cmp	r0, #0
 800661c:	f000 80a5 	beq.w	800676a <UART_SetConfig+0x31a>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006620:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006622:	4b35      	ldr	r3, [pc, #212]	; (80066f8 <UART_SetConfig+0x2a8>)
 8006624:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006628:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800662c:	6865      	ldr	r5, [r4, #4]
 800662e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006632:	4299      	cmp	r1, r3
 8006634:	f200 809b 	bhi.w	800676e <UART_SetConfig+0x31e>
 8006638:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800663c:	f200 8099 	bhi.w	8006772 <UART_SetConfig+0x322>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006640:	f04f 0800 	mov.w	r8, #0
 8006644:	b292      	uxth	r2, r2
 8006646:	2300      	movs	r3, #0
 8006648:	4641      	mov	r1, r8
 800664a:	f7fb fa85 	bl	8001b58 <__aeabi_uldivmod>
 800664e:	020f      	lsls	r7, r1, #8
 8006650:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8006654:	0206      	lsls	r6, r0, #8
 8006656:	0868      	lsrs	r0, r5, #1
 8006658:	462a      	mov	r2, r5
 800665a:	4643      	mov	r3, r8
 800665c:	1830      	adds	r0, r6, r0
 800665e:	f147 0100 	adc.w	r1, r7, #0
 8006662:	f7fb fa79 	bl	8001b58 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006666:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800666a:	4b24      	ldr	r3, [pc, #144]	; (80066fc <UART_SetConfig+0x2ac>)
 800666c:	429a      	cmp	r2, r3
 800666e:	f200 8082 	bhi.w	8006776 <UART_SetConfig+0x326>
          huart->Instance->BRR = usartdiv;
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	60d8      	str	r0, [r3, #12]
 8006676:	4640      	mov	r0, r8
 8006678:	e062      	b.n	8006740 <UART_SetConfig+0x2f0>
        pclk = HAL_RCC_GetSysClockFreq();
 800667a:	f7fe fe45 	bl	8005308 <HAL_RCC_GetSysClockFreq>
        break;
 800667e:	e7cc      	b.n	800661a <UART_SetConfig+0x1ca>
        pclk = (uint32_t) HSI_VALUE;
 8006680:	481f      	ldr	r0, [pc, #124]	; (8006700 <UART_SetConfig+0x2b0>)
 8006682:	e7cd      	b.n	8006620 <UART_SetConfig+0x1d0>
    switch (clocksource)
 8006684:	2b08      	cmp	r3, #8
 8006686:	d878      	bhi.n	800677a <UART_SetConfig+0x32a>
 8006688:	e8df f003 	tbb	[pc, r3]
 800668c:	77052707 	.word	0x77052707
 8006690:	7777773c 	.word	0x7777773c
 8006694:	0b          	.byte	0x0b
 8006695:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006696:	481a      	ldr	r0, [pc, #104]	; (8006700 <UART_SetConfig+0x2b0>)
 8006698:	e003      	b.n	80066a2 <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetPCLK1Freq();
 800669a:	f7fe ff7b 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800669e:	2800      	cmp	r0, #0
 80066a0:	d06d      	beq.n	800677e <UART_SetConfig+0x32e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80066a4:	4b14      	ldr	r3, [pc, #80]	; (80066f8 <UART_SetConfig+0x2a8>)
 80066a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80066aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80066ae:	6862      	ldr	r2, [r4, #4]
 80066b0:	0853      	lsrs	r3, r2, #1
 80066b2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80066b6:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ba:	f1a0 0210 	sub.w	r2, r0, #16
 80066be:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d85d      	bhi.n	8006782 <UART_SetConfig+0x332>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066c6:	b283      	uxth	r3, r0
 80066c8:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066cc:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80066d0:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	60d8      	str	r0, [r3, #12]
 80066d6:	2000      	movs	r0, #0
 80066d8:	e032      	b.n	8006740 <UART_SetConfig+0x2f0>
        pclk = HAL_RCC_GetPCLK2Freq();
 80066da:	f7fe ff6d 	bl	80055b8 <HAL_RCC_GetPCLK2Freq>
        break;
 80066de:	e7de      	b.n	800669e <UART_SetConfig+0x24e>
 80066e0:	cfff69f3 	.word	0xcfff69f3
 80066e4:	40008000 	.word	0x40008000
 80066e8:	40013800 	.word	0x40013800
 80066ec:	40004400 	.word	0x40004400
 80066f0:	40004800 	.word	0x40004800
 80066f4:	40004c00 	.word	0x40004c00
 80066f8:	0800b128 	.word	0x0800b128
 80066fc:	000ffcff 	.word	0x000ffcff
 8006700:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetSysClockFreq();
 8006704:	f7fe fe00 	bl	8005308 <HAL_RCC_GetSysClockFreq>
        break;
 8006708:	e7c9      	b.n	800669e <UART_SetConfig+0x24e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800670a:	4822      	ldr	r0, [pc, #136]	; (8006794 <UART_SetConfig+0x344>)
 800670c:	e003      	b.n	8006716 <UART_SetConfig+0x2c6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800670e:	f7fe ff41 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006712:	2800      	cmp	r0, #0
 8006714:	d039      	beq.n	800678a <UART_SetConfig+0x33a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006716:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006718:	4b1f      	ldr	r3, [pc, #124]	; (8006798 <UART_SetConfig+0x348>)
 800671a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800671e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006722:	6863      	ldr	r3, [r4, #4]
 8006724:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006728:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800672c:	f1a0 0210 	sub.w	r2, r0, #16
 8006730:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006734:	429a      	cmp	r2, r3
 8006736:	d82a      	bhi.n	800678e <UART_SetConfig+0x33e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	b280      	uxth	r0, r0
 800673c:	60d8      	str	r0, [r3, #12]
 800673e:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8006740:	2301      	movs	r3, #1
 8006742:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006746:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800674e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8006750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006754:	f7fe ff30 	bl	80055b8 <HAL_RCC_GetPCLK2Freq>
        break;
 8006758:	e7db      	b.n	8006712 <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetSysClockFreq();
 800675a:	f7fe fdd5 	bl	8005308 <HAL_RCC_GetSysClockFreq>
        break;
 800675e:	e7d8      	b.n	8006712 <UART_SetConfig+0x2c2>
        pclk = (uint32_t) LSE_VALUE;
 8006760:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006764:	e7d7      	b.n	8006716 <UART_SetConfig+0x2c6>
  if (UART_INSTANCE_LOWPOWER(huart))
 8006766:	2001      	movs	r0, #1
 8006768:	e7ea      	b.n	8006740 <UART_SetConfig+0x2f0>
 800676a:	2000      	movs	r0, #0
 800676c:	e7e8      	b.n	8006740 <UART_SetConfig+0x2f0>
        ret = HAL_ERROR;
 800676e:	2001      	movs	r0, #1
 8006770:	e7e6      	b.n	8006740 <UART_SetConfig+0x2f0>
 8006772:	2001      	movs	r0, #1
 8006774:	e7e4      	b.n	8006740 <UART_SetConfig+0x2f0>
          ret = HAL_ERROR;
 8006776:	2001      	movs	r0, #1
 8006778:	e7e2      	b.n	8006740 <UART_SetConfig+0x2f0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800677a:	2001      	movs	r0, #1
 800677c:	e7e0      	b.n	8006740 <UART_SetConfig+0x2f0>
 800677e:	2000      	movs	r0, #0
 8006780:	e7de      	b.n	8006740 <UART_SetConfig+0x2f0>
        ret = HAL_ERROR;
 8006782:	2001      	movs	r0, #1
 8006784:	e7dc      	b.n	8006740 <UART_SetConfig+0x2f0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006786:	2001      	movs	r0, #1
 8006788:	e7da      	b.n	8006740 <UART_SetConfig+0x2f0>
 800678a:	2000      	movs	r0, #0
 800678c:	e7d8      	b.n	8006740 <UART_SetConfig+0x2f0>
        ret = HAL_ERROR;
 800678e:	2001      	movs	r0, #1
 8006790:	e7d6      	b.n	8006740 <UART_SetConfig+0x2f0>
 8006792:	bf00      	nop
 8006794:	00f42400 	.word	0x00f42400
 8006798:	0800b128 	.word	0x0800b128

0800679c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800679c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800679e:	f013 0f08 	tst.w	r3, #8
 80067a2:	d006      	beq.n	80067b2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067a4:	6802      	ldr	r2, [r0, #0]
 80067a6:	6853      	ldr	r3, [r2, #4]
 80067a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067ac:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80067ae:	430b      	orrs	r3, r1
 80067b0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80067b4:	f013 0f01 	tst.w	r3, #1
 80067b8:	d006      	beq.n	80067c8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067ba:	6802      	ldr	r2, [r0, #0]
 80067bc:	6853      	ldr	r3, [r2, #4]
 80067be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067c2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80067c4:	430b      	orrs	r3, r1
 80067c6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80067ca:	f013 0f02 	tst.w	r3, #2
 80067ce:	d006      	beq.n	80067de <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067d0:	6802      	ldr	r2, [r0, #0]
 80067d2:	6853      	ldr	r3, [r2, #4]
 80067d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067d8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80067da:	430b      	orrs	r3, r1
 80067dc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80067e0:	f013 0f04 	tst.w	r3, #4
 80067e4:	d006      	beq.n	80067f4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067e6:	6802      	ldr	r2, [r0, #0]
 80067e8:	6853      	ldr	r3, [r2, #4]
 80067ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067ee:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80067f0:	430b      	orrs	r3, r1
 80067f2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80067f6:	f013 0f10 	tst.w	r3, #16
 80067fa:	d006      	beq.n	800680a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067fc:	6802      	ldr	r2, [r0, #0]
 80067fe:	6893      	ldr	r3, [r2, #8]
 8006800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006804:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006806:	430b      	orrs	r3, r1
 8006808:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800680a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800680c:	f013 0f20 	tst.w	r3, #32
 8006810:	d006      	beq.n	8006820 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006812:	6802      	ldr	r2, [r0, #0]
 8006814:	6893      	ldr	r3, [r2, #8]
 8006816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800681a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800681c:	430b      	orrs	r3, r1
 800681e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006820:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006822:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006826:	d00a      	beq.n	800683e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006828:	6802      	ldr	r2, [r0, #0]
 800682a:	6853      	ldr	r3, [r2, #4]
 800682c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006830:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006832:	430b      	orrs	r3, r1
 8006834:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006836:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800683c:	d00b      	beq.n	8006856 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800683e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006840:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006844:	d006      	beq.n	8006854 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006846:	6802      	ldr	r2, [r0, #0]
 8006848:	6853      	ldr	r3, [r2, #4]
 800684a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800684e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006850:	430b      	orrs	r3, r1
 8006852:	6053      	str	r3, [r2, #4]
}
 8006854:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006856:	6802      	ldr	r2, [r0, #0]
 8006858:	6853      	ldr	r3, [r2, #4]
 800685a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800685e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006860:	430b      	orrs	r3, r1
 8006862:	6053      	str	r3, [r2, #4]
 8006864:	e7eb      	b.n	800683e <UART_AdvFeatureConfig+0xa2>

08006866 <UART_WaitOnFlagUntilTimeout>:
{
 8006866:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800686a:	4605      	mov	r5, r0
 800686c:	460e      	mov	r6, r1
 800686e:	4617      	mov	r7, r2
 8006870:	4699      	mov	r9, r3
 8006872:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006876:	682c      	ldr	r4, [r5, #0]
 8006878:	69e4      	ldr	r4, [r4, #28]
 800687a:	ea36 0304 	bics.w	r3, r6, r4
 800687e:	bf0c      	ite	eq
 8006880:	2401      	moveq	r4, #1
 8006882:	2400      	movne	r4, #0
 8006884:	42bc      	cmp	r4, r7
 8006886:	d136      	bne.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x90>
    if (Timeout != HAL_MAX_DELAY)
 8006888:	f1b8 3fff 	cmp.w	r8, #4294967295
 800688c:	d0f3      	beq.n	8006876 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800688e:	f7fd f8a5 	bl	80039dc <HAL_GetTick>
 8006892:	eba0 0009 	sub.w	r0, r0, r9
 8006896:	4540      	cmp	r0, r8
 8006898:	d830      	bhi.n	80068fc <UART_WaitOnFlagUntilTimeout+0x96>
 800689a:	f1b8 0f00 	cmp.w	r8, #0
 800689e:	d02f      	beq.n	8006900 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	f012 0f04 	tst.w	r2, #4
 80068a8:	d0e5      	beq.n	8006876 <UART_WaitOnFlagUntilTimeout+0x10>
 80068aa:	2e80      	cmp	r6, #128	; 0x80
 80068ac:	d0e3      	beq.n	8006876 <UART_WaitOnFlagUntilTimeout+0x10>
 80068ae:	2e40      	cmp	r6, #64	; 0x40
 80068b0:	d0e1      	beq.n	8006876 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	f012 0f08 	tst.w	r2, #8
 80068b8:	d111      	bne.n	80068de <UART_WaitOnFlagUntilTimeout+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068ba:	69da      	ldr	r2, [r3, #28]
 80068bc:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80068c0:	d0d9      	beq.n	8006876 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068c6:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80068c8:	4628      	mov	r0, r5
 80068ca:	f7ff f92f 	bl	8005b2c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ce:	2320      	movs	r3, #32
 80068d0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 80068d4:	2300      	movs	r3, #0
 80068d6:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 80068da:	2003      	movs	r0, #3
 80068dc:	e00c      	b.n	80068f8 <UART_WaitOnFlagUntilTimeout+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068de:	2408      	movs	r4, #8
 80068e0:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 80068e2:	4628      	mov	r0, r5
 80068e4:	f7ff f922 	bl	8005b2c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068e8:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 80068ec:	2300      	movs	r3, #0
 80068ee:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_ERROR;
 80068f2:	2001      	movs	r0, #1
 80068f4:	e000      	b.n	80068f8 <UART_WaitOnFlagUntilTimeout+0x92>
  return HAL_OK;
 80068f6:	2000      	movs	r0, #0
}
 80068f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80068fc:	2003      	movs	r0, #3
 80068fe:	e7fb      	b.n	80068f8 <UART_WaitOnFlagUntilTimeout+0x92>
 8006900:	2003      	movs	r0, #3
 8006902:	e7f9      	b.n	80068f8 <UART_WaitOnFlagUntilTimeout+0x92>

08006904 <HAL_UART_Transmit>:
{
 8006904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800690c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006910:	2b20      	cmp	r3, #32
 8006912:	d15a      	bne.n	80069ca <HAL_UART_Transmit+0xc6>
 8006914:	4604      	mov	r4, r0
 8006916:	460d      	mov	r5, r1
 8006918:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800691a:	2900      	cmp	r1, #0
 800691c:	d059      	beq.n	80069d2 <HAL_UART_Transmit+0xce>
 800691e:	b90a      	cbnz	r2, 8006924 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8006920:	2001      	movs	r0, #1
 8006922:	e053      	b.n	80069cc <HAL_UART_Transmit+0xc8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006924:	2300      	movs	r3, #0
 8006926:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800692a:	2321      	movs	r3, #33	; 0x21
 800692c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    tickstart = HAL_GetTick();
 8006930:	f7fd f854 	bl	80039dc <HAL_GetTick>
 8006934:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8006936:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 800693a:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800693e:	68a3      	ldr	r3, [r4, #8]
 8006940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006944:	d002      	beq.n	800694c <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8006946:	f04f 0800 	mov.w	r8, #0
 800694a:	e016      	b.n	800697a <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	b343      	cbz	r3, 80069a2 <HAL_UART_Transmit+0x9e>
      pdata16bits = NULL;
 8006950:	f04f 0800 	mov.w	r8, #0
 8006954:	e011      	b.n	800697a <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8006956:	2320      	movs	r3, #32
 8006958:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_TIMEOUT;
 800695c:	2003      	movs	r0, #3
 800695e:	e035      	b.n	80069cc <HAL_UART_Transmit+0xc8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006960:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006964:	6822      	ldr	r2, [r4, #0]
 8006966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800696a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800696c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8006970:	b292      	uxth	r2, r2
 8006972:	3a01      	subs	r2, #1
 8006974:	b292      	uxth	r2, r2
 8006976:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800697a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800697e:	b29b      	uxth	r3, r3
 8006980:	b193      	cbz	r3, 80069a8 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006982:	9600      	str	r6, [sp, #0]
 8006984:	463b      	mov	r3, r7
 8006986:	2200      	movs	r2, #0
 8006988:	2180      	movs	r1, #128	; 0x80
 800698a:	4620      	mov	r0, r4
 800698c:	f7ff ff6b 	bl	8006866 <UART_WaitOnFlagUntilTimeout>
 8006990:	2800      	cmp	r0, #0
 8006992:	d1e0      	bne.n	8006956 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8006994:	2d00      	cmp	r5, #0
 8006996:	d0e3      	beq.n	8006960 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006998:	f815 2b01 	ldrb.w	r2, [r5], #1
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069a0:	e7e4      	b.n	800696c <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80069a2:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80069a4:	2500      	movs	r5, #0
 80069a6:	e7e8      	b.n	800697a <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069a8:	9600      	str	r6, [sp, #0]
 80069aa:	463b      	mov	r3, r7
 80069ac:	2200      	movs	r2, #0
 80069ae:	2140      	movs	r1, #64	; 0x40
 80069b0:	4620      	mov	r0, r4
 80069b2:	f7ff ff58 	bl	8006866 <UART_WaitOnFlagUntilTimeout>
 80069b6:	b918      	cbnz	r0, 80069c0 <HAL_UART_Transmit+0xbc>
    huart->gState = HAL_UART_STATE_READY;
 80069b8:	2320      	movs	r3, #32
 80069ba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_OK;
 80069be:	e005      	b.n	80069cc <HAL_UART_Transmit+0xc8>
      huart->gState = HAL_UART_STATE_READY;
 80069c0:	2320      	movs	r3, #32
 80069c2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 80069c6:	2003      	movs	r0, #3
 80069c8:	e000      	b.n	80069cc <HAL_UART_Transmit+0xc8>
    return HAL_BUSY;
 80069ca:	2002      	movs	r0, #2
}
 80069cc:	b002      	add	sp, #8
 80069ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80069d2:	2001      	movs	r0, #1
 80069d4:	e7fa      	b.n	80069cc <HAL_UART_Transmit+0xc8>

080069d6 <UART_CheckIdleState>:
{
 80069d6:	b530      	push	{r4, r5, lr}
 80069d8:	b083      	sub	sp, #12
 80069da:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069dc:	2300      	movs	r3, #0
 80069de:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 80069e2:	f7fc fffb 	bl	80039dc <HAL_GetTick>
 80069e6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f013 0f08 	tst.w	r3, #8
 80069f0:	d110      	bne.n	8006a14 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f013 0f04 	tst.w	r3, #4
 80069fa:	d128      	bne.n	8006a4e <UART_CheckIdleState+0x78>
  huart->gState = HAL_UART_STATE_READY;
 80069fc:	2320      	movs	r3, #32
 80069fe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a02:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a06:	2000      	movs	r0, #0
 8006a08:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a0a:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8006a0c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006a10:	b003      	add	sp, #12
 8006a12:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a22:	4620      	mov	r0, r4
 8006a24:	f7ff ff1f 	bl	8006866 <UART_WaitOnFlagUntilTimeout>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d0e2      	beq.n	80069f2 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a2c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	e852 3f00 	ldrex	r3, [r2]
 8006a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	e842 3100 	strex	r1, r3, [r2]
 8006a3a:	2900      	cmp	r1, #0
 8006a3c:	d1f6      	bne.n	8006a2c <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 8006a3e:	2320      	movs	r3, #32
 8006a40:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      __HAL_UNLOCK(huart);
 8006a44:	2300      	movs	r3, #0
 8006a46:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8006a4a:	2003      	movs	r0, #3
 8006a4c:	e7e0      	b.n	8006a10 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	462b      	mov	r3, r5
 8006a56:	2200      	movs	r2, #0
 8006a58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f7ff ff02 	bl	8006866 <UART_WaitOnFlagUntilTimeout>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d0ca      	beq.n	80069fc <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a66:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	e852 3f00 	ldrex	r3, [r2]
 8006a6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	e842 3100 	strex	r1, r3, [r2]
 8006a74:	2900      	cmp	r1, #0
 8006a76:	d1f6      	bne.n	8006a66 <UART_CheckIdleState+0x90>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a78:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7a:	f102 0308 	add.w	r3, r2, #8
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	3208      	adds	r2, #8
 8006a88:	e842 3100 	strex	r1, r3, [r2]
 8006a8c:	2900      	cmp	r1, #0
 8006a8e:	d1f3      	bne.n	8006a78 <UART_CheckIdleState+0xa2>
      huart->RxState = HAL_UART_STATE_READY;
 8006a90:	2320      	movs	r3, #32
 8006a92:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      __HAL_UNLOCK(huart);
 8006a96:	2300      	movs	r3, #0
 8006a98:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8006a9c:	2003      	movs	r0, #3
 8006a9e:	e7b7      	b.n	8006a10 <UART_CheckIdleState+0x3a>

08006aa0 <HAL_UART_Init>:
  if (huart == NULL)
 8006aa0:	b378      	cbz	r0, 8006b02 <HAL_UART_Init+0x62>
{
 8006aa2:	b510      	push	{r4, lr}
 8006aa4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006aa6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006aaa:	b30b      	cbz	r3, 8006af0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006aac:	2324      	movs	r3, #36	; 0x24
 8006aae:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8006ab2:	6822      	ldr	r2, [r4, #0]
 8006ab4:	6813      	ldr	r3, [r2, #0]
 8006ab6:	f023 0301 	bic.w	r3, r3, #1
 8006aba:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006abc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006abe:	b9e3      	cbnz	r3, 8006afa <HAL_UART_Init+0x5a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f7ff fcc5 	bl	8006450 <UART_SetConfig>
 8006ac6:	2801      	cmp	r0, #1
 8006ac8:	d011      	beq.n	8006aee <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aca:	6822      	ldr	r2, [r4, #0]
 8006acc:	6853      	ldr	r3, [r2, #4]
 8006ace:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006ad2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ad4:	6822      	ldr	r2, [r4, #0]
 8006ad6:	6893      	ldr	r3, [r2, #8]
 8006ad8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006adc:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006ade:	6822      	ldr	r2, [r4, #0]
 8006ae0:	6813      	ldr	r3, [r2, #0]
 8006ae2:	f043 0301 	orr.w	r3, r3, #1
 8006ae6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f7ff ff74 	bl	80069d6 <UART_CheckIdleState>
}
 8006aee:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006af0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8006af4:	f7fc fe64 	bl	80037c0 <HAL_UART_MspInit>
 8006af8:	e7d8      	b.n	8006aac <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006afa:	4620      	mov	r0, r4
 8006afc:	f7ff fe4e 	bl	800679c <UART_AdvFeatureConfig>
 8006b00:	e7de      	b.n	8006ac0 <HAL_UART_Init+0x20>
    return HAL_ERROR;
 8006b02:	2001      	movs	r0, #1
}
 8006b04:	4770      	bx	lr
	...

08006b08 <UART_Start_Receive_IT>:
{
 8006b08:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8006b0a:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006b0c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006b10:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 8006b18:	6883      	ldr	r3, [r0, #8]
 8006b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1e:	d006      	beq.n	8006b2e <UART_Start_Receive_IT+0x26>
 8006b20:	b9a3      	cbnz	r3, 8006b4c <UART_Start_Receive_IT+0x44>
 8006b22:	6903      	ldr	r3, [r0, #16]
 8006b24:	b973      	cbnz	r3, 8006b44 <UART_Start_Receive_IT+0x3c>
 8006b26:	23ff      	movs	r3, #255	; 0xff
 8006b28:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b2c:	e014      	b.n	8006b58 <UART_Start_Receive_IT+0x50>
 8006b2e:	6903      	ldr	r3, [r0, #16]
 8006b30:	b923      	cbnz	r3, 8006b3c <UART_Start_Receive_IT+0x34>
 8006b32:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006b36:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b3a:	e00d      	b.n	8006b58 <UART_Start_Receive_IT+0x50>
 8006b3c:	23ff      	movs	r3, #255	; 0xff
 8006b3e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b42:	e009      	b.n	8006b58 <UART_Start_Receive_IT+0x50>
 8006b44:	237f      	movs	r3, #127	; 0x7f
 8006b46:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b4a:	e005      	b.n	8006b58 <UART_Start_Receive_IT+0x50>
 8006b4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b50:	d02e      	beq.n	8006bb0 <UART_Start_Receive_IT+0xa8>
 8006b52:	2300      	movs	r3, #0
 8006b54:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b5e:	2322      	movs	r3, #34	; 0x22
 8006b60:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b64:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	f101 0308 	add.w	r3, r1, #8
 8006b6a:	e853 3f00 	ldrex	r3, [r3]
 8006b6e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	3108      	adds	r1, #8
 8006b74:	e841 3400 	strex	r4, r3, [r1]
 8006b78:	2c00      	cmp	r4, #0
 8006b7a:	d1f3      	bne.n	8006b64 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006b7c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b82:	d01f      	beq.n	8006bc4 <UART_Start_Receive_IT+0xbc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b84:	6883      	ldr	r3, [r0, #8]
 8006b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8a:	d043      	beq.n	8006c14 <UART_Start_Receive_IT+0x10c>
      huart->RxISR = UART_RxISR_8BIT;
 8006b8c:	4b29      	ldr	r3, [pc, #164]	; (8006c34 <UART_Start_Receive_IT+0x12c>)
 8006b8e:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b90:	6903      	ldr	r3, [r0, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d044      	beq.n	8006c20 <UART_Start_Receive_IT+0x118>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006b96:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	e852 3f00 	ldrex	r3, [r2]
 8006b9c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	e842 3100 	strex	r1, r3, [r2]
 8006ba4:	2900      	cmp	r1, #0
 8006ba6:	d1f6      	bne.n	8006b96 <UART_Start_Receive_IT+0x8e>
}
 8006ba8:	2000      	movs	r0, #0
 8006baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bae:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006bb0:	6903      	ldr	r3, [r0, #16]
 8006bb2:	b91b      	cbnz	r3, 8006bbc <UART_Start_Receive_IT+0xb4>
 8006bb4:	237f      	movs	r3, #127	; 0x7f
 8006bb6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006bba:	e7cd      	b.n	8006b58 <UART_Start_Receive_IT+0x50>
 8006bbc:	233f      	movs	r3, #63	; 0x3f
 8006bbe:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006bc2:	e7c9      	b.n	8006b58 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006bc4:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d8db      	bhi.n	8006b84 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bcc:	6883      	ldr	r3, [r0, #8]
 8006bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd2:	d019      	beq.n	8006c08 <UART_Start_Receive_IT+0x100>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006bd4:	4b18      	ldr	r3, [pc, #96]	; (8006c38 <UART_Start_Receive_IT+0x130>)
 8006bd6:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006bd8:	6903      	ldr	r3, [r0, #16]
 8006bda:	b143      	cbz	r3, 8006bee <UART_Start_Receive_IT+0xe6>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bdc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bde:	e852 3f00 	ldrex	r3, [r2]
 8006be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	e842 3100 	strex	r1, r3, [r2]
 8006bea:	2900      	cmp	r1, #0
 8006bec:	d1f6      	bne.n	8006bdc <UART_Start_Receive_IT+0xd4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006bee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	f102 0308 	add.w	r3, r2, #8
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	3208      	adds	r2, #8
 8006bfe:	e842 3100 	strex	r1, r3, [r2]
 8006c02:	2900      	cmp	r1, #0
 8006c04:	d1f3      	bne.n	8006bee <UART_Start_Receive_IT+0xe6>
 8006c06:	e7cf      	b.n	8006ba8 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c08:	6903      	ldr	r3, [r0, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1e2      	bne.n	8006bd4 <UART_Start_Receive_IT+0xcc>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006c0e:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <UART_Start_Receive_IT+0x134>)
 8006c10:	6743      	str	r3, [r0, #116]	; 0x74
 8006c12:	e7e1      	b.n	8006bd8 <UART_Start_Receive_IT+0xd0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c14:	6903      	ldr	r3, [r0, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1b8      	bne.n	8006b8c <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8006c1a:	4b09      	ldr	r3, [pc, #36]	; (8006c40 <UART_Start_Receive_IT+0x138>)
 8006c1c:	6743      	str	r3, [r0, #116]	; 0x74
 8006c1e:	e7b7      	b.n	8006b90 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c20:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	e852 3f00 	ldrex	r3, [r2]
 8006c26:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	e842 3100 	strex	r1, r3, [r2]
 8006c2e:	2900      	cmp	r1, #0
 8006c30:	d1f6      	bne.n	8006c20 <UART_Start_Receive_IT+0x118>
 8006c32:	e7b9      	b.n	8006ba8 <UART_Start_Receive_IT+0xa0>
 8006c34:	08005f09 	.word	0x08005f09
 8006c38:	080060bd 	.word	0x080060bd
 8006c3c:	08006289 	.word	0x08006289
 8006c40:	08005fe5 	.word	0x08005fe5

08006c44 <HAL_UART_Receive_IT>:
{
 8006c44:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c46:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	d117      	bne.n	8006c7e <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8006c4e:	b1c1      	cbz	r1, 8006c82 <HAL_UART_Receive_IT+0x3e>
 8006c50:	b1ca      	cbz	r2, 8006c86 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c52:	2300      	movs	r3, #0
 8006c54:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c56:	6803      	ldr	r3, [r0, #0]
 8006c58:	4c0c      	ldr	r4, [pc, #48]	; (8006c8c <HAL_UART_Receive_IT+0x48>)
 8006c5a:	42a3      	cmp	r3, r4
 8006c5c:	d00c      	beq.n	8006c78 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006c64:	d008      	beq.n	8006c78 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c66:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	e854 3f00 	ldrex	r3, [r4]
 8006c6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	e844 3500 	strex	r5, r3, [r4]
 8006c74:	2d00      	cmp	r5, #0
 8006c76:	d1f6      	bne.n	8006c66 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c78:	f7ff ff46 	bl	8006b08 <UART_Start_Receive_IT>
 8006c7c:	e000      	b.n	8006c80 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8006c7e:	2002      	movs	r0, #2
}
 8006c80:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006c82:	2001      	movs	r0, #1
 8006c84:	e7fc      	b.n	8006c80 <HAL_UART_Receive_IT+0x3c>
 8006c86:	2001      	movs	r0, #1
 8006c88:	e7fa      	b.n	8006c80 <HAL_UART_Receive_IT+0x3c>
 8006c8a:	bf00      	nop
 8006c8c:	40008000 	.word	0x40008000

08006c90 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c90:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006c92:	b92b      	cbnz	r3, 8006ca0 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006c94:	2301      	movs	r3, #1
 8006c96:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c9a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006c9e:	4770      	bx	lr
{
 8006ca0:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ca2:	6803      	ldr	r3, [r0, #0]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006caa:	6899      	ldr	r1, [r3, #8]
 8006cac:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cae:	4d09      	ldr	r5, [pc, #36]	; (8006cd4 <UARTEx_SetNbDataToProcess+0x44>)
 8006cb0:	5c6b      	ldrb	r3, [r5, r1]
 8006cb2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cb4:	4c08      	ldr	r4, [pc, #32]	; (8006cd8 <UARTEx_SetNbDataToProcess+0x48>)
 8006cb6:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cb8:	fb93 f3f1 	sdiv	r3, r3, r1
 8006cbc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cc0:	5cab      	ldrb	r3, [r5, r2]
 8006cc2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006cc4:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cca:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006cce:	bc30      	pop	{r4, r5}
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	0800b148 	.word	0x0800b148
 8006cd8:	0800b140 	.word	0x0800b140

08006cdc <HAL_UARTEx_WakeupCallback>:
}
 8006cdc:	4770      	bx	lr

08006cde <HAL_UARTEx_RxFifoFullCallback>:
}
 8006cde:	4770      	bx	lr

08006ce0 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006ce0:	4770      	bx	lr

08006ce2 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006ce2:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d018      	beq.n	8006d1c <HAL_UARTEx_DisableFifoMode+0x3a>
 8006cea:	2301      	movs	r3, #1
 8006cec:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006cf0:	2324      	movs	r3, #36	; 0x24
 8006cf2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cf6:	6803      	ldr	r3, [r0, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006cfa:	6819      	ldr	r1, [r3, #0]
 8006cfc:	f021 0101 	bic.w	r1, r1, #1
 8006d00:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d02:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d06:	2300      	movs	r3, #0
 8006d08:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d0a:	6801      	ldr	r1, [r0, #0]
 8006d0c:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006d14:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8006d18:	4618      	mov	r0, r3
 8006d1a:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006d1c:	2002      	movs	r0, #2
}
 8006d1e:	4770      	bx	lr

08006d20 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006d20:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006d22:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d01d      	beq.n	8006d66 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006d32:	2324      	movs	r3, #36	; 0x24
 8006d34:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d38:	6803      	ldr	r3, [r0, #0]
 8006d3a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	f022 0201 	bic.w	r2, r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d44:	6802      	ldr	r2, [r0, #0]
 8006d46:	6893      	ldr	r3, [r2, #8]
 8006d48:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006d4c:	4319      	orrs	r1, r3
 8006d4e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006d50:	f7ff ff9e 	bl	8006c90 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006d58:	2320      	movs	r3, #32
 8006d5a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006d5e:	2000      	movs	r0, #0
 8006d60:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006d64:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006d66:	2002      	movs	r0, #2
 8006d68:	e7fc      	b.n	8006d64 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006d6a <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006d6a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006d6c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d01d      	beq.n	8006db0 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006d74:	4604      	mov	r4, r0
 8006d76:	2301      	movs	r3, #1
 8006d78:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006d7c:	2324      	movs	r3, #36	; 0x24
 8006d7e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d82:	6803      	ldr	r3, [r0, #0]
 8006d84:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	f022 0201 	bic.w	r2, r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d8e:	6802      	ldr	r2, [r0, #0]
 8006d90:	6893      	ldr	r3, [r2, #8]
 8006d92:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006d96:	4319      	orrs	r1, r3
 8006d98:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006d9a:	f7ff ff79 	bl	8006c90 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006da2:	2320      	movs	r3, #32
 8006da4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006da8:	2000      	movs	r0, #0
 8006daa:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006db0:	2002      	movs	r0, #2
 8006db2:	e7fc      	b.n	8006dae <HAL_UARTEx_SetRxFifoThreshold+0x44>

08006db4 <__assert_func>:
 8006db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006db6:	4614      	mov	r4, r2
 8006db8:	461a      	mov	r2, r3
 8006dba:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <__assert_func+0x2c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	68d8      	ldr	r0, [r3, #12]
 8006dc2:	b14c      	cbz	r4, 8006dd8 <__assert_func+0x24>
 8006dc4:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <__assert_func+0x30>)
 8006dc6:	9100      	str	r1, [sp, #0]
 8006dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006dcc:	4906      	ldr	r1, [pc, #24]	; (8006de8 <__assert_func+0x34>)
 8006dce:	462b      	mov	r3, r5
 8006dd0:	f000 f814 	bl	8006dfc <fiprintf>
 8006dd4:	f001 f958 	bl	8008088 <abort>
 8006dd8:	4b04      	ldr	r3, [pc, #16]	; (8006dec <__assert_func+0x38>)
 8006dda:	461c      	mov	r4, r3
 8006ddc:	e7f3      	b.n	8006dc6 <__assert_func+0x12>
 8006dde:	bf00      	nop
 8006de0:	20000010 	.word	0x20000010
 8006de4:	0800b150 	.word	0x0800b150
 8006de8:	0800b15d 	.word	0x0800b15d
 8006dec:	0800b18b 	.word	0x0800b18b

08006df0 <__errno>:
 8006df0:	4b01      	ldr	r3, [pc, #4]	; (8006df8 <__errno+0x8>)
 8006df2:	6818      	ldr	r0, [r3, #0]
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	20000010 	.word	0x20000010

08006dfc <fiprintf>:
 8006dfc:	b40e      	push	{r1, r2, r3}
 8006dfe:	b503      	push	{r0, r1, lr}
 8006e00:	4601      	mov	r1, r0
 8006e02:	ab03      	add	r3, sp, #12
 8006e04:	4805      	ldr	r0, [pc, #20]	; (8006e1c <fiprintf+0x20>)
 8006e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e0a:	6800      	ldr	r0, [r0, #0]
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	f000 f90f 	bl	8007030 <_vfiprintf_r>
 8006e12:	b002      	add	sp, #8
 8006e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e18:	b003      	add	sp, #12
 8006e1a:	4770      	bx	lr
 8006e1c:	20000010 	.word	0x20000010

08006e20 <__libc_init_array>:
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	4d0d      	ldr	r5, [pc, #52]	; (8006e58 <__libc_init_array+0x38>)
 8006e24:	4c0d      	ldr	r4, [pc, #52]	; (8006e5c <__libc_init_array+0x3c>)
 8006e26:	1b64      	subs	r4, r4, r5
 8006e28:	10a4      	asrs	r4, r4, #2
 8006e2a:	2600      	movs	r6, #0
 8006e2c:	42a6      	cmp	r6, r4
 8006e2e:	d109      	bne.n	8006e44 <__libc_init_array+0x24>
 8006e30:	4d0b      	ldr	r5, [pc, #44]	; (8006e60 <__libc_init_array+0x40>)
 8006e32:	4c0c      	ldr	r4, [pc, #48]	; (8006e64 <__libc_init_array+0x44>)
 8006e34:	f003 f8fa 	bl	800a02c <_init>
 8006e38:	1b64      	subs	r4, r4, r5
 8006e3a:	10a4      	asrs	r4, r4, #2
 8006e3c:	2600      	movs	r6, #0
 8006e3e:	42a6      	cmp	r6, r4
 8006e40:	d105      	bne.n	8006e4e <__libc_init_array+0x2e>
 8006e42:	bd70      	pop	{r4, r5, r6, pc}
 8006e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e48:	4798      	blx	r3
 8006e4a:	3601      	adds	r6, #1
 8006e4c:	e7ee      	b.n	8006e2c <__libc_init_array+0xc>
 8006e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e52:	4798      	blx	r3
 8006e54:	3601      	adds	r6, #1
 8006e56:	e7f2      	b.n	8006e3e <__libc_init_array+0x1e>
 8006e58:	0800b608 	.word	0x0800b608
 8006e5c:	0800b608 	.word	0x0800b608
 8006e60:	0800b608 	.word	0x0800b608
 8006e64:	0800b60c 	.word	0x0800b60c

08006e68 <malloc>:
 8006e68:	4b02      	ldr	r3, [pc, #8]	; (8006e74 <malloc+0xc>)
 8006e6a:	4601      	mov	r1, r0
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	f000 b85b 	b.w	8006f28 <_malloc_r>
 8006e72:	bf00      	nop
 8006e74:	20000010 	.word	0x20000010

08006e78 <memset>:
 8006e78:	4402      	add	r2, r0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d100      	bne.n	8006e82 <memset+0xa>
 8006e80:	4770      	bx	lr
 8006e82:	f803 1b01 	strb.w	r1, [r3], #1
 8006e86:	e7f9      	b.n	8006e7c <memset+0x4>

08006e88 <_free_r>:
 8006e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e8a:	2900      	cmp	r1, #0
 8006e8c:	d048      	beq.n	8006f20 <_free_r+0x98>
 8006e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e92:	9001      	str	r0, [sp, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f1a1 0404 	sub.w	r4, r1, #4
 8006e9a:	bfb8      	it	lt
 8006e9c:	18e4      	addlt	r4, r4, r3
 8006e9e:	f002 f9a5 	bl	80091ec <__malloc_lock>
 8006ea2:	4a20      	ldr	r2, [pc, #128]	; (8006f24 <_free_r+0x9c>)
 8006ea4:	9801      	ldr	r0, [sp, #4]
 8006ea6:	6813      	ldr	r3, [r2, #0]
 8006ea8:	4615      	mov	r5, r2
 8006eaa:	b933      	cbnz	r3, 8006eba <_free_r+0x32>
 8006eac:	6063      	str	r3, [r4, #4]
 8006eae:	6014      	str	r4, [r2, #0]
 8006eb0:	b003      	add	sp, #12
 8006eb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eb6:	f002 b99f 	b.w	80091f8 <__malloc_unlock>
 8006eba:	42a3      	cmp	r3, r4
 8006ebc:	d90b      	bls.n	8006ed6 <_free_r+0x4e>
 8006ebe:	6821      	ldr	r1, [r4, #0]
 8006ec0:	1862      	adds	r2, r4, r1
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	bf04      	itt	eq
 8006ec6:	681a      	ldreq	r2, [r3, #0]
 8006ec8:	685b      	ldreq	r3, [r3, #4]
 8006eca:	6063      	str	r3, [r4, #4]
 8006ecc:	bf04      	itt	eq
 8006ece:	1852      	addeq	r2, r2, r1
 8006ed0:	6022      	streq	r2, [r4, #0]
 8006ed2:	602c      	str	r4, [r5, #0]
 8006ed4:	e7ec      	b.n	8006eb0 <_free_r+0x28>
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	b10b      	cbz	r3, 8006ee0 <_free_r+0x58>
 8006edc:	42a3      	cmp	r3, r4
 8006ede:	d9fa      	bls.n	8006ed6 <_free_r+0x4e>
 8006ee0:	6811      	ldr	r1, [r2, #0]
 8006ee2:	1855      	adds	r5, r2, r1
 8006ee4:	42a5      	cmp	r5, r4
 8006ee6:	d10b      	bne.n	8006f00 <_free_r+0x78>
 8006ee8:	6824      	ldr	r4, [r4, #0]
 8006eea:	4421      	add	r1, r4
 8006eec:	1854      	adds	r4, r2, r1
 8006eee:	42a3      	cmp	r3, r4
 8006ef0:	6011      	str	r1, [r2, #0]
 8006ef2:	d1dd      	bne.n	8006eb0 <_free_r+0x28>
 8006ef4:	681c      	ldr	r4, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	6053      	str	r3, [r2, #4]
 8006efa:	4421      	add	r1, r4
 8006efc:	6011      	str	r1, [r2, #0]
 8006efe:	e7d7      	b.n	8006eb0 <_free_r+0x28>
 8006f00:	d902      	bls.n	8006f08 <_free_r+0x80>
 8006f02:	230c      	movs	r3, #12
 8006f04:	6003      	str	r3, [r0, #0]
 8006f06:	e7d3      	b.n	8006eb0 <_free_r+0x28>
 8006f08:	6825      	ldr	r5, [r4, #0]
 8006f0a:	1961      	adds	r1, r4, r5
 8006f0c:	428b      	cmp	r3, r1
 8006f0e:	bf04      	itt	eq
 8006f10:	6819      	ldreq	r1, [r3, #0]
 8006f12:	685b      	ldreq	r3, [r3, #4]
 8006f14:	6063      	str	r3, [r4, #4]
 8006f16:	bf04      	itt	eq
 8006f18:	1949      	addeq	r1, r1, r5
 8006f1a:	6021      	streq	r1, [r4, #0]
 8006f1c:	6054      	str	r4, [r2, #4]
 8006f1e:	e7c7      	b.n	8006eb0 <_free_r+0x28>
 8006f20:	b003      	add	sp, #12
 8006f22:	bd30      	pop	{r4, r5, pc}
 8006f24:	20000748 	.word	0x20000748

08006f28 <_malloc_r>:
 8006f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2a:	1ccd      	adds	r5, r1, #3
 8006f2c:	f025 0503 	bic.w	r5, r5, #3
 8006f30:	3508      	adds	r5, #8
 8006f32:	2d0c      	cmp	r5, #12
 8006f34:	bf38      	it	cc
 8006f36:	250c      	movcc	r5, #12
 8006f38:	2d00      	cmp	r5, #0
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	db01      	blt.n	8006f42 <_malloc_r+0x1a>
 8006f3e:	42a9      	cmp	r1, r5
 8006f40:	d903      	bls.n	8006f4a <_malloc_r+0x22>
 8006f42:	230c      	movs	r3, #12
 8006f44:	6033      	str	r3, [r6, #0]
 8006f46:	2000      	movs	r0, #0
 8006f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f4a:	f002 f94f 	bl	80091ec <__malloc_lock>
 8006f4e:	4921      	ldr	r1, [pc, #132]	; (8006fd4 <_malloc_r+0xac>)
 8006f50:	680a      	ldr	r2, [r1, #0]
 8006f52:	4614      	mov	r4, r2
 8006f54:	b99c      	cbnz	r4, 8006f7e <_malloc_r+0x56>
 8006f56:	4f20      	ldr	r7, [pc, #128]	; (8006fd8 <_malloc_r+0xb0>)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	b923      	cbnz	r3, 8006f66 <_malloc_r+0x3e>
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	4630      	mov	r0, r6
 8006f60:	f000 fefc 	bl	8007d5c <_sbrk_r>
 8006f64:	6038      	str	r0, [r7, #0]
 8006f66:	4629      	mov	r1, r5
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f000 fef7 	bl	8007d5c <_sbrk_r>
 8006f6e:	1c43      	adds	r3, r0, #1
 8006f70:	d123      	bne.n	8006fba <_malloc_r+0x92>
 8006f72:	230c      	movs	r3, #12
 8006f74:	6033      	str	r3, [r6, #0]
 8006f76:	4630      	mov	r0, r6
 8006f78:	f002 f93e 	bl	80091f8 <__malloc_unlock>
 8006f7c:	e7e3      	b.n	8006f46 <_malloc_r+0x1e>
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	1b5b      	subs	r3, r3, r5
 8006f82:	d417      	bmi.n	8006fb4 <_malloc_r+0x8c>
 8006f84:	2b0b      	cmp	r3, #11
 8006f86:	d903      	bls.n	8006f90 <_malloc_r+0x68>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	441c      	add	r4, r3
 8006f8c:	6025      	str	r5, [r4, #0]
 8006f8e:	e004      	b.n	8006f9a <_malloc_r+0x72>
 8006f90:	6863      	ldr	r3, [r4, #4]
 8006f92:	42a2      	cmp	r2, r4
 8006f94:	bf0c      	ite	eq
 8006f96:	600b      	streq	r3, [r1, #0]
 8006f98:	6053      	strne	r3, [r2, #4]
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f002 f92c 	bl	80091f8 <__malloc_unlock>
 8006fa0:	f104 000b 	add.w	r0, r4, #11
 8006fa4:	1d23      	adds	r3, r4, #4
 8006fa6:	f020 0007 	bic.w	r0, r0, #7
 8006faa:	1ac2      	subs	r2, r0, r3
 8006fac:	d0cc      	beq.n	8006f48 <_malloc_r+0x20>
 8006fae:	1a1b      	subs	r3, r3, r0
 8006fb0:	50a3      	str	r3, [r4, r2]
 8006fb2:	e7c9      	b.n	8006f48 <_malloc_r+0x20>
 8006fb4:	4622      	mov	r2, r4
 8006fb6:	6864      	ldr	r4, [r4, #4]
 8006fb8:	e7cc      	b.n	8006f54 <_malloc_r+0x2c>
 8006fba:	1cc4      	adds	r4, r0, #3
 8006fbc:	f024 0403 	bic.w	r4, r4, #3
 8006fc0:	42a0      	cmp	r0, r4
 8006fc2:	d0e3      	beq.n	8006f8c <_malloc_r+0x64>
 8006fc4:	1a21      	subs	r1, r4, r0
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	f000 fec8 	bl	8007d5c <_sbrk_r>
 8006fcc:	3001      	adds	r0, #1
 8006fce:	d1dd      	bne.n	8006f8c <_malloc_r+0x64>
 8006fd0:	e7cf      	b.n	8006f72 <_malloc_r+0x4a>
 8006fd2:	bf00      	nop
 8006fd4:	20000748 	.word	0x20000748
 8006fd8:	2000074c 	.word	0x2000074c

08006fdc <__sfputc_r>:
 8006fdc:	6893      	ldr	r3, [r2, #8]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	b410      	push	{r4}
 8006fe4:	6093      	str	r3, [r2, #8]
 8006fe6:	da08      	bge.n	8006ffa <__sfputc_r+0x1e>
 8006fe8:	6994      	ldr	r4, [r2, #24]
 8006fea:	42a3      	cmp	r3, r4
 8006fec:	db01      	blt.n	8006ff2 <__sfputc_r+0x16>
 8006fee:	290a      	cmp	r1, #10
 8006ff0:	d103      	bne.n	8006ffa <__sfputc_r+0x1e>
 8006ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ff6:	f000 bf87 	b.w	8007f08 <__swbuf_r>
 8006ffa:	6813      	ldr	r3, [r2, #0]
 8006ffc:	1c58      	adds	r0, r3, #1
 8006ffe:	6010      	str	r0, [r2, #0]
 8007000:	7019      	strb	r1, [r3, #0]
 8007002:	4608      	mov	r0, r1
 8007004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007008:	4770      	bx	lr

0800700a <__sfputs_r>:
 800700a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700c:	4606      	mov	r6, r0
 800700e:	460f      	mov	r7, r1
 8007010:	4614      	mov	r4, r2
 8007012:	18d5      	adds	r5, r2, r3
 8007014:	42ac      	cmp	r4, r5
 8007016:	d101      	bne.n	800701c <__sfputs_r+0x12>
 8007018:	2000      	movs	r0, #0
 800701a:	e007      	b.n	800702c <__sfputs_r+0x22>
 800701c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007020:	463a      	mov	r2, r7
 8007022:	4630      	mov	r0, r6
 8007024:	f7ff ffda 	bl	8006fdc <__sfputc_r>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d1f3      	bne.n	8007014 <__sfputs_r+0xa>
 800702c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007030 <_vfiprintf_r>:
 8007030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007034:	460d      	mov	r5, r1
 8007036:	b09d      	sub	sp, #116	; 0x74
 8007038:	4614      	mov	r4, r2
 800703a:	4698      	mov	r8, r3
 800703c:	4606      	mov	r6, r0
 800703e:	b118      	cbz	r0, 8007048 <_vfiprintf_r+0x18>
 8007040:	6983      	ldr	r3, [r0, #24]
 8007042:	b90b      	cbnz	r3, 8007048 <_vfiprintf_r+0x18>
 8007044:	f001 ffba 	bl	8008fbc <__sinit>
 8007048:	4b89      	ldr	r3, [pc, #548]	; (8007270 <_vfiprintf_r+0x240>)
 800704a:	429d      	cmp	r5, r3
 800704c:	d11b      	bne.n	8007086 <_vfiprintf_r+0x56>
 800704e:	6875      	ldr	r5, [r6, #4]
 8007050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007052:	07d9      	lsls	r1, r3, #31
 8007054:	d405      	bmi.n	8007062 <_vfiprintf_r+0x32>
 8007056:	89ab      	ldrh	r3, [r5, #12]
 8007058:	059a      	lsls	r2, r3, #22
 800705a:	d402      	bmi.n	8007062 <_vfiprintf_r+0x32>
 800705c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800705e:	f002 f850 	bl	8009102 <__retarget_lock_acquire_recursive>
 8007062:	89ab      	ldrh	r3, [r5, #12]
 8007064:	071b      	lsls	r3, r3, #28
 8007066:	d501      	bpl.n	800706c <_vfiprintf_r+0x3c>
 8007068:	692b      	ldr	r3, [r5, #16]
 800706a:	b9eb      	cbnz	r3, 80070a8 <_vfiprintf_r+0x78>
 800706c:	4629      	mov	r1, r5
 800706e:	4630      	mov	r0, r6
 8007070:	f000 ff9c 	bl	8007fac <__swsetup_r>
 8007074:	b1c0      	cbz	r0, 80070a8 <_vfiprintf_r+0x78>
 8007076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007078:	07dc      	lsls	r4, r3, #31
 800707a:	d50e      	bpl.n	800709a <_vfiprintf_r+0x6a>
 800707c:	f04f 30ff 	mov.w	r0, #4294967295
 8007080:	b01d      	add	sp, #116	; 0x74
 8007082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007086:	4b7b      	ldr	r3, [pc, #492]	; (8007274 <_vfiprintf_r+0x244>)
 8007088:	429d      	cmp	r5, r3
 800708a:	d101      	bne.n	8007090 <_vfiprintf_r+0x60>
 800708c:	68b5      	ldr	r5, [r6, #8]
 800708e:	e7df      	b.n	8007050 <_vfiprintf_r+0x20>
 8007090:	4b79      	ldr	r3, [pc, #484]	; (8007278 <_vfiprintf_r+0x248>)
 8007092:	429d      	cmp	r5, r3
 8007094:	bf08      	it	eq
 8007096:	68f5      	ldreq	r5, [r6, #12]
 8007098:	e7da      	b.n	8007050 <_vfiprintf_r+0x20>
 800709a:	89ab      	ldrh	r3, [r5, #12]
 800709c:	0598      	lsls	r0, r3, #22
 800709e:	d4ed      	bmi.n	800707c <_vfiprintf_r+0x4c>
 80070a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070a2:	f002 f82f 	bl	8009104 <__retarget_lock_release_recursive>
 80070a6:	e7e9      	b.n	800707c <_vfiprintf_r+0x4c>
 80070a8:	2300      	movs	r3, #0
 80070aa:	9309      	str	r3, [sp, #36]	; 0x24
 80070ac:	2320      	movs	r3, #32
 80070ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80070b6:	2330      	movs	r3, #48	; 0x30
 80070b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800727c <_vfiprintf_r+0x24c>
 80070bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070c0:	f04f 0901 	mov.w	r9, #1
 80070c4:	4623      	mov	r3, r4
 80070c6:	469a      	mov	sl, r3
 80070c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070cc:	b10a      	cbz	r2, 80070d2 <_vfiprintf_r+0xa2>
 80070ce:	2a25      	cmp	r2, #37	; 0x25
 80070d0:	d1f9      	bne.n	80070c6 <_vfiprintf_r+0x96>
 80070d2:	ebba 0b04 	subs.w	fp, sl, r4
 80070d6:	d00b      	beq.n	80070f0 <_vfiprintf_r+0xc0>
 80070d8:	465b      	mov	r3, fp
 80070da:	4622      	mov	r2, r4
 80070dc:	4629      	mov	r1, r5
 80070de:	4630      	mov	r0, r6
 80070e0:	f7ff ff93 	bl	800700a <__sfputs_r>
 80070e4:	3001      	adds	r0, #1
 80070e6:	f000 80aa 	beq.w	800723e <_vfiprintf_r+0x20e>
 80070ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ec:	445a      	add	r2, fp
 80070ee:	9209      	str	r2, [sp, #36]	; 0x24
 80070f0:	f89a 3000 	ldrb.w	r3, [sl]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 80a2 	beq.w	800723e <_vfiprintf_r+0x20e>
 80070fa:	2300      	movs	r3, #0
 80070fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007104:	f10a 0a01 	add.w	sl, sl, #1
 8007108:	9304      	str	r3, [sp, #16]
 800710a:	9307      	str	r3, [sp, #28]
 800710c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007110:	931a      	str	r3, [sp, #104]	; 0x68
 8007112:	4654      	mov	r4, sl
 8007114:	2205      	movs	r2, #5
 8007116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711a:	4858      	ldr	r0, [pc, #352]	; (800727c <_vfiprintf_r+0x24c>)
 800711c:	f7f9 ff98 	bl	8001050 <memchr>
 8007120:	9a04      	ldr	r2, [sp, #16]
 8007122:	b9d8      	cbnz	r0, 800715c <_vfiprintf_r+0x12c>
 8007124:	06d1      	lsls	r1, r2, #27
 8007126:	bf44      	itt	mi
 8007128:	2320      	movmi	r3, #32
 800712a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800712e:	0713      	lsls	r3, r2, #28
 8007130:	bf44      	itt	mi
 8007132:	232b      	movmi	r3, #43	; 0x2b
 8007134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007138:	f89a 3000 	ldrb.w	r3, [sl]
 800713c:	2b2a      	cmp	r3, #42	; 0x2a
 800713e:	d015      	beq.n	800716c <_vfiprintf_r+0x13c>
 8007140:	9a07      	ldr	r2, [sp, #28]
 8007142:	4654      	mov	r4, sl
 8007144:	2000      	movs	r0, #0
 8007146:	f04f 0c0a 	mov.w	ip, #10
 800714a:	4621      	mov	r1, r4
 800714c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007150:	3b30      	subs	r3, #48	; 0x30
 8007152:	2b09      	cmp	r3, #9
 8007154:	d94e      	bls.n	80071f4 <_vfiprintf_r+0x1c4>
 8007156:	b1b0      	cbz	r0, 8007186 <_vfiprintf_r+0x156>
 8007158:	9207      	str	r2, [sp, #28]
 800715a:	e014      	b.n	8007186 <_vfiprintf_r+0x156>
 800715c:	eba0 0308 	sub.w	r3, r0, r8
 8007160:	fa09 f303 	lsl.w	r3, r9, r3
 8007164:	4313      	orrs	r3, r2
 8007166:	9304      	str	r3, [sp, #16]
 8007168:	46a2      	mov	sl, r4
 800716a:	e7d2      	b.n	8007112 <_vfiprintf_r+0xe2>
 800716c:	9b03      	ldr	r3, [sp, #12]
 800716e:	1d19      	adds	r1, r3, #4
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	9103      	str	r1, [sp, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	bfbb      	ittet	lt
 8007178:	425b      	neglt	r3, r3
 800717a:	f042 0202 	orrlt.w	r2, r2, #2
 800717e:	9307      	strge	r3, [sp, #28]
 8007180:	9307      	strlt	r3, [sp, #28]
 8007182:	bfb8      	it	lt
 8007184:	9204      	strlt	r2, [sp, #16]
 8007186:	7823      	ldrb	r3, [r4, #0]
 8007188:	2b2e      	cmp	r3, #46	; 0x2e
 800718a:	d10c      	bne.n	80071a6 <_vfiprintf_r+0x176>
 800718c:	7863      	ldrb	r3, [r4, #1]
 800718e:	2b2a      	cmp	r3, #42	; 0x2a
 8007190:	d135      	bne.n	80071fe <_vfiprintf_r+0x1ce>
 8007192:	9b03      	ldr	r3, [sp, #12]
 8007194:	1d1a      	adds	r2, r3, #4
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	9203      	str	r2, [sp, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	bfb8      	it	lt
 800719e:	f04f 33ff 	movlt.w	r3, #4294967295
 80071a2:	3402      	adds	r4, #2
 80071a4:	9305      	str	r3, [sp, #20]
 80071a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800728c <_vfiprintf_r+0x25c>
 80071aa:	7821      	ldrb	r1, [r4, #0]
 80071ac:	2203      	movs	r2, #3
 80071ae:	4650      	mov	r0, sl
 80071b0:	f7f9 ff4e 	bl	8001050 <memchr>
 80071b4:	b140      	cbz	r0, 80071c8 <_vfiprintf_r+0x198>
 80071b6:	2340      	movs	r3, #64	; 0x40
 80071b8:	eba0 000a 	sub.w	r0, r0, sl
 80071bc:	fa03 f000 	lsl.w	r0, r3, r0
 80071c0:	9b04      	ldr	r3, [sp, #16]
 80071c2:	4303      	orrs	r3, r0
 80071c4:	3401      	adds	r4, #1
 80071c6:	9304      	str	r3, [sp, #16]
 80071c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071cc:	482c      	ldr	r0, [pc, #176]	; (8007280 <_vfiprintf_r+0x250>)
 80071ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071d2:	2206      	movs	r2, #6
 80071d4:	f7f9 ff3c 	bl	8001050 <memchr>
 80071d8:	2800      	cmp	r0, #0
 80071da:	d03f      	beq.n	800725c <_vfiprintf_r+0x22c>
 80071dc:	4b29      	ldr	r3, [pc, #164]	; (8007284 <_vfiprintf_r+0x254>)
 80071de:	bb1b      	cbnz	r3, 8007228 <_vfiprintf_r+0x1f8>
 80071e0:	9b03      	ldr	r3, [sp, #12]
 80071e2:	3307      	adds	r3, #7
 80071e4:	f023 0307 	bic.w	r3, r3, #7
 80071e8:	3308      	adds	r3, #8
 80071ea:	9303      	str	r3, [sp, #12]
 80071ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ee:	443b      	add	r3, r7
 80071f0:	9309      	str	r3, [sp, #36]	; 0x24
 80071f2:	e767      	b.n	80070c4 <_vfiprintf_r+0x94>
 80071f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071f8:	460c      	mov	r4, r1
 80071fa:	2001      	movs	r0, #1
 80071fc:	e7a5      	b.n	800714a <_vfiprintf_r+0x11a>
 80071fe:	2300      	movs	r3, #0
 8007200:	3401      	adds	r4, #1
 8007202:	9305      	str	r3, [sp, #20]
 8007204:	4619      	mov	r1, r3
 8007206:	f04f 0c0a 	mov.w	ip, #10
 800720a:	4620      	mov	r0, r4
 800720c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007210:	3a30      	subs	r2, #48	; 0x30
 8007212:	2a09      	cmp	r2, #9
 8007214:	d903      	bls.n	800721e <_vfiprintf_r+0x1ee>
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0c5      	beq.n	80071a6 <_vfiprintf_r+0x176>
 800721a:	9105      	str	r1, [sp, #20]
 800721c:	e7c3      	b.n	80071a6 <_vfiprintf_r+0x176>
 800721e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007222:	4604      	mov	r4, r0
 8007224:	2301      	movs	r3, #1
 8007226:	e7f0      	b.n	800720a <_vfiprintf_r+0x1da>
 8007228:	ab03      	add	r3, sp, #12
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	462a      	mov	r2, r5
 800722e:	4b16      	ldr	r3, [pc, #88]	; (8007288 <_vfiprintf_r+0x258>)
 8007230:	a904      	add	r1, sp, #16
 8007232:	4630      	mov	r0, r6
 8007234:	f000 f8cc 	bl	80073d0 <_printf_float>
 8007238:	4607      	mov	r7, r0
 800723a:	1c78      	adds	r0, r7, #1
 800723c:	d1d6      	bne.n	80071ec <_vfiprintf_r+0x1bc>
 800723e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007240:	07d9      	lsls	r1, r3, #31
 8007242:	d405      	bmi.n	8007250 <_vfiprintf_r+0x220>
 8007244:	89ab      	ldrh	r3, [r5, #12]
 8007246:	059a      	lsls	r2, r3, #22
 8007248:	d402      	bmi.n	8007250 <_vfiprintf_r+0x220>
 800724a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800724c:	f001 ff5a 	bl	8009104 <__retarget_lock_release_recursive>
 8007250:	89ab      	ldrh	r3, [r5, #12]
 8007252:	065b      	lsls	r3, r3, #25
 8007254:	f53f af12 	bmi.w	800707c <_vfiprintf_r+0x4c>
 8007258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800725a:	e711      	b.n	8007080 <_vfiprintf_r+0x50>
 800725c:	ab03      	add	r3, sp, #12
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	462a      	mov	r2, r5
 8007262:	4b09      	ldr	r3, [pc, #36]	; (8007288 <_vfiprintf_r+0x258>)
 8007264:	a904      	add	r1, sp, #16
 8007266:	4630      	mov	r0, r6
 8007268:	f000 fb56 	bl	8007918 <_printf_i>
 800726c:	e7e4      	b.n	8007238 <_vfiprintf_r+0x208>
 800726e:	bf00      	nop
 8007270:	0800b2e8 	.word	0x0800b2e8
 8007274:	0800b308 	.word	0x0800b308
 8007278:	0800b2c8 	.word	0x0800b2c8
 800727c:	0800b190 	.word	0x0800b190
 8007280:	0800b19a 	.word	0x0800b19a
 8007284:	080073d1 	.word	0x080073d1
 8007288:	0800700b 	.word	0x0800700b
 800728c:	0800b196 	.word	0x0800b196

08007290 <__cvt>:
 8007290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007294:	ec55 4b10 	vmov	r4, r5, d0
 8007298:	2d00      	cmp	r5, #0
 800729a:	460e      	mov	r6, r1
 800729c:	4619      	mov	r1, r3
 800729e:	462b      	mov	r3, r5
 80072a0:	bfbb      	ittet	lt
 80072a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072a6:	461d      	movlt	r5, r3
 80072a8:	2300      	movge	r3, #0
 80072aa:	232d      	movlt	r3, #45	; 0x2d
 80072ac:	700b      	strb	r3, [r1, #0]
 80072ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072b4:	4691      	mov	r9, r2
 80072b6:	f023 0820 	bic.w	r8, r3, #32
 80072ba:	bfbc      	itt	lt
 80072bc:	4622      	movlt	r2, r4
 80072be:	4614      	movlt	r4, r2
 80072c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072c4:	d005      	beq.n	80072d2 <__cvt+0x42>
 80072c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80072ca:	d100      	bne.n	80072ce <__cvt+0x3e>
 80072cc:	3601      	adds	r6, #1
 80072ce:	2102      	movs	r1, #2
 80072d0:	e000      	b.n	80072d4 <__cvt+0x44>
 80072d2:	2103      	movs	r1, #3
 80072d4:	ab03      	add	r3, sp, #12
 80072d6:	9301      	str	r3, [sp, #4]
 80072d8:	ab02      	add	r3, sp, #8
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	ec45 4b10 	vmov	d0, r4, r5
 80072e0:	4653      	mov	r3, sl
 80072e2:	4632      	mov	r2, r6
 80072e4:	f000 ff64 	bl	80081b0 <_dtoa_r>
 80072e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80072ec:	4607      	mov	r7, r0
 80072ee:	d102      	bne.n	80072f6 <__cvt+0x66>
 80072f0:	f019 0f01 	tst.w	r9, #1
 80072f4:	d022      	beq.n	800733c <__cvt+0xac>
 80072f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072fa:	eb07 0906 	add.w	r9, r7, r6
 80072fe:	d110      	bne.n	8007322 <__cvt+0x92>
 8007300:	783b      	ldrb	r3, [r7, #0]
 8007302:	2b30      	cmp	r3, #48	; 0x30
 8007304:	d10a      	bne.n	800731c <__cvt+0x8c>
 8007306:	2200      	movs	r2, #0
 8007308:	2300      	movs	r3, #0
 800730a:	4620      	mov	r0, r4
 800730c:	4629      	mov	r1, r5
 800730e:	f7fa fb13 	bl	8001938 <__aeabi_dcmpeq>
 8007312:	b918      	cbnz	r0, 800731c <__cvt+0x8c>
 8007314:	f1c6 0601 	rsb	r6, r6, #1
 8007318:	f8ca 6000 	str.w	r6, [sl]
 800731c:	f8da 3000 	ldr.w	r3, [sl]
 8007320:	4499      	add	r9, r3
 8007322:	2200      	movs	r2, #0
 8007324:	2300      	movs	r3, #0
 8007326:	4620      	mov	r0, r4
 8007328:	4629      	mov	r1, r5
 800732a:	f7fa fb05 	bl	8001938 <__aeabi_dcmpeq>
 800732e:	b108      	cbz	r0, 8007334 <__cvt+0xa4>
 8007330:	f8cd 900c 	str.w	r9, [sp, #12]
 8007334:	2230      	movs	r2, #48	; 0x30
 8007336:	9b03      	ldr	r3, [sp, #12]
 8007338:	454b      	cmp	r3, r9
 800733a:	d307      	bcc.n	800734c <__cvt+0xbc>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007340:	1bdb      	subs	r3, r3, r7
 8007342:	4638      	mov	r0, r7
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	b004      	add	sp, #16
 8007348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734c:	1c59      	adds	r1, r3, #1
 800734e:	9103      	str	r1, [sp, #12]
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	e7f0      	b.n	8007336 <__cvt+0xa6>

08007354 <__exponent>:
 8007354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007356:	4603      	mov	r3, r0
 8007358:	2900      	cmp	r1, #0
 800735a:	bfb8      	it	lt
 800735c:	4249      	neglt	r1, r1
 800735e:	f803 2b02 	strb.w	r2, [r3], #2
 8007362:	bfb4      	ite	lt
 8007364:	222d      	movlt	r2, #45	; 0x2d
 8007366:	222b      	movge	r2, #43	; 0x2b
 8007368:	2909      	cmp	r1, #9
 800736a:	7042      	strb	r2, [r0, #1]
 800736c:	dd2a      	ble.n	80073c4 <__exponent+0x70>
 800736e:	f10d 0407 	add.w	r4, sp, #7
 8007372:	46a4      	mov	ip, r4
 8007374:	270a      	movs	r7, #10
 8007376:	46a6      	mov	lr, r4
 8007378:	460a      	mov	r2, r1
 800737a:	fb91 f6f7 	sdiv	r6, r1, r7
 800737e:	fb07 1516 	mls	r5, r7, r6, r1
 8007382:	3530      	adds	r5, #48	; 0x30
 8007384:	2a63      	cmp	r2, #99	; 0x63
 8007386:	f104 34ff 	add.w	r4, r4, #4294967295
 800738a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800738e:	4631      	mov	r1, r6
 8007390:	dcf1      	bgt.n	8007376 <__exponent+0x22>
 8007392:	3130      	adds	r1, #48	; 0x30
 8007394:	f1ae 0502 	sub.w	r5, lr, #2
 8007398:	f804 1c01 	strb.w	r1, [r4, #-1]
 800739c:	1c44      	adds	r4, r0, #1
 800739e:	4629      	mov	r1, r5
 80073a0:	4561      	cmp	r1, ip
 80073a2:	d30a      	bcc.n	80073ba <__exponent+0x66>
 80073a4:	f10d 0209 	add.w	r2, sp, #9
 80073a8:	eba2 020e 	sub.w	r2, r2, lr
 80073ac:	4565      	cmp	r5, ip
 80073ae:	bf88      	it	hi
 80073b0:	2200      	movhi	r2, #0
 80073b2:	4413      	add	r3, r2
 80073b4:	1a18      	subs	r0, r3, r0
 80073b6:	b003      	add	sp, #12
 80073b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80073c2:	e7ed      	b.n	80073a0 <__exponent+0x4c>
 80073c4:	2330      	movs	r3, #48	; 0x30
 80073c6:	3130      	adds	r1, #48	; 0x30
 80073c8:	7083      	strb	r3, [r0, #2]
 80073ca:	70c1      	strb	r1, [r0, #3]
 80073cc:	1d03      	adds	r3, r0, #4
 80073ce:	e7f1      	b.n	80073b4 <__exponent+0x60>

080073d0 <_printf_float>:
 80073d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	ed2d 8b02 	vpush	{d8}
 80073d8:	b08d      	sub	sp, #52	; 0x34
 80073da:	460c      	mov	r4, r1
 80073dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80073e0:	4616      	mov	r6, r2
 80073e2:	461f      	mov	r7, r3
 80073e4:	4605      	mov	r5, r0
 80073e6:	f001 fe87 	bl	80090f8 <_localeconv_r>
 80073ea:	f8d0 a000 	ldr.w	sl, [r0]
 80073ee:	4650      	mov	r0, sl
 80073f0:	f7f9 fe26 	bl	8001040 <strlen>
 80073f4:	2300      	movs	r3, #0
 80073f6:	930a      	str	r3, [sp, #40]	; 0x28
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	9305      	str	r3, [sp, #20]
 80073fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007400:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007404:	3307      	adds	r3, #7
 8007406:	f023 0307 	bic.w	r3, r3, #7
 800740a:	f103 0208 	add.w	r2, r3, #8
 800740e:	f8c8 2000 	str.w	r2, [r8]
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800741a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800741e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007422:	9307      	str	r3, [sp, #28]
 8007424:	f8cd 8018 	str.w	r8, [sp, #24]
 8007428:	ee08 0a10 	vmov	s16, r0
 800742c:	4b9f      	ldr	r3, [pc, #636]	; (80076ac <_printf_float+0x2dc>)
 800742e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007432:	f04f 32ff 	mov.w	r2, #4294967295
 8007436:	f7fa fab1 	bl	800199c <__aeabi_dcmpun>
 800743a:	bb88      	cbnz	r0, 80074a0 <_printf_float+0xd0>
 800743c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007440:	4b9a      	ldr	r3, [pc, #616]	; (80076ac <_printf_float+0x2dc>)
 8007442:	f04f 32ff 	mov.w	r2, #4294967295
 8007446:	f7fa fa8b 	bl	8001960 <__aeabi_dcmple>
 800744a:	bb48      	cbnz	r0, 80074a0 <_printf_float+0xd0>
 800744c:	2200      	movs	r2, #0
 800744e:	2300      	movs	r3, #0
 8007450:	4640      	mov	r0, r8
 8007452:	4649      	mov	r1, r9
 8007454:	f7fa fa7a 	bl	800194c <__aeabi_dcmplt>
 8007458:	b110      	cbz	r0, 8007460 <_printf_float+0x90>
 800745a:	232d      	movs	r3, #45	; 0x2d
 800745c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007460:	4b93      	ldr	r3, [pc, #588]	; (80076b0 <_printf_float+0x2e0>)
 8007462:	4894      	ldr	r0, [pc, #592]	; (80076b4 <_printf_float+0x2e4>)
 8007464:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007468:	bf94      	ite	ls
 800746a:	4698      	movls	r8, r3
 800746c:	4680      	movhi	r8, r0
 800746e:	2303      	movs	r3, #3
 8007470:	6123      	str	r3, [r4, #16]
 8007472:	9b05      	ldr	r3, [sp, #20]
 8007474:	f023 0204 	bic.w	r2, r3, #4
 8007478:	6022      	str	r2, [r4, #0]
 800747a:	f04f 0900 	mov.w	r9, #0
 800747e:	9700      	str	r7, [sp, #0]
 8007480:	4633      	mov	r3, r6
 8007482:	aa0b      	add	r2, sp, #44	; 0x2c
 8007484:	4621      	mov	r1, r4
 8007486:	4628      	mov	r0, r5
 8007488:	f000 f9d8 	bl	800783c <_printf_common>
 800748c:	3001      	adds	r0, #1
 800748e:	f040 8090 	bne.w	80075b2 <_printf_float+0x1e2>
 8007492:	f04f 30ff 	mov.w	r0, #4294967295
 8007496:	b00d      	add	sp, #52	; 0x34
 8007498:	ecbd 8b02 	vpop	{d8}
 800749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a0:	4642      	mov	r2, r8
 80074a2:	464b      	mov	r3, r9
 80074a4:	4640      	mov	r0, r8
 80074a6:	4649      	mov	r1, r9
 80074a8:	f7fa fa78 	bl	800199c <__aeabi_dcmpun>
 80074ac:	b140      	cbz	r0, 80074c0 <_printf_float+0xf0>
 80074ae:	464b      	mov	r3, r9
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	bfbc      	itt	lt
 80074b4:	232d      	movlt	r3, #45	; 0x2d
 80074b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074ba:	487f      	ldr	r0, [pc, #508]	; (80076b8 <_printf_float+0x2e8>)
 80074bc:	4b7f      	ldr	r3, [pc, #508]	; (80076bc <_printf_float+0x2ec>)
 80074be:	e7d1      	b.n	8007464 <_printf_float+0x94>
 80074c0:	6863      	ldr	r3, [r4, #4]
 80074c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80074c6:	9206      	str	r2, [sp, #24]
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	d13f      	bne.n	800754c <_printf_float+0x17c>
 80074cc:	2306      	movs	r3, #6
 80074ce:	6063      	str	r3, [r4, #4]
 80074d0:	9b05      	ldr	r3, [sp, #20]
 80074d2:	6861      	ldr	r1, [r4, #4]
 80074d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80074d8:	2300      	movs	r3, #0
 80074da:	9303      	str	r3, [sp, #12]
 80074dc:	ab0a      	add	r3, sp, #40	; 0x28
 80074de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80074e2:	ab09      	add	r3, sp, #36	; 0x24
 80074e4:	ec49 8b10 	vmov	d0, r8, r9
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	6022      	str	r2, [r4, #0]
 80074ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80074f0:	4628      	mov	r0, r5
 80074f2:	f7ff fecd 	bl	8007290 <__cvt>
 80074f6:	9b06      	ldr	r3, [sp, #24]
 80074f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074fa:	2b47      	cmp	r3, #71	; 0x47
 80074fc:	4680      	mov	r8, r0
 80074fe:	d108      	bne.n	8007512 <_printf_float+0x142>
 8007500:	1cc8      	adds	r0, r1, #3
 8007502:	db02      	blt.n	800750a <_printf_float+0x13a>
 8007504:	6863      	ldr	r3, [r4, #4]
 8007506:	4299      	cmp	r1, r3
 8007508:	dd41      	ble.n	800758e <_printf_float+0x1be>
 800750a:	f1ab 0b02 	sub.w	fp, fp, #2
 800750e:	fa5f fb8b 	uxtb.w	fp, fp
 8007512:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007516:	d820      	bhi.n	800755a <_printf_float+0x18a>
 8007518:	3901      	subs	r1, #1
 800751a:	465a      	mov	r2, fp
 800751c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007520:	9109      	str	r1, [sp, #36]	; 0x24
 8007522:	f7ff ff17 	bl	8007354 <__exponent>
 8007526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007528:	1813      	adds	r3, r2, r0
 800752a:	2a01      	cmp	r2, #1
 800752c:	4681      	mov	r9, r0
 800752e:	6123      	str	r3, [r4, #16]
 8007530:	dc02      	bgt.n	8007538 <_printf_float+0x168>
 8007532:	6822      	ldr	r2, [r4, #0]
 8007534:	07d2      	lsls	r2, r2, #31
 8007536:	d501      	bpl.n	800753c <_printf_float+0x16c>
 8007538:	3301      	adds	r3, #1
 800753a:	6123      	str	r3, [r4, #16]
 800753c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007540:	2b00      	cmp	r3, #0
 8007542:	d09c      	beq.n	800747e <_printf_float+0xae>
 8007544:	232d      	movs	r3, #45	; 0x2d
 8007546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800754a:	e798      	b.n	800747e <_printf_float+0xae>
 800754c:	9a06      	ldr	r2, [sp, #24]
 800754e:	2a47      	cmp	r2, #71	; 0x47
 8007550:	d1be      	bne.n	80074d0 <_printf_float+0x100>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1bc      	bne.n	80074d0 <_printf_float+0x100>
 8007556:	2301      	movs	r3, #1
 8007558:	e7b9      	b.n	80074ce <_printf_float+0xfe>
 800755a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800755e:	d118      	bne.n	8007592 <_printf_float+0x1c2>
 8007560:	2900      	cmp	r1, #0
 8007562:	6863      	ldr	r3, [r4, #4]
 8007564:	dd0b      	ble.n	800757e <_printf_float+0x1ae>
 8007566:	6121      	str	r1, [r4, #16]
 8007568:	b913      	cbnz	r3, 8007570 <_printf_float+0x1a0>
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	07d0      	lsls	r0, r2, #31
 800756e:	d502      	bpl.n	8007576 <_printf_float+0x1a6>
 8007570:	3301      	adds	r3, #1
 8007572:	440b      	add	r3, r1
 8007574:	6123      	str	r3, [r4, #16]
 8007576:	65a1      	str	r1, [r4, #88]	; 0x58
 8007578:	f04f 0900 	mov.w	r9, #0
 800757c:	e7de      	b.n	800753c <_printf_float+0x16c>
 800757e:	b913      	cbnz	r3, 8007586 <_printf_float+0x1b6>
 8007580:	6822      	ldr	r2, [r4, #0]
 8007582:	07d2      	lsls	r2, r2, #31
 8007584:	d501      	bpl.n	800758a <_printf_float+0x1ba>
 8007586:	3302      	adds	r3, #2
 8007588:	e7f4      	b.n	8007574 <_printf_float+0x1a4>
 800758a:	2301      	movs	r3, #1
 800758c:	e7f2      	b.n	8007574 <_printf_float+0x1a4>
 800758e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007594:	4299      	cmp	r1, r3
 8007596:	db05      	blt.n	80075a4 <_printf_float+0x1d4>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	6121      	str	r1, [r4, #16]
 800759c:	07d8      	lsls	r0, r3, #31
 800759e:	d5ea      	bpl.n	8007576 <_printf_float+0x1a6>
 80075a0:	1c4b      	adds	r3, r1, #1
 80075a2:	e7e7      	b.n	8007574 <_printf_float+0x1a4>
 80075a4:	2900      	cmp	r1, #0
 80075a6:	bfd4      	ite	le
 80075a8:	f1c1 0202 	rsble	r2, r1, #2
 80075ac:	2201      	movgt	r2, #1
 80075ae:	4413      	add	r3, r2
 80075b0:	e7e0      	b.n	8007574 <_printf_float+0x1a4>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	055a      	lsls	r2, r3, #21
 80075b6:	d407      	bmi.n	80075c8 <_printf_float+0x1f8>
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	4642      	mov	r2, r8
 80075bc:	4631      	mov	r1, r6
 80075be:	4628      	mov	r0, r5
 80075c0:	47b8      	blx	r7
 80075c2:	3001      	adds	r0, #1
 80075c4:	d12c      	bne.n	8007620 <_printf_float+0x250>
 80075c6:	e764      	b.n	8007492 <_printf_float+0xc2>
 80075c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075cc:	f240 80e0 	bls.w	8007790 <_printf_float+0x3c0>
 80075d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075d4:	2200      	movs	r2, #0
 80075d6:	2300      	movs	r3, #0
 80075d8:	f7fa f9ae 	bl	8001938 <__aeabi_dcmpeq>
 80075dc:	2800      	cmp	r0, #0
 80075de:	d034      	beq.n	800764a <_printf_float+0x27a>
 80075e0:	4a37      	ldr	r2, [pc, #220]	; (80076c0 <_printf_float+0x2f0>)
 80075e2:	2301      	movs	r3, #1
 80075e4:	4631      	mov	r1, r6
 80075e6:	4628      	mov	r0, r5
 80075e8:	47b8      	blx	r7
 80075ea:	3001      	adds	r0, #1
 80075ec:	f43f af51 	beq.w	8007492 <_printf_float+0xc2>
 80075f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075f4:	429a      	cmp	r2, r3
 80075f6:	db02      	blt.n	80075fe <_printf_float+0x22e>
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	07d8      	lsls	r0, r3, #31
 80075fc:	d510      	bpl.n	8007620 <_printf_float+0x250>
 80075fe:	ee18 3a10 	vmov	r3, s16
 8007602:	4652      	mov	r2, sl
 8007604:	4631      	mov	r1, r6
 8007606:	4628      	mov	r0, r5
 8007608:	47b8      	blx	r7
 800760a:	3001      	adds	r0, #1
 800760c:	f43f af41 	beq.w	8007492 <_printf_float+0xc2>
 8007610:	f04f 0800 	mov.w	r8, #0
 8007614:	f104 091a 	add.w	r9, r4, #26
 8007618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800761a:	3b01      	subs	r3, #1
 800761c:	4543      	cmp	r3, r8
 800761e:	dc09      	bgt.n	8007634 <_printf_float+0x264>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	079b      	lsls	r3, r3, #30
 8007624:	f100 8105 	bmi.w	8007832 <_printf_float+0x462>
 8007628:	68e0      	ldr	r0, [r4, #12]
 800762a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800762c:	4298      	cmp	r0, r3
 800762e:	bfb8      	it	lt
 8007630:	4618      	movlt	r0, r3
 8007632:	e730      	b.n	8007496 <_printf_float+0xc6>
 8007634:	2301      	movs	r3, #1
 8007636:	464a      	mov	r2, r9
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	f43f af27 	beq.w	8007492 <_printf_float+0xc2>
 8007644:	f108 0801 	add.w	r8, r8, #1
 8007648:	e7e6      	b.n	8007618 <_printf_float+0x248>
 800764a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800764c:	2b00      	cmp	r3, #0
 800764e:	dc39      	bgt.n	80076c4 <_printf_float+0x2f4>
 8007650:	4a1b      	ldr	r2, [pc, #108]	; (80076c0 <_printf_float+0x2f0>)
 8007652:	2301      	movs	r3, #1
 8007654:	4631      	mov	r1, r6
 8007656:	4628      	mov	r0, r5
 8007658:	47b8      	blx	r7
 800765a:	3001      	adds	r0, #1
 800765c:	f43f af19 	beq.w	8007492 <_printf_float+0xc2>
 8007660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007664:	4313      	orrs	r3, r2
 8007666:	d102      	bne.n	800766e <_printf_float+0x29e>
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	07d9      	lsls	r1, r3, #31
 800766c:	d5d8      	bpl.n	8007620 <_printf_float+0x250>
 800766e:	ee18 3a10 	vmov	r3, s16
 8007672:	4652      	mov	r2, sl
 8007674:	4631      	mov	r1, r6
 8007676:	4628      	mov	r0, r5
 8007678:	47b8      	blx	r7
 800767a:	3001      	adds	r0, #1
 800767c:	f43f af09 	beq.w	8007492 <_printf_float+0xc2>
 8007680:	f04f 0900 	mov.w	r9, #0
 8007684:	f104 0a1a 	add.w	sl, r4, #26
 8007688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800768a:	425b      	negs	r3, r3
 800768c:	454b      	cmp	r3, r9
 800768e:	dc01      	bgt.n	8007694 <_printf_float+0x2c4>
 8007690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007692:	e792      	b.n	80075ba <_printf_float+0x1ea>
 8007694:	2301      	movs	r3, #1
 8007696:	4652      	mov	r2, sl
 8007698:	4631      	mov	r1, r6
 800769a:	4628      	mov	r0, r5
 800769c:	47b8      	blx	r7
 800769e:	3001      	adds	r0, #1
 80076a0:	f43f aef7 	beq.w	8007492 <_printf_float+0xc2>
 80076a4:	f109 0901 	add.w	r9, r9, #1
 80076a8:	e7ee      	b.n	8007688 <_printf_float+0x2b8>
 80076aa:	bf00      	nop
 80076ac:	7fefffff 	.word	0x7fefffff
 80076b0:	0800b1a1 	.word	0x0800b1a1
 80076b4:	0800b1a5 	.word	0x0800b1a5
 80076b8:	0800b1ad 	.word	0x0800b1ad
 80076bc:	0800b1a9 	.word	0x0800b1a9
 80076c0:	0800b1b1 	.word	0x0800b1b1
 80076c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076c8:	429a      	cmp	r2, r3
 80076ca:	bfa8      	it	ge
 80076cc:	461a      	movge	r2, r3
 80076ce:	2a00      	cmp	r2, #0
 80076d0:	4691      	mov	r9, r2
 80076d2:	dc37      	bgt.n	8007744 <_printf_float+0x374>
 80076d4:	f04f 0b00 	mov.w	fp, #0
 80076d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076dc:	f104 021a 	add.w	r2, r4, #26
 80076e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076e2:	9305      	str	r3, [sp, #20]
 80076e4:	eba3 0309 	sub.w	r3, r3, r9
 80076e8:	455b      	cmp	r3, fp
 80076ea:	dc33      	bgt.n	8007754 <_printf_float+0x384>
 80076ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076f0:	429a      	cmp	r2, r3
 80076f2:	db3b      	blt.n	800776c <_printf_float+0x39c>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	07da      	lsls	r2, r3, #31
 80076f8:	d438      	bmi.n	800776c <_printf_float+0x39c>
 80076fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076fc:	9b05      	ldr	r3, [sp, #20]
 80076fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	eba2 0901 	sub.w	r9, r2, r1
 8007706:	4599      	cmp	r9, r3
 8007708:	bfa8      	it	ge
 800770a:	4699      	movge	r9, r3
 800770c:	f1b9 0f00 	cmp.w	r9, #0
 8007710:	dc35      	bgt.n	800777e <_printf_float+0x3ae>
 8007712:	f04f 0800 	mov.w	r8, #0
 8007716:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800771a:	f104 0a1a 	add.w	sl, r4, #26
 800771e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	eba3 0309 	sub.w	r3, r3, r9
 8007728:	4543      	cmp	r3, r8
 800772a:	f77f af79 	ble.w	8007620 <_printf_float+0x250>
 800772e:	2301      	movs	r3, #1
 8007730:	4652      	mov	r2, sl
 8007732:	4631      	mov	r1, r6
 8007734:	4628      	mov	r0, r5
 8007736:	47b8      	blx	r7
 8007738:	3001      	adds	r0, #1
 800773a:	f43f aeaa 	beq.w	8007492 <_printf_float+0xc2>
 800773e:	f108 0801 	add.w	r8, r8, #1
 8007742:	e7ec      	b.n	800771e <_printf_float+0x34e>
 8007744:	4613      	mov	r3, r2
 8007746:	4631      	mov	r1, r6
 8007748:	4642      	mov	r2, r8
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	d1c0      	bne.n	80076d4 <_printf_float+0x304>
 8007752:	e69e      	b.n	8007492 <_printf_float+0xc2>
 8007754:	2301      	movs	r3, #1
 8007756:	4631      	mov	r1, r6
 8007758:	4628      	mov	r0, r5
 800775a:	9205      	str	r2, [sp, #20]
 800775c:	47b8      	blx	r7
 800775e:	3001      	adds	r0, #1
 8007760:	f43f ae97 	beq.w	8007492 <_printf_float+0xc2>
 8007764:	9a05      	ldr	r2, [sp, #20]
 8007766:	f10b 0b01 	add.w	fp, fp, #1
 800776a:	e7b9      	b.n	80076e0 <_printf_float+0x310>
 800776c:	ee18 3a10 	vmov	r3, s16
 8007770:	4652      	mov	r2, sl
 8007772:	4631      	mov	r1, r6
 8007774:	4628      	mov	r0, r5
 8007776:	47b8      	blx	r7
 8007778:	3001      	adds	r0, #1
 800777a:	d1be      	bne.n	80076fa <_printf_float+0x32a>
 800777c:	e689      	b.n	8007492 <_printf_float+0xc2>
 800777e:	9a05      	ldr	r2, [sp, #20]
 8007780:	464b      	mov	r3, r9
 8007782:	4442      	add	r2, r8
 8007784:	4631      	mov	r1, r6
 8007786:	4628      	mov	r0, r5
 8007788:	47b8      	blx	r7
 800778a:	3001      	adds	r0, #1
 800778c:	d1c1      	bne.n	8007712 <_printf_float+0x342>
 800778e:	e680      	b.n	8007492 <_printf_float+0xc2>
 8007790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007792:	2a01      	cmp	r2, #1
 8007794:	dc01      	bgt.n	800779a <_printf_float+0x3ca>
 8007796:	07db      	lsls	r3, r3, #31
 8007798:	d538      	bpl.n	800780c <_printf_float+0x43c>
 800779a:	2301      	movs	r3, #1
 800779c:	4642      	mov	r2, r8
 800779e:	4631      	mov	r1, r6
 80077a0:	4628      	mov	r0, r5
 80077a2:	47b8      	blx	r7
 80077a4:	3001      	adds	r0, #1
 80077a6:	f43f ae74 	beq.w	8007492 <_printf_float+0xc2>
 80077aa:	ee18 3a10 	vmov	r3, s16
 80077ae:	4652      	mov	r2, sl
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	f43f ae6b 	beq.w	8007492 <_printf_float+0xc2>
 80077bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077c0:	2200      	movs	r2, #0
 80077c2:	2300      	movs	r3, #0
 80077c4:	f7fa f8b8 	bl	8001938 <__aeabi_dcmpeq>
 80077c8:	b9d8      	cbnz	r0, 8007802 <_printf_float+0x432>
 80077ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077cc:	f108 0201 	add.w	r2, r8, #1
 80077d0:	3b01      	subs	r3, #1
 80077d2:	4631      	mov	r1, r6
 80077d4:	4628      	mov	r0, r5
 80077d6:	47b8      	blx	r7
 80077d8:	3001      	adds	r0, #1
 80077da:	d10e      	bne.n	80077fa <_printf_float+0x42a>
 80077dc:	e659      	b.n	8007492 <_printf_float+0xc2>
 80077de:	2301      	movs	r3, #1
 80077e0:	4652      	mov	r2, sl
 80077e2:	4631      	mov	r1, r6
 80077e4:	4628      	mov	r0, r5
 80077e6:	47b8      	blx	r7
 80077e8:	3001      	adds	r0, #1
 80077ea:	f43f ae52 	beq.w	8007492 <_printf_float+0xc2>
 80077ee:	f108 0801 	add.w	r8, r8, #1
 80077f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f4:	3b01      	subs	r3, #1
 80077f6:	4543      	cmp	r3, r8
 80077f8:	dcf1      	bgt.n	80077de <_printf_float+0x40e>
 80077fa:	464b      	mov	r3, r9
 80077fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007800:	e6dc      	b.n	80075bc <_printf_float+0x1ec>
 8007802:	f04f 0800 	mov.w	r8, #0
 8007806:	f104 0a1a 	add.w	sl, r4, #26
 800780a:	e7f2      	b.n	80077f2 <_printf_float+0x422>
 800780c:	2301      	movs	r3, #1
 800780e:	4642      	mov	r2, r8
 8007810:	e7df      	b.n	80077d2 <_printf_float+0x402>
 8007812:	2301      	movs	r3, #1
 8007814:	464a      	mov	r2, r9
 8007816:	4631      	mov	r1, r6
 8007818:	4628      	mov	r0, r5
 800781a:	47b8      	blx	r7
 800781c:	3001      	adds	r0, #1
 800781e:	f43f ae38 	beq.w	8007492 <_printf_float+0xc2>
 8007822:	f108 0801 	add.w	r8, r8, #1
 8007826:	68e3      	ldr	r3, [r4, #12]
 8007828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800782a:	1a5b      	subs	r3, r3, r1
 800782c:	4543      	cmp	r3, r8
 800782e:	dcf0      	bgt.n	8007812 <_printf_float+0x442>
 8007830:	e6fa      	b.n	8007628 <_printf_float+0x258>
 8007832:	f04f 0800 	mov.w	r8, #0
 8007836:	f104 0919 	add.w	r9, r4, #25
 800783a:	e7f4      	b.n	8007826 <_printf_float+0x456>

0800783c <_printf_common>:
 800783c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007840:	4616      	mov	r6, r2
 8007842:	4699      	mov	r9, r3
 8007844:	688a      	ldr	r2, [r1, #8]
 8007846:	690b      	ldr	r3, [r1, #16]
 8007848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800784c:	4293      	cmp	r3, r2
 800784e:	bfb8      	it	lt
 8007850:	4613      	movlt	r3, r2
 8007852:	6033      	str	r3, [r6, #0]
 8007854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007858:	4607      	mov	r7, r0
 800785a:	460c      	mov	r4, r1
 800785c:	b10a      	cbz	r2, 8007862 <_printf_common+0x26>
 800785e:	3301      	adds	r3, #1
 8007860:	6033      	str	r3, [r6, #0]
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	0699      	lsls	r1, r3, #26
 8007866:	bf42      	ittt	mi
 8007868:	6833      	ldrmi	r3, [r6, #0]
 800786a:	3302      	addmi	r3, #2
 800786c:	6033      	strmi	r3, [r6, #0]
 800786e:	6825      	ldr	r5, [r4, #0]
 8007870:	f015 0506 	ands.w	r5, r5, #6
 8007874:	d106      	bne.n	8007884 <_printf_common+0x48>
 8007876:	f104 0a19 	add.w	sl, r4, #25
 800787a:	68e3      	ldr	r3, [r4, #12]
 800787c:	6832      	ldr	r2, [r6, #0]
 800787e:	1a9b      	subs	r3, r3, r2
 8007880:	42ab      	cmp	r3, r5
 8007882:	dc26      	bgt.n	80078d2 <_printf_common+0x96>
 8007884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007888:	1e13      	subs	r3, r2, #0
 800788a:	6822      	ldr	r2, [r4, #0]
 800788c:	bf18      	it	ne
 800788e:	2301      	movne	r3, #1
 8007890:	0692      	lsls	r2, r2, #26
 8007892:	d42b      	bmi.n	80078ec <_printf_common+0xb0>
 8007894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007898:	4649      	mov	r1, r9
 800789a:	4638      	mov	r0, r7
 800789c:	47c0      	blx	r8
 800789e:	3001      	adds	r0, #1
 80078a0:	d01e      	beq.n	80078e0 <_printf_common+0xa4>
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	68e5      	ldr	r5, [r4, #12]
 80078a6:	6832      	ldr	r2, [r6, #0]
 80078a8:	f003 0306 	and.w	r3, r3, #6
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	bf08      	it	eq
 80078b0:	1aad      	subeq	r5, r5, r2
 80078b2:	68a3      	ldr	r3, [r4, #8]
 80078b4:	6922      	ldr	r2, [r4, #16]
 80078b6:	bf0c      	ite	eq
 80078b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078bc:	2500      	movne	r5, #0
 80078be:	4293      	cmp	r3, r2
 80078c0:	bfc4      	itt	gt
 80078c2:	1a9b      	subgt	r3, r3, r2
 80078c4:	18ed      	addgt	r5, r5, r3
 80078c6:	2600      	movs	r6, #0
 80078c8:	341a      	adds	r4, #26
 80078ca:	42b5      	cmp	r5, r6
 80078cc:	d11a      	bne.n	8007904 <_printf_common+0xc8>
 80078ce:	2000      	movs	r0, #0
 80078d0:	e008      	b.n	80078e4 <_printf_common+0xa8>
 80078d2:	2301      	movs	r3, #1
 80078d4:	4652      	mov	r2, sl
 80078d6:	4649      	mov	r1, r9
 80078d8:	4638      	mov	r0, r7
 80078da:	47c0      	blx	r8
 80078dc:	3001      	adds	r0, #1
 80078de:	d103      	bne.n	80078e8 <_printf_common+0xac>
 80078e0:	f04f 30ff 	mov.w	r0, #4294967295
 80078e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e8:	3501      	adds	r5, #1
 80078ea:	e7c6      	b.n	800787a <_printf_common+0x3e>
 80078ec:	18e1      	adds	r1, r4, r3
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	2030      	movs	r0, #48	; 0x30
 80078f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078f6:	4422      	add	r2, r4
 80078f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007900:	3302      	adds	r3, #2
 8007902:	e7c7      	b.n	8007894 <_printf_common+0x58>
 8007904:	2301      	movs	r3, #1
 8007906:	4622      	mov	r2, r4
 8007908:	4649      	mov	r1, r9
 800790a:	4638      	mov	r0, r7
 800790c:	47c0      	blx	r8
 800790e:	3001      	adds	r0, #1
 8007910:	d0e6      	beq.n	80078e0 <_printf_common+0xa4>
 8007912:	3601      	adds	r6, #1
 8007914:	e7d9      	b.n	80078ca <_printf_common+0x8e>
	...

08007918 <_printf_i>:
 8007918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800791c:	460c      	mov	r4, r1
 800791e:	4691      	mov	r9, r2
 8007920:	7e27      	ldrb	r7, [r4, #24]
 8007922:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007924:	2f78      	cmp	r7, #120	; 0x78
 8007926:	4680      	mov	r8, r0
 8007928:	469a      	mov	sl, r3
 800792a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800792e:	d807      	bhi.n	8007940 <_printf_i+0x28>
 8007930:	2f62      	cmp	r7, #98	; 0x62
 8007932:	d80a      	bhi.n	800794a <_printf_i+0x32>
 8007934:	2f00      	cmp	r7, #0
 8007936:	f000 80d8 	beq.w	8007aea <_printf_i+0x1d2>
 800793a:	2f58      	cmp	r7, #88	; 0x58
 800793c:	f000 80a3 	beq.w	8007a86 <_printf_i+0x16e>
 8007940:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007948:	e03a      	b.n	80079c0 <_printf_i+0xa8>
 800794a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800794e:	2b15      	cmp	r3, #21
 8007950:	d8f6      	bhi.n	8007940 <_printf_i+0x28>
 8007952:	a001      	add	r0, pc, #4	; (adr r0, 8007958 <_printf_i+0x40>)
 8007954:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007958:	080079b1 	.word	0x080079b1
 800795c:	080079c5 	.word	0x080079c5
 8007960:	08007941 	.word	0x08007941
 8007964:	08007941 	.word	0x08007941
 8007968:	08007941 	.word	0x08007941
 800796c:	08007941 	.word	0x08007941
 8007970:	080079c5 	.word	0x080079c5
 8007974:	08007941 	.word	0x08007941
 8007978:	08007941 	.word	0x08007941
 800797c:	08007941 	.word	0x08007941
 8007980:	08007941 	.word	0x08007941
 8007984:	08007ad1 	.word	0x08007ad1
 8007988:	080079f5 	.word	0x080079f5
 800798c:	08007ab3 	.word	0x08007ab3
 8007990:	08007941 	.word	0x08007941
 8007994:	08007941 	.word	0x08007941
 8007998:	08007af3 	.word	0x08007af3
 800799c:	08007941 	.word	0x08007941
 80079a0:	080079f5 	.word	0x080079f5
 80079a4:	08007941 	.word	0x08007941
 80079a8:	08007941 	.word	0x08007941
 80079ac:	08007abb 	.word	0x08007abb
 80079b0:	680b      	ldr	r3, [r1, #0]
 80079b2:	1d1a      	adds	r2, r3, #4
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	600a      	str	r2, [r1, #0]
 80079b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80079bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079c0:	2301      	movs	r3, #1
 80079c2:	e0a3      	b.n	8007b0c <_printf_i+0x1f4>
 80079c4:	6825      	ldr	r5, [r4, #0]
 80079c6:	6808      	ldr	r0, [r1, #0]
 80079c8:	062e      	lsls	r6, r5, #24
 80079ca:	f100 0304 	add.w	r3, r0, #4
 80079ce:	d50a      	bpl.n	80079e6 <_printf_i+0xce>
 80079d0:	6805      	ldr	r5, [r0, #0]
 80079d2:	600b      	str	r3, [r1, #0]
 80079d4:	2d00      	cmp	r5, #0
 80079d6:	da03      	bge.n	80079e0 <_printf_i+0xc8>
 80079d8:	232d      	movs	r3, #45	; 0x2d
 80079da:	426d      	negs	r5, r5
 80079dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e0:	485e      	ldr	r0, [pc, #376]	; (8007b5c <_printf_i+0x244>)
 80079e2:	230a      	movs	r3, #10
 80079e4:	e019      	b.n	8007a1a <_printf_i+0x102>
 80079e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80079ea:	6805      	ldr	r5, [r0, #0]
 80079ec:	600b      	str	r3, [r1, #0]
 80079ee:	bf18      	it	ne
 80079f0:	b22d      	sxthne	r5, r5
 80079f2:	e7ef      	b.n	80079d4 <_printf_i+0xbc>
 80079f4:	680b      	ldr	r3, [r1, #0]
 80079f6:	6825      	ldr	r5, [r4, #0]
 80079f8:	1d18      	adds	r0, r3, #4
 80079fa:	6008      	str	r0, [r1, #0]
 80079fc:	0628      	lsls	r0, r5, #24
 80079fe:	d501      	bpl.n	8007a04 <_printf_i+0xec>
 8007a00:	681d      	ldr	r5, [r3, #0]
 8007a02:	e002      	b.n	8007a0a <_printf_i+0xf2>
 8007a04:	0669      	lsls	r1, r5, #25
 8007a06:	d5fb      	bpl.n	8007a00 <_printf_i+0xe8>
 8007a08:	881d      	ldrh	r5, [r3, #0]
 8007a0a:	4854      	ldr	r0, [pc, #336]	; (8007b5c <_printf_i+0x244>)
 8007a0c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a0e:	bf0c      	ite	eq
 8007a10:	2308      	moveq	r3, #8
 8007a12:	230a      	movne	r3, #10
 8007a14:	2100      	movs	r1, #0
 8007a16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a1a:	6866      	ldr	r6, [r4, #4]
 8007a1c:	60a6      	str	r6, [r4, #8]
 8007a1e:	2e00      	cmp	r6, #0
 8007a20:	bfa2      	ittt	ge
 8007a22:	6821      	ldrge	r1, [r4, #0]
 8007a24:	f021 0104 	bicge.w	r1, r1, #4
 8007a28:	6021      	strge	r1, [r4, #0]
 8007a2a:	b90d      	cbnz	r5, 8007a30 <_printf_i+0x118>
 8007a2c:	2e00      	cmp	r6, #0
 8007a2e:	d04d      	beq.n	8007acc <_printf_i+0x1b4>
 8007a30:	4616      	mov	r6, r2
 8007a32:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a36:	fb03 5711 	mls	r7, r3, r1, r5
 8007a3a:	5dc7      	ldrb	r7, [r0, r7]
 8007a3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a40:	462f      	mov	r7, r5
 8007a42:	42bb      	cmp	r3, r7
 8007a44:	460d      	mov	r5, r1
 8007a46:	d9f4      	bls.n	8007a32 <_printf_i+0x11a>
 8007a48:	2b08      	cmp	r3, #8
 8007a4a:	d10b      	bne.n	8007a64 <_printf_i+0x14c>
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	07df      	lsls	r7, r3, #31
 8007a50:	d508      	bpl.n	8007a64 <_printf_i+0x14c>
 8007a52:	6923      	ldr	r3, [r4, #16]
 8007a54:	6861      	ldr	r1, [r4, #4]
 8007a56:	4299      	cmp	r1, r3
 8007a58:	bfde      	ittt	le
 8007a5a:	2330      	movle	r3, #48	; 0x30
 8007a5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a64:	1b92      	subs	r2, r2, r6
 8007a66:	6122      	str	r2, [r4, #16]
 8007a68:	f8cd a000 	str.w	sl, [sp]
 8007a6c:	464b      	mov	r3, r9
 8007a6e:	aa03      	add	r2, sp, #12
 8007a70:	4621      	mov	r1, r4
 8007a72:	4640      	mov	r0, r8
 8007a74:	f7ff fee2 	bl	800783c <_printf_common>
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d14c      	bne.n	8007b16 <_printf_i+0x1fe>
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a80:	b004      	add	sp, #16
 8007a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a86:	4835      	ldr	r0, [pc, #212]	; (8007b5c <_printf_i+0x244>)
 8007a88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	680e      	ldr	r6, [r1, #0]
 8007a90:	061f      	lsls	r7, r3, #24
 8007a92:	f856 5b04 	ldr.w	r5, [r6], #4
 8007a96:	600e      	str	r6, [r1, #0]
 8007a98:	d514      	bpl.n	8007ac4 <_printf_i+0x1ac>
 8007a9a:	07d9      	lsls	r1, r3, #31
 8007a9c:	bf44      	itt	mi
 8007a9e:	f043 0320 	orrmi.w	r3, r3, #32
 8007aa2:	6023      	strmi	r3, [r4, #0]
 8007aa4:	b91d      	cbnz	r5, 8007aae <_printf_i+0x196>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	f023 0320 	bic.w	r3, r3, #32
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	2310      	movs	r3, #16
 8007ab0:	e7b0      	b.n	8007a14 <_printf_i+0xfc>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	f043 0320 	orr.w	r3, r3, #32
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	2378      	movs	r3, #120	; 0x78
 8007abc:	4828      	ldr	r0, [pc, #160]	; (8007b60 <_printf_i+0x248>)
 8007abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ac2:	e7e3      	b.n	8007a8c <_printf_i+0x174>
 8007ac4:	065e      	lsls	r6, r3, #25
 8007ac6:	bf48      	it	mi
 8007ac8:	b2ad      	uxthmi	r5, r5
 8007aca:	e7e6      	b.n	8007a9a <_printf_i+0x182>
 8007acc:	4616      	mov	r6, r2
 8007ace:	e7bb      	b.n	8007a48 <_printf_i+0x130>
 8007ad0:	680b      	ldr	r3, [r1, #0]
 8007ad2:	6826      	ldr	r6, [r4, #0]
 8007ad4:	6960      	ldr	r0, [r4, #20]
 8007ad6:	1d1d      	adds	r5, r3, #4
 8007ad8:	600d      	str	r5, [r1, #0]
 8007ada:	0635      	lsls	r5, r6, #24
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	d501      	bpl.n	8007ae4 <_printf_i+0x1cc>
 8007ae0:	6018      	str	r0, [r3, #0]
 8007ae2:	e002      	b.n	8007aea <_printf_i+0x1d2>
 8007ae4:	0671      	lsls	r1, r6, #25
 8007ae6:	d5fb      	bpl.n	8007ae0 <_printf_i+0x1c8>
 8007ae8:	8018      	strh	r0, [r3, #0]
 8007aea:	2300      	movs	r3, #0
 8007aec:	6123      	str	r3, [r4, #16]
 8007aee:	4616      	mov	r6, r2
 8007af0:	e7ba      	b.n	8007a68 <_printf_i+0x150>
 8007af2:	680b      	ldr	r3, [r1, #0]
 8007af4:	1d1a      	adds	r2, r3, #4
 8007af6:	600a      	str	r2, [r1, #0]
 8007af8:	681e      	ldr	r6, [r3, #0]
 8007afa:	6862      	ldr	r2, [r4, #4]
 8007afc:	2100      	movs	r1, #0
 8007afe:	4630      	mov	r0, r6
 8007b00:	f7f9 faa6 	bl	8001050 <memchr>
 8007b04:	b108      	cbz	r0, 8007b0a <_printf_i+0x1f2>
 8007b06:	1b80      	subs	r0, r0, r6
 8007b08:	6060      	str	r0, [r4, #4]
 8007b0a:	6863      	ldr	r3, [r4, #4]
 8007b0c:	6123      	str	r3, [r4, #16]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b14:	e7a8      	b.n	8007a68 <_printf_i+0x150>
 8007b16:	6923      	ldr	r3, [r4, #16]
 8007b18:	4632      	mov	r2, r6
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	47d0      	blx	sl
 8007b20:	3001      	adds	r0, #1
 8007b22:	d0ab      	beq.n	8007a7c <_printf_i+0x164>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	079b      	lsls	r3, r3, #30
 8007b28:	d413      	bmi.n	8007b52 <_printf_i+0x23a>
 8007b2a:	68e0      	ldr	r0, [r4, #12]
 8007b2c:	9b03      	ldr	r3, [sp, #12]
 8007b2e:	4298      	cmp	r0, r3
 8007b30:	bfb8      	it	lt
 8007b32:	4618      	movlt	r0, r3
 8007b34:	e7a4      	b.n	8007a80 <_printf_i+0x168>
 8007b36:	2301      	movs	r3, #1
 8007b38:	4632      	mov	r2, r6
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	4640      	mov	r0, r8
 8007b3e:	47d0      	blx	sl
 8007b40:	3001      	adds	r0, #1
 8007b42:	d09b      	beq.n	8007a7c <_printf_i+0x164>
 8007b44:	3501      	adds	r5, #1
 8007b46:	68e3      	ldr	r3, [r4, #12]
 8007b48:	9903      	ldr	r1, [sp, #12]
 8007b4a:	1a5b      	subs	r3, r3, r1
 8007b4c:	42ab      	cmp	r3, r5
 8007b4e:	dcf2      	bgt.n	8007b36 <_printf_i+0x21e>
 8007b50:	e7eb      	b.n	8007b2a <_printf_i+0x212>
 8007b52:	2500      	movs	r5, #0
 8007b54:	f104 0619 	add.w	r6, r4, #25
 8007b58:	e7f5      	b.n	8007b46 <_printf_i+0x22e>
 8007b5a:	bf00      	nop
 8007b5c:	0800b1b3 	.word	0x0800b1b3
 8007b60:	0800b1c4 	.word	0x0800b1c4

08007b64 <iprintf>:
 8007b64:	b40f      	push	{r0, r1, r2, r3}
 8007b66:	4b0a      	ldr	r3, [pc, #40]	; (8007b90 <iprintf+0x2c>)
 8007b68:	b513      	push	{r0, r1, r4, lr}
 8007b6a:	681c      	ldr	r4, [r3, #0]
 8007b6c:	b124      	cbz	r4, 8007b78 <iprintf+0x14>
 8007b6e:	69a3      	ldr	r3, [r4, #24]
 8007b70:	b913      	cbnz	r3, 8007b78 <iprintf+0x14>
 8007b72:	4620      	mov	r0, r4
 8007b74:	f001 fa22 	bl	8008fbc <__sinit>
 8007b78:	ab05      	add	r3, sp, #20
 8007b7a:	9a04      	ldr	r2, [sp, #16]
 8007b7c:	68a1      	ldr	r1, [r4, #8]
 8007b7e:	9301      	str	r3, [sp, #4]
 8007b80:	4620      	mov	r0, r4
 8007b82:	f7ff fa55 	bl	8007030 <_vfiprintf_r>
 8007b86:	b002      	add	sp, #8
 8007b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b8c:	b004      	add	sp, #16
 8007b8e:	4770      	bx	lr
 8007b90:	20000010 	.word	0x20000010

08007b94 <_puts_r>:
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	460e      	mov	r6, r1
 8007b98:	4605      	mov	r5, r0
 8007b9a:	b118      	cbz	r0, 8007ba4 <_puts_r+0x10>
 8007b9c:	6983      	ldr	r3, [r0, #24]
 8007b9e:	b90b      	cbnz	r3, 8007ba4 <_puts_r+0x10>
 8007ba0:	f001 fa0c 	bl	8008fbc <__sinit>
 8007ba4:	69ab      	ldr	r3, [r5, #24]
 8007ba6:	68ac      	ldr	r4, [r5, #8]
 8007ba8:	b913      	cbnz	r3, 8007bb0 <_puts_r+0x1c>
 8007baa:	4628      	mov	r0, r5
 8007bac:	f001 fa06 	bl	8008fbc <__sinit>
 8007bb0:	4b2c      	ldr	r3, [pc, #176]	; (8007c64 <_puts_r+0xd0>)
 8007bb2:	429c      	cmp	r4, r3
 8007bb4:	d120      	bne.n	8007bf8 <_puts_r+0x64>
 8007bb6:	686c      	ldr	r4, [r5, #4]
 8007bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bba:	07db      	lsls	r3, r3, #31
 8007bbc:	d405      	bmi.n	8007bca <_puts_r+0x36>
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	0598      	lsls	r0, r3, #22
 8007bc2:	d402      	bmi.n	8007bca <_puts_r+0x36>
 8007bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bc6:	f001 fa9c 	bl	8009102 <__retarget_lock_acquire_recursive>
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	0719      	lsls	r1, r3, #28
 8007bce:	d51d      	bpl.n	8007c0c <_puts_r+0x78>
 8007bd0:	6923      	ldr	r3, [r4, #16]
 8007bd2:	b1db      	cbz	r3, 8007c0c <_puts_r+0x78>
 8007bd4:	3e01      	subs	r6, #1
 8007bd6:	68a3      	ldr	r3, [r4, #8]
 8007bd8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	60a3      	str	r3, [r4, #8]
 8007be0:	bb39      	cbnz	r1, 8007c32 <_puts_r+0x9e>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	da38      	bge.n	8007c58 <_puts_r+0xc4>
 8007be6:	4622      	mov	r2, r4
 8007be8:	210a      	movs	r1, #10
 8007bea:	4628      	mov	r0, r5
 8007bec:	f000 f98c 	bl	8007f08 <__swbuf_r>
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d011      	beq.n	8007c18 <_puts_r+0x84>
 8007bf4:	250a      	movs	r5, #10
 8007bf6:	e011      	b.n	8007c1c <_puts_r+0x88>
 8007bf8:	4b1b      	ldr	r3, [pc, #108]	; (8007c68 <_puts_r+0xd4>)
 8007bfa:	429c      	cmp	r4, r3
 8007bfc:	d101      	bne.n	8007c02 <_puts_r+0x6e>
 8007bfe:	68ac      	ldr	r4, [r5, #8]
 8007c00:	e7da      	b.n	8007bb8 <_puts_r+0x24>
 8007c02:	4b1a      	ldr	r3, [pc, #104]	; (8007c6c <_puts_r+0xd8>)
 8007c04:	429c      	cmp	r4, r3
 8007c06:	bf08      	it	eq
 8007c08:	68ec      	ldreq	r4, [r5, #12]
 8007c0a:	e7d5      	b.n	8007bb8 <_puts_r+0x24>
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f000 f9cc 	bl	8007fac <__swsetup_r>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	d0dd      	beq.n	8007bd4 <_puts_r+0x40>
 8007c18:	f04f 35ff 	mov.w	r5, #4294967295
 8007c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c1e:	07da      	lsls	r2, r3, #31
 8007c20:	d405      	bmi.n	8007c2e <_puts_r+0x9a>
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	059b      	lsls	r3, r3, #22
 8007c26:	d402      	bmi.n	8007c2e <_puts_r+0x9a>
 8007c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c2a:	f001 fa6b 	bl	8009104 <__retarget_lock_release_recursive>
 8007c2e:	4628      	mov	r0, r5
 8007c30:	bd70      	pop	{r4, r5, r6, pc}
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	da04      	bge.n	8007c40 <_puts_r+0xac>
 8007c36:	69a2      	ldr	r2, [r4, #24]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	dc06      	bgt.n	8007c4a <_puts_r+0xb6>
 8007c3c:	290a      	cmp	r1, #10
 8007c3e:	d004      	beq.n	8007c4a <_puts_r+0xb6>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	6022      	str	r2, [r4, #0]
 8007c46:	7019      	strb	r1, [r3, #0]
 8007c48:	e7c5      	b.n	8007bd6 <_puts_r+0x42>
 8007c4a:	4622      	mov	r2, r4
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	f000 f95b 	bl	8007f08 <__swbuf_r>
 8007c52:	3001      	adds	r0, #1
 8007c54:	d1bf      	bne.n	8007bd6 <_puts_r+0x42>
 8007c56:	e7df      	b.n	8007c18 <_puts_r+0x84>
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	250a      	movs	r5, #10
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	6022      	str	r2, [r4, #0]
 8007c60:	701d      	strb	r5, [r3, #0]
 8007c62:	e7db      	b.n	8007c1c <_puts_r+0x88>
 8007c64:	0800b2e8 	.word	0x0800b2e8
 8007c68:	0800b308 	.word	0x0800b308
 8007c6c:	0800b2c8 	.word	0x0800b2c8

08007c70 <puts>:
 8007c70:	4b02      	ldr	r3, [pc, #8]	; (8007c7c <puts+0xc>)
 8007c72:	4601      	mov	r1, r0
 8007c74:	6818      	ldr	r0, [r3, #0]
 8007c76:	f7ff bf8d 	b.w	8007b94 <_puts_r>
 8007c7a:	bf00      	nop
 8007c7c:	20000010 	.word	0x20000010

08007c80 <srand>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4b10      	ldr	r3, [pc, #64]	; (8007cc4 <srand+0x44>)
 8007c84:	681d      	ldr	r5, [r3, #0]
 8007c86:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007c88:	4604      	mov	r4, r0
 8007c8a:	b9b3      	cbnz	r3, 8007cba <srand+0x3a>
 8007c8c:	2018      	movs	r0, #24
 8007c8e:	f7ff f8eb 	bl	8006e68 <malloc>
 8007c92:	4602      	mov	r2, r0
 8007c94:	63a8      	str	r0, [r5, #56]	; 0x38
 8007c96:	b920      	cbnz	r0, 8007ca2 <srand+0x22>
 8007c98:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <srand+0x48>)
 8007c9a:	480c      	ldr	r0, [pc, #48]	; (8007ccc <srand+0x4c>)
 8007c9c:	2142      	movs	r1, #66	; 0x42
 8007c9e:	f7ff f889 	bl	8006db4 <__assert_func>
 8007ca2:	490b      	ldr	r1, [pc, #44]	; (8007cd0 <srand+0x50>)
 8007ca4:	4b0b      	ldr	r3, [pc, #44]	; (8007cd4 <srand+0x54>)
 8007ca6:	e9c0 1300 	strd	r1, r3, [r0]
 8007caa:	4b0b      	ldr	r3, [pc, #44]	; (8007cd8 <srand+0x58>)
 8007cac:	6083      	str	r3, [r0, #8]
 8007cae:	230b      	movs	r3, #11
 8007cb0:	8183      	strh	r3, [r0, #12]
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007cba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	611c      	str	r4, [r3, #16]
 8007cc0:	615a      	str	r2, [r3, #20]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	20000010 	.word	0x20000010
 8007cc8:	0800b1d5 	.word	0x0800b1d5
 8007ccc:	0800b1ec 	.word	0x0800b1ec
 8007cd0:	abcd330e 	.word	0xabcd330e
 8007cd4:	e66d1234 	.word	0xe66d1234
 8007cd8:	0005deec 	.word	0x0005deec

08007cdc <rand>:
 8007cdc:	4b17      	ldr	r3, [pc, #92]	; (8007d3c <rand+0x60>)
 8007cde:	b510      	push	{r4, lr}
 8007ce0:	681c      	ldr	r4, [r3, #0]
 8007ce2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ce4:	b9b3      	cbnz	r3, 8007d14 <rand+0x38>
 8007ce6:	2018      	movs	r0, #24
 8007ce8:	f7ff f8be 	bl	8006e68 <malloc>
 8007cec:	63a0      	str	r0, [r4, #56]	; 0x38
 8007cee:	b928      	cbnz	r0, 8007cfc <rand+0x20>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	4b13      	ldr	r3, [pc, #76]	; (8007d40 <rand+0x64>)
 8007cf4:	4813      	ldr	r0, [pc, #76]	; (8007d44 <rand+0x68>)
 8007cf6:	214e      	movs	r1, #78	; 0x4e
 8007cf8:	f7ff f85c 	bl	8006db4 <__assert_func>
 8007cfc:	4a12      	ldr	r2, [pc, #72]	; (8007d48 <rand+0x6c>)
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <rand+0x70>)
 8007d00:	e9c0 2300 	strd	r2, r3, [r0]
 8007d04:	4b12      	ldr	r3, [pc, #72]	; (8007d50 <rand+0x74>)
 8007d06:	6083      	str	r3, [r0, #8]
 8007d08:	230b      	movs	r3, #11
 8007d0a:	8183      	strh	r3, [r0, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	2300      	movs	r3, #0
 8007d10:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007d14:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007d16:	480f      	ldr	r0, [pc, #60]	; (8007d54 <rand+0x78>)
 8007d18:	690a      	ldr	r2, [r1, #16]
 8007d1a:	694b      	ldr	r3, [r1, #20]
 8007d1c:	4c0e      	ldr	r4, [pc, #56]	; (8007d58 <rand+0x7c>)
 8007d1e:	4350      	muls	r0, r2
 8007d20:	fb04 0003 	mla	r0, r4, r3, r0
 8007d24:	fba2 3404 	umull	r3, r4, r2, r4
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	4404      	add	r4, r0
 8007d2c:	f144 0000 	adc.w	r0, r4, #0
 8007d30:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8007d34:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007d38:	bd10      	pop	{r4, pc}
 8007d3a:	bf00      	nop
 8007d3c:	20000010 	.word	0x20000010
 8007d40:	0800b1d5 	.word	0x0800b1d5
 8007d44:	0800b1ec 	.word	0x0800b1ec
 8007d48:	abcd330e 	.word	0xabcd330e
 8007d4c:	e66d1234 	.word	0xe66d1234
 8007d50:	0005deec 	.word	0x0005deec
 8007d54:	5851f42d 	.word	0x5851f42d
 8007d58:	4c957f2d 	.word	0x4c957f2d

08007d5c <_sbrk_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d06      	ldr	r5, [pc, #24]	; (8007d78 <_sbrk_r+0x1c>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f7fa fe7c 	bl	8002a64 <_sbrk>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_sbrk_r+0x1a>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_sbrk_r+0x1a>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	2000093c 	.word	0x2000093c

08007d7c <setvbuf>:
 8007d7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d80:	461d      	mov	r5, r3
 8007d82:	4b5d      	ldr	r3, [pc, #372]	; (8007ef8 <setvbuf+0x17c>)
 8007d84:	681f      	ldr	r7, [r3, #0]
 8007d86:	4604      	mov	r4, r0
 8007d88:	460e      	mov	r6, r1
 8007d8a:	4690      	mov	r8, r2
 8007d8c:	b127      	cbz	r7, 8007d98 <setvbuf+0x1c>
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	b913      	cbnz	r3, 8007d98 <setvbuf+0x1c>
 8007d92:	4638      	mov	r0, r7
 8007d94:	f001 f912 	bl	8008fbc <__sinit>
 8007d98:	4b58      	ldr	r3, [pc, #352]	; (8007efc <setvbuf+0x180>)
 8007d9a:	429c      	cmp	r4, r3
 8007d9c:	d167      	bne.n	8007e6e <setvbuf+0xf2>
 8007d9e:	687c      	ldr	r4, [r7, #4]
 8007da0:	f1b8 0f02 	cmp.w	r8, #2
 8007da4:	d006      	beq.n	8007db4 <setvbuf+0x38>
 8007da6:	f1b8 0f01 	cmp.w	r8, #1
 8007daa:	f200 809f 	bhi.w	8007eec <setvbuf+0x170>
 8007dae:	2d00      	cmp	r5, #0
 8007db0:	f2c0 809c 	blt.w	8007eec <setvbuf+0x170>
 8007db4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007db6:	07db      	lsls	r3, r3, #31
 8007db8:	d405      	bmi.n	8007dc6 <setvbuf+0x4a>
 8007dba:	89a3      	ldrh	r3, [r4, #12]
 8007dbc:	0598      	lsls	r0, r3, #22
 8007dbe:	d402      	bmi.n	8007dc6 <setvbuf+0x4a>
 8007dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dc2:	f001 f99e 	bl	8009102 <__retarget_lock_acquire_recursive>
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	4638      	mov	r0, r7
 8007dca:	f001 f863 	bl	8008e94 <_fflush_r>
 8007dce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dd0:	b141      	cbz	r1, 8007de4 <setvbuf+0x68>
 8007dd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dd6:	4299      	cmp	r1, r3
 8007dd8:	d002      	beq.n	8007de0 <setvbuf+0x64>
 8007dda:	4638      	mov	r0, r7
 8007ddc:	f7ff f854 	bl	8006e88 <_free_r>
 8007de0:	2300      	movs	r3, #0
 8007de2:	6363      	str	r3, [r4, #52]	; 0x34
 8007de4:	2300      	movs	r3, #0
 8007de6:	61a3      	str	r3, [r4, #24]
 8007de8:	6063      	str	r3, [r4, #4]
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	0619      	lsls	r1, r3, #24
 8007dee:	d503      	bpl.n	8007df8 <setvbuf+0x7c>
 8007df0:	6921      	ldr	r1, [r4, #16]
 8007df2:	4638      	mov	r0, r7
 8007df4:	f7ff f848 	bl	8006e88 <_free_r>
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007dfe:	f023 0303 	bic.w	r3, r3, #3
 8007e02:	f1b8 0f02 	cmp.w	r8, #2
 8007e06:	81a3      	strh	r3, [r4, #12]
 8007e08:	d06c      	beq.n	8007ee4 <setvbuf+0x168>
 8007e0a:	ab01      	add	r3, sp, #4
 8007e0c:	466a      	mov	r2, sp
 8007e0e:	4621      	mov	r1, r4
 8007e10:	4638      	mov	r0, r7
 8007e12:	f001 f978 	bl	8009106 <__swhatbuf_r>
 8007e16:	89a3      	ldrh	r3, [r4, #12]
 8007e18:	4318      	orrs	r0, r3
 8007e1a:	81a0      	strh	r0, [r4, #12]
 8007e1c:	2d00      	cmp	r5, #0
 8007e1e:	d130      	bne.n	8007e82 <setvbuf+0x106>
 8007e20:	9d00      	ldr	r5, [sp, #0]
 8007e22:	4628      	mov	r0, r5
 8007e24:	f7ff f820 	bl	8006e68 <malloc>
 8007e28:	4606      	mov	r6, r0
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d155      	bne.n	8007eda <setvbuf+0x15e>
 8007e2e:	f8dd 9000 	ldr.w	r9, [sp]
 8007e32:	45a9      	cmp	r9, r5
 8007e34:	d14a      	bne.n	8007ecc <setvbuf+0x150>
 8007e36:	f04f 35ff 	mov.w	r5, #4294967295
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	60a2      	str	r2, [r4, #8]
 8007e3e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007e42:	6022      	str	r2, [r4, #0]
 8007e44:	6122      	str	r2, [r4, #16]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e4c:	6162      	str	r2, [r4, #20]
 8007e4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e50:	f043 0302 	orr.w	r3, r3, #2
 8007e54:	07d2      	lsls	r2, r2, #31
 8007e56:	81a3      	strh	r3, [r4, #12]
 8007e58:	d405      	bmi.n	8007e66 <setvbuf+0xea>
 8007e5a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007e5e:	d102      	bne.n	8007e66 <setvbuf+0xea>
 8007e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e62:	f001 f94f 	bl	8009104 <__retarget_lock_release_recursive>
 8007e66:	4628      	mov	r0, r5
 8007e68:	b003      	add	sp, #12
 8007e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e6e:	4b24      	ldr	r3, [pc, #144]	; (8007f00 <setvbuf+0x184>)
 8007e70:	429c      	cmp	r4, r3
 8007e72:	d101      	bne.n	8007e78 <setvbuf+0xfc>
 8007e74:	68bc      	ldr	r4, [r7, #8]
 8007e76:	e793      	b.n	8007da0 <setvbuf+0x24>
 8007e78:	4b22      	ldr	r3, [pc, #136]	; (8007f04 <setvbuf+0x188>)
 8007e7a:	429c      	cmp	r4, r3
 8007e7c:	bf08      	it	eq
 8007e7e:	68fc      	ldreq	r4, [r7, #12]
 8007e80:	e78e      	b.n	8007da0 <setvbuf+0x24>
 8007e82:	2e00      	cmp	r6, #0
 8007e84:	d0cd      	beq.n	8007e22 <setvbuf+0xa6>
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	b913      	cbnz	r3, 8007e90 <setvbuf+0x114>
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	f001 f896 	bl	8008fbc <__sinit>
 8007e90:	f1b8 0f01 	cmp.w	r8, #1
 8007e94:	bf08      	it	eq
 8007e96:	89a3      	ldrheq	r3, [r4, #12]
 8007e98:	6026      	str	r6, [r4, #0]
 8007e9a:	bf04      	itt	eq
 8007e9c:	f043 0301 	orreq.w	r3, r3, #1
 8007ea0:	81a3      	strheq	r3, [r4, #12]
 8007ea2:	89a2      	ldrh	r2, [r4, #12]
 8007ea4:	f012 0308 	ands.w	r3, r2, #8
 8007ea8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007eac:	d01c      	beq.n	8007ee8 <setvbuf+0x16c>
 8007eae:	07d3      	lsls	r3, r2, #31
 8007eb0:	bf41      	itttt	mi
 8007eb2:	2300      	movmi	r3, #0
 8007eb4:	426d      	negmi	r5, r5
 8007eb6:	60a3      	strmi	r3, [r4, #8]
 8007eb8:	61a5      	strmi	r5, [r4, #24]
 8007eba:	bf58      	it	pl
 8007ebc:	60a5      	strpl	r5, [r4, #8]
 8007ebe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007ec0:	f015 0501 	ands.w	r5, r5, #1
 8007ec4:	d115      	bne.n	8007ef2 <setvbuf+0x176>
 8007ec6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007eca:	e7c8      	b.n	8007e5e <setvbuf+0xe2>
 8007ecc:	4648      	mov	r0, r9
 8007ece:	f7fe ffcb 	bl	8006e68 <malloc>
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	d0ae      	beq.n	8007e36 <setvbuf+0xba>
 8007ed8:	464d      	mov	r5, r9
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee0:	81a3      	strh	r3, [r4, #12]
 8007ee2:	e7d0      	b.n	8007e86 <setvbuf+0x10a>
 8007ee4:	2500      	movs	r5, #0
 8007ee6:	e7a8      	b.n	8007e3a <setvbuf+0xbe>
 8007ee8:	60a3      	str	r3, [r4, #8]
 8007eea:	e7e8      	b.n	8007ebe <setvbuf+0x142>
 8007eec:	f04f 35ff 	mov.w	r5, #4294967295
 8007ef0:	e7b9      	b.n	8007e66 <setvbuf+0xea>
 8007ef2:	2500      	movs	r5, #0
 8007ef4:	e7b7      	b.n	8007e66 <setvbuf+0xea>
 8007ef6:	bf00      	nop
 8007ef8:	20000010 	.word	0x20000010
 8007efc:	0800b2e8 	.word	0x0800b2e8
 8007f00:	0800b308 	.word	0x0800b308
 8007f04:	0800b2c8 	.word	0x0800b2c8

08007f08 <__swbuf_r>:
 8007f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0a:	460e      	mov	r6, r1
 8007f0c:	4614      	mov	r4, r2
 8007f0e:	4605      	mov	r5, r0
 8007f10:	b118      	cbz	r0, 8007f1a <__swbuf_r+0x12>
 8007f12:	6983      	ldr	r3, [r0, #24]
 8007f14:	b90b      	cbnz	r3, 8007f1a <__swbuf_r+0x12>
 8007f16:	f001 f851 	bl	8008fbc <__sinit>
 8007f1a:	4b21      	ldr	r3, [pc, #132]	; (8007fa0 <__swbuf_r+0x98>)
 8007f1c:	429c      	cmp	r4, r3
 8007f1e:	d12b      	bne.n	8007f78 <__swbuf_r+0x70>
 8007f20:	686c      	ldr	r4, [r5, #4]
 8007f22:	69a3      	ldr	r3, [r4, #24]
 8007f24:	60a3      	str	r3, [r4, #8]
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	071a      	lsls	r2, r3, #28
 8007f2a:	d52f      	bpl.n	8007f8c <__swbuf_r+0x84>
 8007f2c:	6923      	ldr	r3, [r4, #16]
 8007f2e:	b36b      	cbz	r3, 8007f8c <__swbuf_r+0x84>
 8007f30:	6923      	ldr	r3, [r4, #16]
 8007f32:	6820      	ldr	r0, [r4, #0]
 8007f34:	1ac0      	subs	r0, r0, r3
 8007f36:	6963      	ldr	r3, [r4, #20]
 8007f38:	b2f6      	uxtb	r6, r6
 8007f3a:	4283      	cmp	r3, r0
 8007f3c:	4637      	mov	r7, r6
 8007f3e:	dc04      	bgt.n	8007f4a <__swbuf_r+0x42>
 8007f40:	4621      	mov	r1, r4
 8007f42:	4628      	mov	r0, r5
 8007f44:	f000 ffa6 	bl	8008e94 <_fflush_r>
 8007f48:	bb30      	cbnz	r0, 8007f98 <__swbuf_r+0x90>
 8007f4a:	68a3      	ldr	r3, [r4, #8]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	60a3      	str	r3, [r4, #8]
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	1c5a      	adds	r2, r3, #1
 8007f54:	6022      	str	r2, [r4, #0]
 8007f56:	701e      	strb	r6, [r3, #0]
 8007f58:	6963      	ldr	r3, [r4, #20]
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	4283      	cmp	r3, r0
 8007f5e:	d004      	beq.n	8007f6a <__swbuf_r+0x62>
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	07db      	lsls	r3, r3, #31
 8007f64:	d506      	bpl.n	8007f74 <__swbuf_r+0x6c>
 8007f66:	2e0a      	cmp	r6, #10
 8007f68:	d104      	bne.n	8007f74 <__swbuf_r+0x6c>
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	f000 ff91 	bl	8008e94 <_fflush_r>
 8007f72:	b988      	cbnz	r0, 8007f98 <__swbuf_r+0x90>
 8007f74:	4638      	mov	r0, r7
 8007f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f78:	4b0a      	ldr	r3, [pc, #40]	; (8007fa4 <__swbuf_r+0x9c>)
 8007f7a:	429c      	cmp	r4, r3
 8007f7c:	d101      	bne.n	8007f82 <__swbuf_r+0x7a>
 8007f7e:	68ac      	ldr	r4, [r5, #8]
 8007f80:	e7cf      	b.n	8007f22 <__swbuf_r+0x1a>
 8007f82:	4b09      	ldr	r3, [pc, #36]	; (8007fa8 <__swbuf_r+0xa0>)
 8007f84:	429c      	cmp	r4, r3
 8007f86:	bf08      	it	eq
 8007f88:	68ec      	ldreq	r4, [r5, #12]
 8007f8a:	e7ca      	b.n	8007f22 <__swbuf_r+0x1a>
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f000 f80c 	bl	8007fac <__swsetup_r>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d0cb      	beq.n	8007f30 <__swbuf_r+0x28>
 8007f98:	f04f 37ff 	mov.w	r7, #4294967295
 8007f9c:	e7ea      	b.n	8007f74 <__swbuf_r+0x6c>
 8007f9e:	bf00      	nop
 8007fa0:	0800b2e8 	.word	0x0800b2e8
 8007fa4:	0800b308 	.word	0x0800b308
 8007fa8:	0800b2c8 	.word	0x0800b2c8

08007fac <__swsetup_r>:
 8007fac:	4b32      	ldr	r3, [pc, #200]	; (8008078 <__swsetup_r+0xcc>)
 8007fae:	b570      	push	{r4, r5, r6, lr}
 8007fb0:	681d      	ldr	r5, [r3, #0]
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	b125      	cbz	r5, 8007fc2 <__swsetup_r+0x16>
 8007fb8:	69ab      	ldr	r3, [r5, #24]
 8007fba:	b913      	cbnz	r3, 8007fc2 <__swsetup_r+0x16>
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	f000 fffd 	bl	8008fbc <__sinit>
 8007fc2:	4b2e      	ldr	r3, [pc, #184]	; (800807c <__swsetup_r+0xd0>)
 8007fc4:	429c      	cmp	r4, r3
 8007fc6:	d10f      	bne.n	8007fe8 <__swsetup_r+0x3c>
 8007fc8:	686c      	ldr	r4, [r5, #4]
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fd0:	0719      	lsls	r1, r3, #28
 8007fd2:	d42c      	bmi.n	800802e <__swsetup_r+0x82>
 8007fd4:	06dd      	lsls	r5, r3, #27
 8007fd6:	d411      	bmi.n	8007ffc <__swsetup_r+0x50>
 8007fd8:	2309      	movs	r3, #9
 8007fda:	6033      	str	r3, [r6, #0]
 8007fdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fe0:	81a3      	strh	r3, [r4, #12]
 8007fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe6:	e03e      	b.n	8008066 <__swsetup_r+0xba>
 8007fe8:	4b25      	ldr	r3, [pc, #148]	; (8008080 <__swsetup_r+0xd4>)
 8007fea:	429c      	cmp	r4, r3
 8007fec:	d101      	bne.n	8007ff2 <__swsetup_r+0x46>
 8007fee:	68ac      	ldr	r4, [r5, #8]
 8007ff0:	e7eb      	b.n	8007fca <__swsetup_r+0x1e>
 8007ff2:	4b24      	ldr	r3, [pc, #144]	; (8008084 <__swsetup_r+0xd8>)
 8007ff4:	429c      	cmp	r4, r3
 8007ff6:	bf08      	it	eq
 8007ff8:	68ec      	ldreq	r4, [r5, #12]
 8007ffa:	e7e6      	b.n	8007fca <__swsetup_r+0x1e>
 8007ffc:	0758      	lsls	r0, r3, #29
 8007ffe:	d512      	bpl.n	8008026 <__swsetup_r+0x7a>
 8008000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008002:	b141      	cbz	r1, 8008016 <__swsetup_r+0x6a>
 8008004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008008:	4299      	cmp	r1, r3
 800800a:	d002      	beq.n	8008012 <__swsetup_r+0x66>
 800800c:	4630      	mov	r0, r6
 800800e:	f7fe ff3b 	bl	8006e88 <_free_r>
 8008012:	2300      	movs	r3, #0
 8008014:	6363      	str	r3, [r4, #52]	; 0x34
 8008016:	89a3      	ldrh	r3, [r4, #12]
 8008018:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800801c:	81a3      	strh	r3, [r4, #12]
 800801e:	2300      	movs	r3, #0
 8008020:	6063      	str	r3, [r4, #4]
 8008022:	6923      	ldr	r3, [r4, #16]
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	f043 0308 	orr.w	r3, r3, #8
 800802c:	81a3      	strh	r3, [r4, #12]
 800802e:	6923      	ldr	r3, [r4, #16]
 8008030:	b94b      	cbnz	r3, 8008046 <__swsetup_r+0x9a>
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800803c:	d003      	beq.n	8008046 <__swsetup_r+0x9a>
 800803e:	4621      	mov	r1, r4
 8008040:	4630      	mov	r0, r6
 8008042:	f001 f885 	bl	8009150 <__smakebuf_r>
 8008046:	89a0      	ldrh	r0, [r4, #12]
 8008048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800804c:	f010 0301 	ands.w	r3, r0, #1
 8008050:	d00a      	beq.n	8008068 <__swsetup_r+0xbc>
 8008052:	2300      	movs	r3, #0
 8008054:	60a3      	str	r3, [r4, #8]
 8008056:	6963      	ldr	r3, [r4, #20]
 8008058:	425b      	negs	r3, r3
 800805a:	61a3      	str	r3, [r4, #24]
 800805c:	6923      	ldr	r3, [r4, #16]
 800805e:	b943      	cbnz	r3, 8008072 <__swsetup_r+0xc6>
 8008060:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008064:	d1ba      	bne.n	8007fdc <__swsetup_r+0x30>
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	0781      	lsls	r1, r0, #30
 800806a:	bf58      	it	pl
 800806c:	6963      	ldrpl	r3, [r4, #20]
 800806e:	60a3      	str	r3, [r4, #8]
 8008070:	e7f4      	b.n	800805c <__swsetup_r+0xb0>
 8008072:	2000      	movs	r0, #0
 8008074:	e7f7      	b.n	8008066 <__swsetup_r+0xba>
 8008076:	bf00      	nop
 8008078:	20000010 	.word	0x20000010
 800807c:	0800b2e8 	.word	0x0800b2e8
 8008080:	0800b308 	.word	0x0800b308
 8008084:	0800b2c8 	.word	0x0800b2c8

08008088 <abort>:
 8008088:	b508      	push	{r3, lr}
 800808a:	2006      	movs	r0, #6
 800808c:	f001 fc70 	bl	8009970 <raise>
 8008090:	2001      	movs	r0, #1
 8008092:	f7fa fcd5 	bl	8002a40 <_exit>

08008096 <quorem>:
 8008096:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809a:	6903      	ldr	r3, [r0, #16]
 800809c:	690c      	ldr	r4, [r1, #16]
 800809e:	42a3      	cmp	r3, r4
 80080a0:	4607      	mov	r7, r0
 80080a2:	f2c0 8081 	blt.w	80081a8 <quorem+0x112>
 80080a6:	3c01      	subs	r4, #1
 80080a8:	f101 0814 	add.w	r8, r1, #20
 80080ac:	f100 0514 	add.w	r5, r0, #20
 80080b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080be:	3301      	adds	r3, #1
 80080c0:	429a      	cmp	r2, r3
 80080c2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80080ce:	d331      	bcc.n	8008134 <quorem+0x9e>
 80080d0:	f04f 0e00 	mov.w	lr, #0
 80080d4:	4640      	mov	r0, r8
 80080d6:	46ac      	mov	ip, r5
 80080d8:	46f2      	mov	sl, lr
 80080da:	f850 2b04 	ldr.w	r2, [r0], #4
 80080de:	b293      	uxth	r3, r2
 80080e0:	fb06 e303 	mla	r3, r6, r3, lr
 80080e4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	ebaa 0303 	sub.w	r3, sl, r3
 80080ee:	0c12      	lsrs	r2, r2, #16
 80080f0:	f8dc a000 	ldr.w	sl, [ip]
 80080f4:	fb06 e202 	mla	r2, r6, r2, lr
 80080f8:	fa13 f38a 	uxtah	r3, r3, sl
 80080fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008100:	fa1f fa82 	uxth.w	sl, r2
 8008104:	f8dc 2000 	ldr.w	r2, [ip]
 8008108:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800810c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008110:	b29b      	uxth	r3, r3
 8008112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008116:	4581      	cmp	r9, r0
 8008118:	f84c 3b04 	str.w	r3, [ip], #4
 800811c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008120:	d2db      	bcs.n	80080da <quorem+0x44>
 8008122:	f855 300b 	ldr.w	r3, [r5, fp]
 8008126:	b92b      	cbnz	r3, 8008134 <quorem+0x9e>
 8008128:	9b01      	ldr	r3, [sp, #4]
 800812a:	3b04      	subs	r3, #4
 800812c:	429d      	cmp	r5, r3
 800812e:	461a      	mov	r2, r3
 8008130:	d32e      	bcc.n	8008190 <quorem+0xfa>
 8008132:	613c      	str	r4, [r7, #16]
 8008134:	4638      	mov	r0, r7
 8008136:	f001 fae3 	bl	8009700 <__mcmp>
 800813a:	2800      	cmp	r0, #0
 800813c:	db24      	blt.n	8008188 <quorem+0xf2>
 800813e:	3601      	adds	r6, #1
 8008140:	4628      	mov	r0, r5
 8008142:	f04f 0c00 	mov.w	ip, #0
 8008146:	f858 2b04 	ldr.w	r2, [r8], #4
 800814a:	f8d0 e000 	ldr.w	lr, [r0]
 800814e:	b293      	uxth	r3, r2
 8008150:	ebac 0303 	sub.w	r3, ip, r3
 8008154:	0c12      	lsrs	r2, r2, #16
 8008156:	fa13 f38e 	uxtah	r3, r3, lr
 800815a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800815e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008162:	b29b      	uxth	r3, r3
 8008164:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008168:	45c1      	cmp	r9, r8
 800816a:	f840 3b04 	str.w	r3, [r0], #4
 800816e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008172:	d2e8      	bcs.n	8008146 <quorem+0xb0>
 8008174:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008178:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800817c:	b922      	cbnz	r2, 8008188 <quorem+0xf2>
 800817e:	3b04      	subs	r3, #4
 8008180:	429d      	cmp	r5, r3
 8008182:	461a      	mov	r2, r3
 8008184:	d30a      	bcc.n	800819c <quorem+0x106>
 8008186:	613c      	str	r4, [r7, #16]
 8008188:	4630      	mov	r0, r6
 800818a:	b003      	add	sp, #12
 800818c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008190:	6812      	ldr	r2, [r2, #0]
 8008192:	3b04      	subs	r3, #4
 8008194:	2a00      	cmp	r2, #0
 8008196:	d1cc      	bne.n	8008132 <quorem+0x9c>
 8008198:	3c01      	subs	r4, #1
 800819a:	e7c7      	b.n	800812c <quorem+0x96>
 800819c:	6812      	ldr	r2, [r2, #0]
 800819e:	3b04      	subs	r3, #4
 80081a0:	2a00      	cmp	r2, #0
 80081a2:	d1f0      	bne.n	8008186 <quorem+0xf0>
 80081a4:	3c01      	subs	r4, #1
 80081a6:	e7eb      	b.n	8008180 <quorem+0xea>
 80081a8:	2000      	movs	r0, #0
 80081aa:	e7ee      	b.n	800818a <quorem+0xf4>
 80081ac:	0000      	movs	r0, r0
	...

080081b0 <_dtoa_r>:
 80081b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b4:	ed2d 8b02 	vpush	{d8}
 80081b8:	ec57 6b10 	vmov	r6, r7, d0
 80081bc:	b095      	sub	sp, #84	; 0x54
 80081be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081c4:	9105      	str	r1, [sp, #20]
 80081c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80081ca:	4604      	mov	r4, r0
 80081cc:	9209      	str	r2, [sp, #36]	; 0x24
 80081ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80081d0:	b975      	cbnz	r5, 80081f0 <_dtoa_r+0x40>
 80081d2:	2010      	movs	r0, #16
 80081d4:	f7fe fe48 	bl	8006e68 <malloc>
 80081d8:	4602      	mov	r2, r0
 80081da:	6260      	str	r0, [r4, #36]	; 0x24
 80081dc:	b920      	cbnz	r0, 80081e8 <_dtoa_r+0x38>
 80081de:	4bb2      	ldr	r3, [pc, #712]	; (80084a8 <_dtoa_r+0x2f8>)
 80081e0:	21ea      	movs	r1, #234	; 0xea
 80081e2:	48b2      	ldr	r0, [pc, #712]	; (80084ac <_dtoa_r+0x2fc>)
 80081e4:	f7fe fde6 	bl	8006db4 <__assert_func>
 80081e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081ec:	6005      	str	r5, [r0, #0]
 80081ee:	60c5      	str	r5, [r0, #12]
 80081f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081f2:	6819      	ldr	r1, [r3, #0]
 80081f4:	b151      	cbz	r1, 800820c <_dtoa_r+0x5c>
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	604a      	str	r2, [r1, #4]
 80081fa:	2301      	movs	r3, #1
 80081fc:	4093      	lsls	r3, r2
 80081fe:	608b      	str	r3, [r1, #8]
 8008200:	4620      	mov	r0, r4
 8008202:	f001 f83f 	bl	8009284 <_Bfree>
 8008206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	1e3b      	subs	r3, r7, #0
 800820e:	bfb9      	ittee	lt
 8008210:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008214:	9303      	strlt	r3, [sp, #12]
 8008216:	2300      	movge	r3, #0
 8008218:	f8c8 3000 	strge.w	r3, [r8]
 800821c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008220:	4ba3      	ldr	r3, [pc, #652]	; (80084b0 <_dtoa_r+0x300>)
 8008222:	bfbc      	itt	lt
 8008224:	2201      	movlt	r2, #1
 8008226:	f8c8 2000 	strlt.w	r2, [r8]
 800822a:	ea33 0309 	bics.w	r3, r3, r9
 800822e:	d11b      	bne.n	8008268 <_dtoa_r+0xb8>
 8008230:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008232:	f242 730f 	movw	r3, #9999	; 0x270f
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800823c:	4333      	orrs	r3, r6
 800823e:	f000 857a 	beq.w	8008d36 <_dtoa_r+0xb86>
 8008242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008244:	b963      	cbnz	r3, 8008260 <_dtoa_r+0xb0>
 8008246:	4b9b      	ldr	r3, [pc, #620]	; (80084b4 <_dtoa_r+0x304>)
 8008248:	e024      	b.n	8008294 <_dtoa_r+0xe4>
 800824a:	4b9b      	ldr	r3, [pc, #620]	; (80084b8 <_dtoa_r+0x308>)
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	3308      	adds	r3, #8
 8008250:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	9800      	ldr	r0, [sp, #0]
 8008256:	b015      	add	sp, #84	; 0x54
 8008258:	ecbd 8b02 	vpop	{d8}
 800825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008260:	4b94      	ldr	r3, [pc, #592]	; (80084b4 <_dtoa_r+0x304>)
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	3303      	adds	r3, #3
 8008266:	e7f3      	b.n	8008250 <_dtoa_r+0xa0>
 8008268:	ed9d 7b02 	vldr	d7, [sp, #8]
 800826c:	2200      	movs	r2, #0
 800826e:	ec51 0b17 	vmov	r0, r1, d7
 8008272:	2300      	movs	r3, #0
 8008274:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008278:	f7f9 fb5e 	bl	8001938 <__aeabi_dcmpeq>
 800827c:	4680      	mov	r8, r0
 800827e:	b158      	cbz	r0, 8008298 <_dtoa_r+0xe8>
 8008280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008282:	2301      	movs	r3, #1
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 8551 	beq.w	8008d30 <_dtoa_r+0xb80>
 800828e:	488b      	ldr	r0, [pc, #556]	; (80084bc <_dtoa_r+0x30c>)
 8008290:	6018      	str	r0, [r3, #0]
 8008292:	1e43      	subs	r3, r0, #1
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	e7dd      	b.n	8008254 <_dtoa_r+0xa4>
 8008298:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800829c:	aa12      	add	r2, sp, #72	; 0x48
 800829e:	a913      	add	r1, sp, #76	; 0x4c
 80082a0:	4620      	mov	r0, r4
 80082a2:	f001 fad1 	bl	8009848 <__d2b>
 80082a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80082aa:	4683      	mov	fp, r0
 80082ac:	2d00      	cmp	r5, #0
 80082ae:	d07c      	beq.n	80083aa <_dtoa_r+0x1fa>
 80082b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80082b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80082be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80082c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80082c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082ca:	4b7d      	ldr	r3, [pc, #500]	; (80084c0 <_dtoa_r+0x310>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	4630      	mov	r0, r6
 80082d0:	4639      	mov	r1, r7
 80082d2:	f7f8 ff11 	bl	80010f8 <__aeabi_dsub>
 80082d6:	a36e      	add	r3, pc, #440	; (adr r3, 8008490 <_dtoa_r+0x2e0>)
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	f7f9 f8c4 	bl	8001468 <__aeabi_dmul>
 80082e0:	a36d      	add	r3, pc, #436	; (adr r3, 8008498 <_dtoa_r+0x2e8>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	f7f8 ff09 	bl	80010fc <__adddf3>
 80082ea:	4606      	mov	r6, r0
 80082ec:	4628      	mov	r0, r5
 80082ee:	460f      	mov	r7, r1
 80082f0:	f7f9 f850 	bl	8001394 <__aeabi_i2d>
 80082f4:	a36a      	add	r3, pc, #424	; (adr r3, 80084a0 <_dtoa_r+0x2f0>)
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	f7f9 f8b5 	bl	8001468 <__aeabi_dmul>
 80082fe:	4602      	mov	r2, r0
 8008300:	460b      	mov	r3, r1
 8008302:	4630      	mov	r0, r6
 8008304:	4639      	mov	r1, r7
 8008306:	f7f8 fef9 	bl	80010fc <__adddf3>
 800830a:	4606      	mov	r6, r0
 800830c:	460f      	mov	r7, r1
 800830e:	f7f9 fb5b 	bl	80019c8 <__aeabi_d2iz>
 8008312:	2200      	movs	r2, #0
 8008314:	4682      	mov	sl, r0
 8008316:	2300      	movs	r3, #0
 8008318:	4630      	mov	r0, r6
 800831a:	4639      	mov	r1, r7
 800831c:	f7f9 fb16 	bl	800194c <__aeabi_dcmplt>
 8008320:	b148      	cbz	r0, 8008336 <_dtoa_r+0x186>
 8008322:	4650      	mov	r0, sl
 8008324:	f7f9 f836 	bl	8001394 <__aeabi_i2d>
 8008328:	4632      	mov	r2, r6
 800832a:	463b      	mov	r3, r7
 800832c:	f7f9 fb04 	bl	8001938 <__aeabi_dcmpeq>
 8008330:	b908      	cbnz	r0, 8008336 <_dtoa_r+0x186>
 8008332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008336:	f1ba 0f16 	cmp.w	sl, #22
 800833a:	d854      	bhi.n	80083e6 <_dtoa_r+0x236>
 800833c:	4b61      	ldr	r3, [pc, #388]	; (80084c4 <_dtoa_r+0x314>)
 800833e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800834a:	f7f9 faff 	bl	800194c <__aeabi_dcmplt>
 800834e:	2800      	cmp	r0, #0
 8008350:	d04b      	beq.n	80083ea <_dtoa_r+0x23a>
 8008352:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008356:	2300      	movs	r3, #0
 8008358:	930e      	str	r3, [sp, #56]	; 0x38
 800835a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800835c:	1b5d      	subs	r5, r3, r5
 800835e:	1e6b      	subs	r3, r5, #1
 8008360:	9304      	str	r3, [sp, #16]
 8008362:	bf43      	ittte	mi
 8008364:	2300      	movmi	r3, #0
 8008366:	f1c5 0801 	rsbmi	r8, r5, #1
 800836a:	9304      	strmi	r3, [sp, #16]
 800836c:	f04f 0800 	movpl.w	r8, #0
 8008370:	f1ba 0f00 	cmp.w	sl, #0
 8008374:	db3b      	blt.n	80083ee <_dtoa_r+0x23e>
 8008376:	9b04      	ldr	r3, [sp, #16]
 8008378:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800837c:	4453      	add	r3, sl
 800837e:	9304      	str	r3, [sp, #16]
 8008380:	2300      	movs	r3, #0
 8008382:	9306      	str	r3, [sp, #24]
 8008384:	9b05      	ldr	r3, [sp, #20]
 8008386:	2b09      	cmp	r3, #9
 8008388:	d869      	bhi.n	800845e <_dtoa_r+0x2ae>
 800838a:	2b05      	cmp	r3, #5
 800838c:	bfc4      	itt	gt
 800838e:	3b04      	subgt	r3, #4
 8008390:	9305      	strgt	r3, [sp, #20]
 8008392:	9b05      	ldr	r3, [sp, #20]
 8008394:	f1a3 0302 	sub.w	r3, r3, #2
 8008398:	bfcc      	ite	gt
 800839a:	2500      	movgt	r5, #0
 800839c:	2501      	movle	r5, #1
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d869      	bhi.n	8008476 <_dtoa_r+0x2c6>
 80083a2:	e8df f003 	tbb	[pc, r3]
 80083a6:	4e2c      	.short	0x4e2c
 80083a8:	5a4c      	.short	0x5a4c
 80083aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80083ae:	441d      	add	r5, r3
 80083b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80083b4:	2b20      	cmp	r3, #32
 80083b6:	bfc1      	itttt	gt
 80083b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80083c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80083c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80083c8:	bfda      	itte	le
 80083ca:	f1c3 0320 	rsble	r3, r3, #32
 80083ce:	fa06 f003 	lslle.w	r0, r6, r3
 80083d2:	4318      	orrgt	r0, r3
 80083d4:	f7f8 ffce 	bl	8001374 <__aeabi_ui2d>
 80083d8:	2301      	movs	r3, #1
 80083da:	4606      	mov	r6, r0
 80083dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80083e0:	3d01      	subs	r5, #1
 80083e2:	9310      	str	r3, [sp, #64]	; 0x40
 80083e4:	e771      	b.n	80082ca <_dtoa_r+0x11a>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e7b6      	b.n	8008358 <_dtoa_r+0x1a8>
 80083ea:	900e      	str	r0, [sp, #56]	; 0x38
 80083ec:	e7b5      	b.n	800835a <_dtoa_r+0x1aa>
 80083ee:	f1ca 0300 	rsb	r3, sl, #0
 80083f2:	9306      	str	r3, [sp, #24]
 80083f4:	2300      	movs	r3, #0
 80083f6:	eba8 080a 	sub.w	r8, r8, sl
 80083fa:	930d      	str	r3, [sp, #52]	; 0x34
 80083fc:	e7c2      	b.n	8008384 <_dtoa_r+0x1d4>
 80083fe:	2300      	movs	r3, #0
 8008400:	9308      	str	r3, [sp, #32]
 8008402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008404:	2b00      	cmp	r3, #0
 8008406:	dc39      	bgt.n	800847c <_dtoa_r+0x2cc>
 8008408:	f04f 0901 	mov.w	r9, #1
 800840c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008410:	464b      	mov	r3, r9
 8008412:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008416:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008418:	2200      	movs	r2, #0
 800841a:	6042      	str	r2, [r0, #4]
 800841c:	2204      	movs	r2, #4
 800841e:	f102 0614 	add.w	r6, r2, #20
 8008422:	429e      	cmp	r6, r3
 8008424:	6841      	ldr	r1, [r0, #4]
 8008426:	d92f      	bls.n	8008488 <_dtoa_r+0x2d8>
 8008428:	4620      	mov	r0, r4
 800842a:	f000 feeb 	bl	8009204 <_Balloc>
 800842e:	9000      	str	r0, [sp, #0]
 8008430:	2800      	cmp	r0, #0
 8008432:	d14b      	bne.n	80084cc <_dtoa_r+0x31c>
 8008434:	4b24      	ldr	r3, [pc, #144]	; (80084c8 <_dtoa_r+0x318>)
 8008436:	4602      	mov	r2, r0
 8008438:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800843c:	e6d1      	b.n	80081e2 <_dtoa_r+0x32>
 800843e:	2301      	movs	r3, #1
 8008440:	e7de      	b.n	8008400 <_dtoa_r+0x250>
 8008442:	2300      	movs	r3, #0
 8008444:	9308      	str	r3, [sp, #32]
 8008446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008448:	eb0a 0903 	add.w	r9, sl, r3
 800844c:	f109 0301 	add.w	r3, r9, #1
 8008450:	2b01      	cmp	r3, #1
 8008452:	9301      	str	r3, [sp, #4]
 8008454:	bfb8      	it	lt
 8008456:	2301      	movlt	r3, #1
 8008458:	e7dd      	b.n	8008416 <_dtoa_r+0x266>
 800845a:	2301      	movs	r3, #1
 800845c:	e7f2      	b.n	8008444 <_dtoa_r+0x294>
 800845e:	2501      	movs	r5, #1
 8008460:	2300      	movs	r3, #0
 8008462:	9305      	str	r3, [sp, #20]
 8008464:	9508      	str	r5, [sp, #32]
 8008466:	f04f 39ff 	mov.w	r9, #4294967295
 800846a:	2200      	movs	r2, #0
 800846c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008470:	2312      	movs	r3, #18
 8008472:	9209      	str	r2, [sp, #36]	; 0x24
 8008474:	e7cf      	b.n	8008416 <_dtoa_r+0x266>
 8008476:	2301      	movs	r3, #1
 8008478:	9308      	str	r3, [sp, #32]
 800847a:	e7f4      	b.n	8008466 <_dtoa_r+0x2b6>
 800847c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008480:	f8cd 9004 	str.w	r9, [sp, #4]
 8008484:	464b      	mov	r3, r9
 8008486:	e7c6      	b.n	8008416 <_dtoa_r+0x266>
 8008488:	3101      	adds	r1, #1
 800848a:	6041      	str	r1, [r0, #4]
 800848c:	0052      	lsls	r2, r2, #1
 800848e:	e7c6      	b.n	800841e <_dtoa_r+0x26e>
 8008490:	636f4361 	.word	0x636f4361
 8008494:	3fd287a7 	.word	0x3fd287a7
 8008498:	8b60c8b3 	.word	0x8b60c8b3
 800849c:	3fc68a28 	.word	0x3fc68a28
 80084a0:	509f79fb 	.word	0x509f79fb
 80084a4:	3fd34413 	.word	0x3fd34413
 80084a8:	0800b1d5 	.word	0x0800b1d5
 80084ac:	0800b258 	.word	0x0800b258
 80084b0:	7ff00000 	.word	0x7ff00000
 80084b4:	0800b254 	.word	0x0800b254
 80084b8:	0800b24b 	.word	0x0800b24b
 80084bc:	0800b1b2 	.word	0x0800b1b2
 80084c0:	3ff80000 	.word	0x3ff80000
 80084c4:	0800b3b0 	.word	0x0800b3b0
 80084c8:	0800b2b7 	.word	0x0800b2b7
 80084cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084ce:	9a00      	ldr	r2, [sp, #0]
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	9b01      	ldr	r3, [sp, #4]
 80084d4:	2b0e      	cmp	r3, #14
 80084d6:	f200 80ad 	bhi.w	8008634 <_dtoa_r+0x484>
 80084da:	2d00      	cmp	r5, #0
 80084dc:	f000 80aa 	beq.w	8008634 <_dtoa_r+0x484>
 80084e0:	f1ba 0f00 	cmp.w	sl, #0
 80084e4:	dd36      	ble.n	8008554 <_dtoa_r+0x3a4>
 80084e6:	4ac3      	ldr	r2, [pc, #780]	; (80087f4 <_dtoa_r+0x644>)
 80084e8:	f00a 030f 	and.w	r3, sl, #15
 80084ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084f0:	ed93 7b00 	vldr	d7, [r3]
 80084f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80084f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80084fc:	eeb0 8a47 	vmov.f32	s16, s14
 8008500:	eef0 8a67 	vmov.f32	s17, s15
 8008504:	d016      	beq.n	8008534 <_dtoa_r+0x384>
 8008506:	4bbc      	ldr	r3, [pc, #752]	; (80087f8 <_dtoa_r+0x648>)
 8008508:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800850c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008510:	f7f9 f8d4 	bl	80016bc <__aeabi_ddiv>
 8008514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008518:	f007 070f 	and.w	r7, r7, #15
 800851c:	2503      	movs	r5, #3
 800851e:	4eb6      	ldr	r6, [pc, #728]	; (80087f8 <_dtoa_r+0x648>)
 8008520:	b957      	cbnz	r7, 8008538 <_dtoa_r+0x388>
 8008522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008526:	ec53 2b18 	vmov	r2, r3, d8
 800852a:	f7f9 f8c7 	bl	80016bc <__aeabi_ddiv>
 800852e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008532:	e029      	b.n	8008588 <_dtoa_r+0x3d8>
 8008534:	2502      	movs	r5, #2
 8008536:	e7f2      	b.n	800851e <_dtoa_r+0x36e>
 8008538:	07f9      	lsls	r1, r7, #31
 800853a:	d508      	bpl.n	800854e <_dtoa_r+0x39e>
 800853c:	ec51 0b18 	vmov	r0, r1, d8
 8008540:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008544:	f7f8 ff90 	bl	8001468 <__aeabi_dmul>
 8008548:	ec41 0b18 	vmov	d8, r0, r1
 800854c:	3501      	adds	r5, #1
 800854e:	107f      	asrs	r7, r7, #1
 8008550:	3608      	adds	r6, #8
 8008552:	e7e5      	b.n	8008520 <_dtoa_r+0x370>
 8008554:	f000 80a6 	beq.w	80086a4 <_dtoa_r+0x4f4>
 8008558:	f1ca 0600 	rsb	r6, sl, #0
 800855c:	4ba5      	ldr	r3, [pc, #660]	; (80087f4 <_dtoa_r+0x644>)
 800855e:	4fa6      	ldr	r7, [pc, #664]	; (80087f8 <_dtoa_r+0x648>)
 8008560:	f006 020f 	and.w	r2, r6, #15
 8008564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008570:	f7f8 ff7a 	bl	8001468 <__aeabi_dmul>
 8008574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008578:	1136      	asrs	r6, r6, #4
 800857a:	2300      	movs	r3, #0
 800857c:	2502      	movs	r5, #2
 800857e:	2e00      	cmp	r6, #0
 8008580:	f040 8085 	bne.w	800868e <_dtoa_r+0x4de>
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1d2      	bne.n	800852e <_dtoa_r+0x37e>
 8008588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 808c 	beq.w	80086a8 <_dtoa_r+0x4f8>
 8008590:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008594:	4b99      	ldr	r3, [pc, #612]	; (80087fc <_dtoa_r+0x64c>)
 8008596:	2200      	movs	r2, #0
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	f7f9 f9d6 	bl	800194c <__aeabi_dcmplt>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	f000 8081 	beq.w	80086a8 <_dtoa_r+0x4f8>
 80085a6:	9b01      	ldr	r3, [sp, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d07d      	beq.n	80086a8 <_dtoa_r+0x4f8>
 80085ac:	f1b9 0f00 	cmp.w	r9, #0
 80085b0:	dd3c      	ble.n	800862c <_dtoa_r+0x47c>
 80085b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80085b6:	9307      	str	r3, [sp, #28]
 80085b8:	2200      	movs	r2, #0
 80085ba:	4b91      	ldr	r3, [pc, #580]	; (8008800 <_dtoa_r+0x650>)
 80085bc:	4630      	mov	r0, r6
 80085be:	4639      	mov	r1, r7
 80085c0:	f7f8 ff52 	bl	8001468 <__aeabi_dmul>
 80085c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085c8:	3501      	adds	r5, #1
 80085ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80085ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085d2:	4628      	mov	r0, r5
 80085d4:	f7f8 fede 	bl	8001394 <__aeabi_i2d>
 80085d8:	4632      	mov	r2, r6
 80085da:	463b      	mov	r3, r7
 80085dc:	f7f8 ff44 	bl	8001468 <__aeabi_dmul>
 80085e0:	4b88      	ldr	r3, [pc, #544]	; (8008804 <_dtoa_r+0x654>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	f7f8 fd8a 	bl	80010fc <__adddf3>
 80085e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80085ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085f0:	9303      	str	r3, [sp, #12]
 80085f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d15c      	bne.n	80086b2 <_dtoa_r+0x502>
 80085f8:	4b83      	ldr	r3, [pc, #524]	; (8008808 <_dtoa_r+0x658>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	4630      	mov	r0, r6
 80085fe:	4639      	mov	r1, r7
 8008600:	f7f8 fd7a 	bl	80010f8 <__aeabi_dsub>
 8008604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008608:	4606      	mov	r6, r0
 800860a:	460f      	mov	r7, r1
 800860c:	f7f9 f9bc 	bl	8001988 <__aeabi_dcmpgt>
 8008610:	2800      	cmp	r0, #0
 8008612:	f040 8296 	bne.w	8008b42 <_dtoa_r+0x992>
 8008616:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800861a:	4630      	mov	r0, r6
 800861c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008620:	4639      	mov	r1, r7
 8008622:	f7f9 f993 	bl	800194c <__aeabi_dcmplt>
 8008626:	2800      	cmp	r0, #0
 8008628:	f040 8288 	bne.w	8008b3c <_dtoa_r+0x98c>
 800862c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008630:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008634:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008636:	2b00      	cmp	r3, #0
 8008638:	f2c0 8158 	blt.w	80088ec <_dtoa_r+0x73c>
 800863c:	f1ba 0f0e 	cmp.w	sl, #14
 8008640:	f300 8154 	bgt.w	80088ec <_dtoa_r+0x73c>
 8008644:	4b6b      	ldr	r3, [pc, #428]	; (80087f4 <_dtoa_r+0x644>)
 8008646:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800864a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800864e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008650:	2b00      	cmp	r3, #0
 8008652:	f280 80e3 	bge.w	800881c <_dtoa_r+0x66c>
 8008656:	9b01      	ldr	r3, [sp, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	f300 80df 	bgt.w	800881c <_dtoa_r+0x66c>
 800865e:	f040 826d 	bne.w	8008b3c <_dtoa_r+0x98c>
 8008662:	4b69      	ldr	r3, [pc, #420]	; (8008808 <_dtoa_r+0x658>)
 8008664:	2200      	movs	r2, #0
 8008666:	4640      	mov	r0, r8
 8008668:	4649      	mov	r1, r9
 800866a:	f7f8 fefd 	bl	8001468 <__aeabi_dmul>
 800866e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008672:	f7f9 f97f 	bl	8001974 <__aeabi_dcmpge>
 8008676:	9e01      	ldr	r6, [sp, #4]
 8008678:	4637      	mov	r7, r6
 800867a:	2800      	cmp	r0, #0
 800867c:	f040 8243 	bne.w	8008b06 <_dtoa_r+0x956>
 8008680:	9d00      	ldr	r5, [sp, #0]
 8008682:	2331      	movs	r3, #49	; 0x31
 8008684:	f805 3b01 	strb.w	r3, [r5], #1
 8008688:	f10a 0a01 	add.w	sl, sl, #1
 800868c:	e23f      	b.n	8008b0e <_dtoa_r+0x95e>
 800868e:	07f2      	lsls	r2, r6, #31
 8008690:	d505      	bpl.n	800869e <_dtoa_r+0x4ee>
 8008692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008696:	f7f8 fee7 	bl	8001468 <__aeabi_dmul>
 800869a:	3501      	adds	r5, #1
 800869c:	2301      	movs	r3, #1
 800869e:	1076      	asrs	r6, r6, #1
 80086a0:	3708      	adds	r7, #8
 80086a2:	e76c      	b.n	800857e <_dtoa_r+0x3ce>
 80086a4:	2502      	movs	r5, #2
 80086a6:	e76f      	b.n	8008588 <_dtoa_r+0x3d8>
 80086a8:	9b01      	ldr	r3, [sp, #4]
 80086aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80086ae:	930c      	str	r3, [sp, #48]	; 0x30
 80086b0:	e78d      	b.n	80085ce <_dtoa_r+0x41e>
 80086b2:	9900      	ldr	r1, [sp, #0]
 80086b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80086b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086b8:	4b4e      	ldr	r3, [pc, #312]	; (80087f4 <_dtoa_r+0x644>)
 80086ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086be:	4401      	add	r1, r0
 80086c0:	9102      	str	r1, [sp, #8]
 80086c2:	9908      	ldr	r1, [sp, #32]
 80086c4:	eeb0 8a47 	vmov.f32	s16, s14
 80086c8:	eef0 8a67 	vmov.f32	s17, s15
 80086cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086d4:	2900      	cmp	r1, #0
 80086d6:	d045      	beq.n	8008764 <_dtoa_r+0x5b4>
 80086d8:	494c      	ldr	r1, [pc, #304]	; (800880c <_dtoa_r+0x65c>)
 80086da:	2000      	movs	r0, #0
 80086dc:	f7f8 ffee 	bl	80016bc <__aeabi_ddiv>
 80086e0:	ec53 2b18 	vmov	r2, r3, d8
 80086e4:	f7f8 fd08 	bl	80010f8 <__aeabi_dsub>
 80086e8:	9d00      	ldr	r5, [sp, #0]
 80086ea:	ec41 0b18 	vmov	d8, r0, r1
 80086ee:	4639      	mov	r1, r7
 80086f0:	4630      	mov	r0, r6
 80086f2:	f7f9 f969 	bl	80019c8 <__aeabi_d2iz>
 80086f6:	900c      	str	r0, [sp, #48]	; 0x30
 80086f8:	f7f8 fe4c 	bl	8001394 <__aeabi_i2d>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	4630      	mov	r0, r6
 8008702:	4639      	mov	r1, r7
 8008704:	f7f8 fcf8 	bl	80010f8 <__aeabi_dsub>
 8008708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800870a:	3330      	adds	r3, #48	; 0x30
 800870c:	f805 3b01 	strb.w	r3, [r5], #1
 8008710:	ec53 2b18 	vmov	r2, r3, d8
 8008714:	4606      	mov	r6, r0
 8008716:	460f      	mov	r7, r1
 8008718:	f7f9 f918 	bl	800194c <__aeabi_dcmplt>
 800871c:	2800      	cmp	r0, #0
 800871e:	d165      	bne.n	80087ec <_dtoa_r+0x63c>
 8008720:	4632      	mov	r2, r6
 8008722:	463b      	mov	r3, r7
 8008724:	4935      	ldr	r1, [pc, #212]	; (80087fc <_dtoa_r+0x64c>)
 8008726:	2000      	movs	r0, #0
 8008728:	f7f8 fce6 	bl	80010f8 <__aeabi_dsub>
 800872c:	ec53 2b18 	vmov	r2, r3, d8
 8008730:	f7f9 f90c 	bl	800194c <__aeabi_dcmplt>
 8008734:	2800      	cmp	r0, #0
 8008736:	f040 80b9 	bne.w	80088ac <_dtoa_r+0x6fc>
 800873a:	9b02      	ldr	r3, [sp, #8]
 800873c:	429d      	cmp	r5, r3
 800873e:	f43f af75 	beq.w	800862c <_dtoa_r+0x47c>
 8008742:	4b2f      	ldr	r3, [pc, #188]	; (8008800 <_dtoa_r+0x650>)
 8008744:	ec51 0b18 	vmov	r0, r1, d8
 8008748:	2200      	movs	r2, #0
 800874a:	f7f8 fe8d 	bl	8001468 <__aeabi_dmul>
 800874e:	4b2c      	ldr	r3, [pc, #176]	; (8008800 <_dtoa_r+0x650>)
 8008750:	ec41 0b18 	vmov	d8, r0, r1
 8008754:	2200      	movs	r2, #0
 8008756:	4630      	mov	r0, r6
 8008758:	4639      	mov	r1, r7
 800875a:	f7f8 fe85 	bl	8001468 <__aeabi_dmul>
 800875e:	4606      	mov	r6, r0
 8008760:	460f      	mov	r7, r1
 8008762:	e7c4      	b.n	80086ee <_dtoa_r+0x53e>
 8008764:	ec51 0b17 	vmov	r0, r1, d7
 8008768:	f7f8 fe7e 	bl	8001468 <__aeabi_dmul>
 800876c:	9b02      	ldr	r3, [sp, #8]
 800876e:	9d00      	ldr	r5, [sp, #0]
 8008770:	930c      	str	r3, [sp, #48]	; 0x30
 8008772:	ec41 0b18 	vmov	d8, r0, r1
 8008776:	4639      	mov	r1, r7
 8008778:	4630      	mov	r0, r6
 800877a:	f7f9 f925 	bl	80019c8 <__aeabi_d2iz>
 800877e:	9011      	str	r0, [sp, #68]	; 0x44
 8008780:	f7f8 fe08 	bl	8001394 <__aeabi_i2d>
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	4630      	mov	r0, r6
 800878a:	4639      	mov	r1, r7
 800878c:	f7f8 fcb4 	bl	80010f8 <__aeabi_dsub>
 8008790:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008792:	3330      	adds	r3, #48	; 0x30
 8008794:	f805 3b01 	strb.w	r3, [r5], #1
 8008798:	9b02      	ldr	r3, [sp, #8]
 800879a:	429d      	cmp	r5, r3
 800879c:	4606      	mov	r6, r0
 800879e:	460f      	mov	r7, r1
 80087a0:	f04f 0200 	mov.w	r2, #0
 80087a4:	d134      	bne.n	8008810 <_dtoa_r+0x660>
 80087a6:	4b19      	ldr	r3, [pc, #100]	; (800880c <_dtoa_r+0x65c>)
 80087a8:	ec51 0b18 	vmov	r0, r1, d8
 80087ac:	f7f8 fca6 	bl	80010fc <__adddf3>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4630      	mov	r0, r6
 80087b6:	4639      	mov	r1, r7
 80087b8:	f7f9 f8e6 	bl	8001988 <__aeabi_dcmpgt>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d175      	bne.n	80088ac <_dtoa_r+0x6fc>
 80087c0:	ec53 2b18 	vmov	r2, r3, d8
 80087c4:	4911      	ldr	r1, [pc, #68]	; (800880c <_dtoa_r+0x65c>)
 80087c6:	2000      	movs	r0, #0
 80087c8:	f7f8 fc96 	bl	80010f8 <__aeabi_dsub>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4630      	mov	r0, r6
 80087d2:	4639      	mov	r1, r7
 80087d4:	f7f9 f8ba 	bl	800194c <__aeabi_dcmplt>
 80087d8:	2800      	cmp	r0, #0
 80087da:	f43f af27 	beq.w	800862c <_dtoa_r+0x47c>
 80087de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087e0:	1e6b      	subs	r3, r5, #1
 80087e2:	930c      	str	r3, [sp, #48]	; 0x30
 80087e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087e8:	2b30      	cmp	r3, #48	; 0x30
 80087ea:	d0f8      	beq.n	80087de <_dtoa_r+0x62e>
 80087ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80087f0:	e04a      	b.n	8008888 <_dtoa_r+0x6d8>
 80087f2:	bf00      	nop
 80087f4:	0800b3b0 	.word	0x0800b3b0
 80087f8:	0800b388 	.word	0x0800b388
 80087fc:	3ff00000 	.word	0x3ff00000
 8008800:	40240000 	.word	0x40240000
 8008804:	401c0000 	.word	0x401c0000
 8008808:	40140000 	.word	0x40140000
 800880c:	3fe00000 	.word	0x3fe00000
 8008810:	4baf      	ldr	r3, [pc, #700]	; (8008ad0 <_dtoa_r+0x920>)
 8008812:	f7f8 fe29 	bl	8001468 <__aeabi_dmul>
 8008816:	4606      	mov	r6, r0
 8008818:	460f      	mov	r7, r1
 800881a:	e7ac      	b.n	8008776 <_dtoa_r+0x5c6>
 800881c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008820:	9d00      	ldr	r5, [sp, #0]
 8008822:	4642      	mov	r2, r8
 8008824:	464b      	mov	r3, r9
 8008826:	4630      	mov	r0, r6
 8008828:	4639      	mov	r1, r7
 800882a:	f7f8 ff47 	bl	80016bc <__aeabi_ddiv>
 800882e:	f7f9 f8cb 	bl	80019c8 <__aeabi_d2iz>
 8008832:	9002      	str	r0, [sp, #8]
 8008834:	f7f8 fdae 	bl	8001394 <__aeabi_i2d>
 8008838:	4642      	mov	r2, r8
 800883a:	464b      	mov	r3, r9
 800883c:	f7f8 fe14 	bl	8001468 <__aeabi_dmul>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	4630      	mov	r0, r6
 8008846:	4639      	mov	r1, r7
 8008848:	f7f8 fc56 	bl	80010f8 <__aeabi_dsub>
 800884c:	9e02      	ldr	r6, [sp, #8]
 800884e:	9f01      	ldr	r7, [sp, #4]
 8008850:	3630      	adds	r6, #48	; 0x30
 8008852:	f805 6b01 	strb.w	r6, [r5], #1
 8008856:	9e00      	ldr	r6, [sp, #0]
 8008858:	1bae      	subs	r6, r5, r6
 800885a:	42b7      	cmp	r7, r6
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	d137      	bne.n	80088d2 <_dtoa_r+0x722>
 8008862:	f7f8 fc4b 	bl	80010fc <__adddf3>
 8008866:	4642      	mov	r2, r8
 8008868:	464b      	mov	r3, r9
 800886a:	4606      	mov	r6, r0
 800886c:	460f      	mov	r7, r1
 800886e:	f7f9 f88b 	bl	8001988 <__aeabi_dcmpgt>
 8008872:	b9c8      	cbnz	r0, 80088a8 <_dtoa_r+0x6f8>
 8008874:	4642      	mov	r2, r8
 8008876:	464b      	mov	r3, r9
 8008878:	4630      	mov	r0, r6
 800887a:	4639      	mov	r1, r7
 800887c:	f7f9 f85c 	bl	8001938 <__aeabi_dcmpeq>
 8008880:	b110      	cbz	r0, 8008888 <_dtoa_r+0x6d8>
 8008882:	9b02      	ldr	r3, [sp, #8]
 8008884:	07d9      	lsls	r1, r3, #31
 8008886:	d40f      	bmi.n	80088a8 <_dtoa_r+0x6f8>
 8008888:	4620      	mov	r0, r4
 800888a:	4659      	mov	r1, fp
 800888c:	f000 fcfa 	bl	8009284 <_Bfree>
 8008890:	2300      	movs	r3, #0
 8008892:	702b      	strb	r3, [r5, #0]
 8008894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008896:	f10a 0001 	add.w	r0, sl, #1
 800889a:	6018      	str	r0, [r3, #0]
 800889c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f43f acd8 	beq.w	8008254 <_dtoa_r+0xa4>
 80088a4:	601d      	str	r5, [r3, #0]
 80088a6:	e4d5      	b.n	8008254 <_dtoa_r+0xa4>
 80088a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80088ac:	462b      	mov	r3, r5
 80088ae:	461d      	mov	r5, r3
 80088b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088b4:	2a39      	cmp	r2, #57	; 0x39
 80088b6:	d108      	bne.n	80088ca <_dtoa_r+0x71a>
 80088b8:	9a00      	ldr	r2, [sp, #0]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d1f7      	bne.n	80088ae <_dtoa_r+0x6fe>
 80088be:	9a07      	ldr	r2, [sp, #28]
 80088c0:	9900      	ldr	r1, [sp, #0]
 80088c2:	3201      	adds	r2, #1
 80088c4:	9207      	str	r2, [sp, #28]
 80088c6:	2230      	movs	r2, #48	; 0x30
 80088c8:	700a      	strb	r2, [r1, #0]
 80088ca:	781a      	ldrb	r2, [r3, #0]
 80088cc:	3201      	adds	r2, #1
 80088ce:	701a      	strb	r2, [r3, #0]
 80088d0:	e78c      	b.n	80087ec <_dtoa_r+0x63c>
 80088d2:	4b7f      	ldr	r3, [pc, #508]	; (8008ad0 <_dtoa_r+0x920>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	f7f8 fdc7 	bl	8001468 <__aeabi_dmul>
 80088da:	2200      	movs	r2, #0
 80088dc:	2300      	movs	r3, #0
 80088de:	4606      	mov	r6, r0
 80088e0:	460f      	mov	r7, r1
 80088e2:	f7f9 f829 	bl	8001938 <__aeabi_dcmpeq>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d09b      	beq.n	8008822 <_dtoa_r+0x672>
 80088ea:	e7cd      	b.n	8008888 <_dtoa_r+0x6d8>
 80088ec:	9a08      	ldr	r2, [sp, #32]
 80088ee:	2a00      	cmp	r2, #0
 80088f0:	f000 80c4 	beq.w	8008a7c <_dtoa_r+0x8cc>
 80088f4:	9a05      	ldr	r2, [sp, #20]
 80088f6:	2a01      	cmp	r2, #1
 80088f8:	f300 80a8 	bgt.w	8008a4c <_dtoa_r+0x89c>
 80088fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80088fe:	2a00      	cmp	r2, #0
 8008900:	f000 80a0 	beq.w	8008a44 <_dtoa_r+0x894>
 8008904:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008908:	9e06      	ldr	r6, [sp, #24]
 800890a:	4645      	mov	r5, r8
 800890c:	9a04      	ldr	r2, [sp, #16]
 800890e:	2101      	movs	r1, #1
 8008910:	441a      	add	r2, r3
 8008912:	4620      	mov	r0, r4
 8008914:	4498      	add	r8, r3
 8008916:	9204      	str	r2, [sp, #16]
 8008918:	f000 fd70 	bl	80093fc <__i2b>
 800891c:	4607      	mov	r7, r0
 800891e:	2d00      	cmp	r5, #0
 8008920:	dd0b      	ble.n	800893a <_dtoa_r+0x78a>
 8008922:	9b04      	ldr	r3, [sp, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	dd08      	ble.n	800893a <_dtoa_r+0x78a>
 8008928:	42ab      	cmp	r3, r5
 800892a:	9a04      	ldr	r2, [sp, #16]
 800892c:	bfa8      	it	ge
 800892e:	462b      	movge	r3, r5
 8008930:	eba8 0803 	sub.w	r8, r8, r3
 8008934:	1aed      	subs	r5, r5, r3
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	9304      	str	r3, [sp, #16]
 800893a:	9b06      	ldr	r3, [sp, #24]
 800893c:	b1fb      	cbz	r3, 800897e <_dtoa_r+0x7ce>
 800893e:	9b08      	ldr	r3, [sp, #32]
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 809f 	beq.w	8008a84 <_dtoa_r+0x8d4>
 8008946:	2e00      	cmp	r6, #0
 8008948:	dd11      	ble.n	800896e <_dtoa_r+0x7be>
 800894a:	4639      	mov	r1, r7
 800894c:	4632      	mov	r2, r6
 800894e:	4620      	mov	r0, r4
 8008950:	f000 fe10 	bl	8009574 <__pow5mult>
 8008954:	465a      	mov	r2, fp
 8008956:	4601      	mov	r1, r0
 8008958:	4607      	mov	r7, r0
 800895a:	4620      	mov	r0, r4
 800895c:	f000 fd64 	bl	8009428 <__multiply>
 8008960:	4659      	mov	r1, fp
 8008962:	9007      	str	r0, [sp, #28]
 8008964:	4620      	mov	r0, r4
 8008966:	f000 fc8d 	bl	8009284 <_Bfree>
 800896a:	9b07      	ldr	r3, [sp, #28]
 800896c:	469b      	mov	fp, r3
 800896e:	9b06      	ldr	r3, [sp, #24]
 8008970:	1b9a      	subs	r2, r3, r6
 8008972:	d004      	beq.n	800897e <_dtoa_r+0x7ce>
 8008974:	4659      	mov	r1, fp
 8008976:	4620      	mov	r0, r4
 8008978:	f000 fdfc 	bl	8009574 <__pow5mult>
 800897c:	4683      	mov	fp, r0
 800897e:	2101      	movs	r1, #1
 8008980:	4620      	mov	r0, r4
 8008982:	f000 fd3b 	bl	80093fc <__i2b>
 8008986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008988:	2b00      	cmp	r3, #0
 800898a:	4606      	mov	r6, r0
 800898c:	dd7c      	ble.n	8008a88 <_dtoa_r+0x8d8>
 800898e:	461a      	mov	r2, r3
 8008990:	4601      	mov	r1, r0
 8008992:	4620      	mov	r0, r4
 8008994:	f000 fdee 	bl	8009574 <__pow5mult>
 8008998:	9b05      	ldr	r3, [sp, #20]
 800899a:	2b01      	cmp	r3, #1
 800899c:	4606      	mov	r6, r0
 800899e:	dd76      	ble.n	8008a8e <_dtoa_r+0x8de>
 80089a0:	2300      	movs	r3, #0
 80089a2:	9306      	str	r3, [sp, #24]
 80089a4:	6933      	ldr	r3, [r6, #16]
 80089a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089aa:	6918      	ldr	r0, [r3, #16]
 80089ac:	f000 fcd6 	bl	800935c <__hi0bits>
 80089b0:	f1c0 0020 	rsb	r0, r0, #32
 80089b4:	9b04      	ldr	r3, [sp, #16]
 80089b6:	4418      	add	r0, r3
 80089b8:	f010 001f 	ands.w	r0, r0, #31
 80089bc:	f000 8086 	beq.w	8008acc <_dtoa_r+0x91c>
 80089c0:	f1c0 0320 	rsb	r3, r0, #32
 80089c4:	2b04      	cmp	r3, #4
 80089c6:	dd7f      	ble.n	8008ac8 <_dtoa_r+0x918>
 80089c8:	f1c0 001c 	rsb	r0, r0, #28
 80089cc:	9b04      	ldr	r3, [sp, #16]
 80089ce:	4403      	add	r3, r0
 80089d0:	4480      	add	r8, r0
 80089d2:	4405      	add	r5, r0
 80089d4:	9304      	str	r3, [sp, #16]
 80089d6:	f1b8 0f00 	cmp.w	r8, #0
 80089da:	dd05      	ble.n	80089e8 <_dtoa_r+0x838>
 80089dc:	4659      	mov	r1, fp
 80089de:	4642      	mov	r2, r8
 80089e0:	4620      	mov	r0, r4
 80089e2:	f000 fe21 	bl	8009628 <__lshift>
 80089e6:	4683      	mov	fp, r0
 80089e8:	9b04      	ldr	r3, [sp, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	dd05      	ble.n	80089fa <_dtoa_r+0x84a>
 80089ee:	4631      	mov	r1, r6
 80089f0:	461a      	mov	r2, r3
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 fe18 	bl	8009628 <__lshift>
 80089f8:	4606      	mov	r6, r0
 80089fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d069      	beq.n	8008ad4 <_dtoa_r+0x924>
 8008a00:	4631      	mov	r1, r6
 8008a02:	4658      	mov	r0, fp
 8008a04:	f000 fe7c 	bl	8009700 <__mcmp>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	da63      	bge.n	8008ad4 <_dtoa_r+0x924>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4659      	mov	r1, fp
 8008a10:	220a      	movs	r2, #10
 8008a12:	4620      	mov	r0, r4
 8008a14:	f000 fc58 	bl	80092c8 <__multadd>
 8008a18:	9b08      	ldr	r3, [sp, #32]
 8008a1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a1e:	4683      	mov	fp, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 818f 	beq.w	8008d44 <_dtoa_r+0xb94>
 8008a26:	4639      	mov	r1, r7
 8008a28:	2300      	movs	r3, #0
 8008a2a:	220a      	movs	r2, #10
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f000 fc4b 	bl	80092c8 <__multadd>
 8008a32:	f1b9 0f00 	cmp.w	r9, #0
 8008a36:	4607      	mov	r7, r0
 8008a38:	f300 808e 	bgt.w	8008b58 <_dtoa_r+0x9a8>
 8008a3c:	9b05      	ldr	r3, [sp, #20]
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	dc50      	bgt.n	8008ae4 <_dtoa_r+0x934>
 8008a42:	e089      	b.n	8008b58 <_dtoa_r+0x9a8>
 8008a44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a4a:	e75d      	b.n	8008908 <_dtoa_r+0x758>
 8008a4c:	9b01      	ldr	r3, [sp, #4]
 8008a4e:	1e5e      	subs	r6, r3, #1
 8008a50:	9b06      	ldr	r3, [sp, #24]
 8008a52:	42b3      	cmp	r3, r6
 8008a54:	bfbf      	itttt	lt
 8008a56:	9b06      	ldrlt	r3, [sp, #24]
 8008a58:	9606      	strlt	r6, [sp, #24]
 8008a5a:	1af2      	sublt	r2, r6, r3
 8008a5c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008a5e:	bfb6      	itet	lt
 8008a60:	189b      	addlt	r3, r3, r2
 8008a62:	1b9e      	subge	r6, r3, r6
 8008a64:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008a66:	9b01      	ldr	r3, [sp, #4]
 8008a68:	bfb8      	it	lt
 8008a6a:	2600      	movlt	r6, #0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	bfb5      	itete	lt
 8008a70:	eba8 0503 	sublt.w	r5, r8, r3
 8008a74:	9b01      	ldrge	r3, [sp, #4]
 8008a76:	2300      	movlt	r3, #0
 8008a78:	4645      	movge	r5, r8
 8008a7a:	e747      	b.n	800890c <_dtoa_r+0x75c>
 8008a7c:	9e06      	ldr	r6, [sp, #24]
 8008a7e:	9f08      	ldr	r7, [sp, #32]
 8008a80:	4645      	mov	r5, r8
 8008a82:	e74c      	b.n	800891e <_dtoa_r+0x76e>
 8008a84:	9a06      	ldr	r2, [sp, #24]
 8008a86:	e775      	b.n	8008974 <_dtoa_r+0x7c4>
 8008a88:	9b05      	ldr	r3, [sp, #20]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	dc18      	bgt.n	8008ac0 <_dtoa_r+0x910>
 8008a8e:	9b02      	ldr	r3, [sp, #8]
 8008a90:	b9b3      	cbnz	r3, 8008ac0 <_dtoa_r+0x910>
 8008a92:	9b03      	ldr	r3, [sp, #12]
 8008a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a98:	b9a3      	cbnz	r3, 8008ac4 <_dtoa_r+0x914>
 8008a9a:	9b03      	ldr	r3, [sp, #12]
 8008a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008aa0:	0d1b      	lsrs	r3, r3, #20
 8008aa2:	051b      	lsls	r3, r3, #20
 8008aa4:	b12b      	cbz	r3, 8008ab2 <_dtoa_r+0x902>
 8008aa6:	9b04      	ldr	r3, [sp, #16]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	9304      	str	r3, [sp, #16]
 8008aac:	f108 0801 	add.w	r8, r8, #1
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	9306      	str	r3, [sp, #24]
 8008ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f47f af74 	bne.w	80089a4 <_dtoa_r+0x7f4>
 8008abc:	2001      	movs	r0, #1
 8008abe:	e779      	b.n	80089b4 <_dtoa_r+0x804>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	e7f6      	b.n	8008ab2 <_dtoa_r+0x902>
 8008ac4:	9b02      	ldr	r3, [sp, #8]
 8008ac6:	e7f4      	b.n	8008ab2 <_dtoa_r+0x902>
 8008ac8:	d085      	beq.n	80089d6 <_dtoa_r+0x826>
 8008aca:	4618      	mov	r0, r3
 8008acc:	301c      	adds	r0, #28
 8008ace:	e77d      	b.n	80089cc <_dtoa_r+0x81c>
 8008ad0:	40240000 	.word	0x40240000
 8008ad4:	9b01      	ldr	r3, [sp, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	dc38      	bgt.n	8008b4c <_dtoa_r+0x99c>
 8008ada:	9b05      	ldr	r3, [sp, #20]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	dd35      	ble.n	8008b4c <_dtoa_r+0x99c>
 8008ae0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008ae4:	f1b9 0f00 	cmp.w	r9, #0
 8008ae8:	d10d      	bne.n	8008b06 <_dtoa_r+0x956>
 8008aea:	4631      	mov	r1, r6
 8008aec:	464b      	mov	r3, r9
 8008aee:	2205      	movs	r2, #5
 8008af0:	4620      	mov	r0, r4
 8008af2:	f000 fbe9 	bl	80092c8 <__multadd>
 8008af6:	4601      	mov	r1, r0
 8008af8:	4606      	mov	r6, r0
 8008afa:	4658      	mov	r0, fp
 8008afc:	f000 fe00 	bl	8009700 <__mcmp>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	f73f adbd 	bgt.w	8008680 <_dtoa_r+0x4d0>
 8008b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b08:	9d00      	ldr	r5, [sp, #0]
 8008b0a:	ea6f 0a03 	mvn.w	sl, r3
 8008b0e:	f04f 0800 	mov.w	r8, #0
 8008b12:	4631      	mov	r1, r6
 8008b14:	4620      	mov	r0, r4
 8008b16:	f000 fbb5 	bl	8009284 <_Bfree>
 8008b1a:	2f00      	cmp	r7, #0
 8008b1c:	f43f aeb4 	beq.w	8008888 <_dtoa_r+0x6d8>
 8008b20:	f1b8 0f00 	cmp.w	r8, #0
 8008b24:	d005      	beq.n	8008b32 <_dtoa_r+0x982>
 8008b26:	45b8      	cmp	r8, r7
 8008b28:	d003      	beq.n	8008b32 <_dtoa_r+0x982>
 8008b2a:	4641      	mov	r1, r8
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 fba9 	bl	8009284 <_Bfree>
 8008b32:	4639      	mov	r1, r7
 8008b34:	4620      	mov	r0, r4
 8008b36:	f000 fba5 	bl	8009284 <_Bfree>
 8008b3a:	e6a5      	b.n	8008888 <_dtoa_r+0x6d8>
 8008b3c:	2600      	movs	r6, #0
 8008b3e:	4637      	mov	r7, r6
 8008b40:	e7e1      	b.n	8008b06 <_dtoa_r+0x956>
 8008b42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008b44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008b48:	4637      	mov	r7, r6
 8008b4a:	e599      	b.n	8008680 <_dtoa_r+0x4d0>
 8008b4c:	9b08      	ldr	r3, [sp, #32]
 8008b4e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f000 80fd 	beq.w	8008d52 <_dtoa_r+0xba2>
 8008b58:	2d00      	cmp	r5, #0
 8008b5a:	dd05      	ble.n	8008b68 <_dtoa_r+0x9b8>
 8008b5c:	4639      	mov	r1, r7
 8008b5e:	462a      	mov	r2, r5
 8008b60:	4620      	mov	r0, r4
 8008b62:	f000 fd61 	bl	8009628 <__lshift>
 8008b66:	4607      	mov	r7, r0
 8008b68:	9b06      	ldr	r3, [sp, #24]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d05c      	beq.n	8008c28 <_dtoa_r+0xa78>
 8008b6e:	6879      	ldr	r1, [r7, #4]
 8008b70:	4620      	mov	r0, r4
 8008b72:	f000 fb47 	bl	8009204 <_Balloc>
 8008b76:	4605      	mov	r5, r0
 8008b78:	b928      	cbnz	r0, 8008b86 <_dtoa_r+0x9d6>
 8008b7a:	4b80      	ldr	r3, [pc, #512]	; (8008d7c <_dtoa_r+0xbcc>)
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b82:	f7ff bb2e 	b.w	80081e2 <_dtoa_r+0x32>
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	3202      	adds	r2, #2
 8008b8a:	0092      	lsls	r2, r2, #2
 8008b8c:	f107 010c 	add.w	r1, r7, #12
 8008b90:	300c      	adds	r0, #12
 8008b92:	f000 fb1d 	bl	80091d0 <memcpy>
 8008b96:	2201      	movs	r2, #1
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 fd44 	bl	8009628 <__lshift>
 8008ba0:	9b00      	ldr	r3, [sp, #0]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	9b00      	ldr	r3, [sp, #0]
 8008ba8:	444b      	add	r3, r9
 8008baa:	9307      	str	r3, [sp, #28]
 8008bac:	9b02      	ldr	r3, [sp, #8]
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	46b8      	mov	r8, r7
 8008bb4:	9306      	str	r3, [sp, #24]
 8008bb6:	4607      	mov	r7, r0
 8008bb8:	9b01      	ldr	r3, [sp, #4]
 8008bba:	4631      	mov	r1, r6
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	4658      	mov	r0, fp
 8008bc0:	9302      	str	r3, [sp, #8]
 8008bc2:	f7ff fa68 	bl	8008096 <quorem>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	3330      	adds	r3, #48	; 0x30
 8008bca:	9004      	str	r0, [sp, #16]
 8008bcc:	4641      	mov	r1, r8
 8008bce:	4658      	mov	r0, fp
 8008bd0:	9308      	str	r3, [sp, #32]
 8008bd2:	f000 fd95 	bl	8009700 <__mcmp>
 8008bd6:	463a      	mov	r2, r7
 8008bd8:	4681      	mov	r9, r0
 8008bda:	4631      	mov	r1, r6
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f000 fdab 	bl	8009738 <__mdiff>
 8008be2:	68c2      	ldr	r2, [r0, #12]
 8008be4:	9b08      	ldr	r3, [sp, #32]
 8008be6:	4605      	mov	r5, r0
 8008be8:	bb02      	cbnz	r2, 8008c2c <_dtoa_r+0xa7c>
 8008bea:	4601      	mov	r1, r0
 8008bec:	4658      	mov	r0, fp
 8008bee:	f000 fd87 	bl	8009700 <__mcmp>
 8008bf2:	9b08      	ldr	r3, [sp, #32]
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	4629      	mov	r1, r5
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008bfe:	f000 fb41 	bl	8009284 <_Bfree>
 8008c02:	9b05      	ldr	r3, [sp, #20]
 8008c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c06:	9d01      	ldr	r5, [sp, #4]
 8008c08:	ea43 0102 	orr.w	r1, r3, r2
 8008c0c:	9b06      	ldr	r3, [sp, #24]
 8008c0e:	430b      	orrs	r3, r1
 8008c10:	9b08      	ldr	r3, [sp, #32]
 8008c12:	d10d      	bne.n	8008c30 <_dtoa_r+0xa80>
 8008c14:	2b39      	cmp	r3, #57	; 0x39
 8008c16:	d029      	beq.n	8008c6c <_dtoa_r+0xabc>
 8008c18:	f1b9 0f00 	cmp.w	r9, #0
 8008c1c:	dd01      	ble.n	8008c22 <_dtoa_r+0xa72>
 8008c1e:	9b04      	ldr	r3, [sp, #16]
 8008c20:	3331      	adds	r3, #49	; 0x31
 8008c22:	9a02      	ldr	r2, [sp, #8]
 8008c24:	7013      	strb	r3, [r2, #0]
 8008c26:	e774      	b.n	8008b12 <_dtoa_r+0x962>
 8008c28:	4638      	mov	r0, r7
 8008c2a:	e7b9      	b.n	8008ba0 <_dtoa_r+0x9f0>
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	e7e2      	b.n	8008bf6 <_dtoa_r+0xa46>
 8008c30:	f1b9 0f00 	cmp.w	r9, #0
 8008c34:	db06      	blt.n	8008c44 <_dtoa_r+0xa94>
 8008c36:	9905      	ldr	r1, [sp, #20]
 8008c38:	ea41 0909 	orr.w	r9, r1, r9
 8008c3c:	9906      	ldr	r1, [sp, #24]
 8008c3e:	ea59 0101 	orrs.w	r1, r9, r1
 8008c42:	d120      	bne.n	8008c86 <_dtoa_r+0xad6>
 8008c44:	2a00      	cmp	r2, #0
 8008c46:	ddec      	ble.n	8008c22 <_dtoa_r+0xa72>
 8008c48:	4659      	mov	r1, fp
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	9301      	str	r3, [sp, #4]
 8008c50:	f000 fcea 	bl	8009628 <__lshift>
 8008c54:	4631      	mov	r1, r6
 8008c56:	4683      	mov	fp, r0
 8008c58:	f000 fd52 	bl	8009700 <__mcmp>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	9b01      	ldr	r3, [sp, #4]
 8008c60:	dc02      	bgt.n	8008c68 <_dtoa_r+0xab8>
 8008c62:	d1de      	bne.n	8008c22 <_dtoa_r+0xa72>
 8008c64:	07da      	lsls	r2, r3, #31
 8008c66:	d5dc      	bpl.n	8008c22 <_dtoa_r+0xa72>
 8008c68:	2b39      	cmp	r3, #57	; 0x39
 8008c6a:	d1d8      	bne.n	8008c1e <_dtoa_r+0xa6e>
 8008c6c:	9a02      	ldr	r2, [sp, #8]
 8008c6e:	2339      	movs	r3, #57	; 0x39
 8008c70:	7013      	strb	r3, [r2, #0]
 8008c72:	462b      	mov	r3, r5
 8008c74:	461d      	mov	r5, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c7c:	2a39      	cmp	r2, #57	; 0x39
 8008c7e:	d050      	beq.n	8008d22 <_dtoa_r+0xb72>
 8008c80:	3201      	adds	r2, #1
 8008c82:	701a      	strb	r2, [r3, #0]
 8008c84:	e745      	b.n	8008b12 <_dtoa_r+0x962>
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	dd03      	ble.n	8008c92 <_dtoa_r+0xae2>
 8008c8a:	2b39      	cmp	r3, #57	; 0x39
 8008c8c:	d0ee      	beq.n	8008c6c <_dtoa_r+0xabc>
 8008c8e:	3301      	adds	r3, #1
 8008c90:	e7c7      	b.n	8008c22 <_dtoa_r+0xa72>
 8008c92:	9a01      	ldr	r2, [sp, #4]
 8008c94:	9907      	ldr	r1, [sp, #28]
 8008c96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c9a:	428a      	cmp	r2, r1
 8008c9c:	d02a      	beq.n	8008cf4 <_dtoa_r+0xb44>
 8008c9e:	4659      	mov	r1, fp
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	220a      	movs	r2, #10
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	f000 fb0f 	bl	80092c8 <__multadd>
 8008caa:	45b8      	cmp	r8, r7
 8008cac:	4683      	mov	fp, r0
 8008cae:	f04f 0300 	mov.w	r3, #0
 8008cb2:	f04f 020a 	mov.w	r2, #10
 8008cb6:	4641      	mov	r1, r8
 8008cb8:	4620      	mov	r0, r4
 8008cba:	d107      	bne.n	8008ccc <_dtoa_r+0xb1c>
 8008cbc:	f000 fb04 	bl	80092c8 <__multadd>
 8008cc0:	4680      	mov	r8, r0
 8008cc2:	4607      	mov	r7, r0
 8008cc4:	9b01      	ldr	r3, [sp, #4]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	9301      	str	r3, [sp, #4]
 8008cca:	e775      	b.n	8008bb8 <_dtoa_r+0xa08>
 8008ccc:	f000 fafc 	bl	80092c8 <__multadd>
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	4680      	mov	r8, r0
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	220a      	movs	r2, #10
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f000 faf5 	bl	80092c8 <__multadd>
 8008cde:	4607      	mov	r7, r0
 8008ce0:	e7f0      	b.n	8008cc4 <_dtoa_r+0xb14>
 8008ce2:	f1b9 0f00 	cmp.w	r9, #0
 8008ce6:	9a00      	ldr	r2, [sp, #0]
 8008ce8:	bfcc      	ite	gt
 8008cea:	464d      	movgt	r5, r9
 8008cec:	2501      	movle	r5, #1
 8008cee:	4415      	add	r5, r2
 8008cf0:	f04f 0800 	mov.w	r8, #0
 8008cf4:	4659      	mov	r1, fp
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	f000 fc94 	bl	8009628 <__lshift>
 8008d00:	4631      	mov	r1, r6
 8008d02:	4683      	mov	fp, r0
 8008d04:	f000 fcfc 	bl	8009700 <__mcmp>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	dcb2      	bgt.n	8008c72 <_dtoa_r+0xac2>
 8008d0c:	d102      	bne.n	8008d14 <_dtoa_r+0xb64>
 8008d0e:	9b01      	ldr	r3, [sp, #4]
 8008d10:	07db      	lsls	r3, r3, #31
 8008d12:	d4ae      	bmi.n	8008c72 <_dtoa_r+0xac2>
 8008d14:	462b      	mov	r3, r5
 8008d16:	461d      	mov	r5, r3
 8008d18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d1c:	2a30      	cmp	r2, #48	; 0x30
 8008d1e:	d0fa      	beq.n	8008d16 <_dtoa_r+0xb66>
 8008d20:	e6f7      	b.n	8008b12 <_dtoa_r+0x962>
 8008d22:	9a00      	ldr	r2, [sp, #0]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d1a5      	bne.n	8008c74 <_dtoa_r+0xac4>
 8008d28:	f10a 0a01 	add.w	sl, sl, #1
 8008d2c:	2331      	movs	r3, #49	; 0x31
 8008d2e:	e779      	b.n	8008c24 <_dtoa_r+0xa74>
 8008d30:	4b13      	ldr	r3, [pc, #76]	; (8008d80 <_dtoa_r+0xbd0>)
 8008d32:	f7ff baaf 	b.w	8008294 <_dtoa_r+0xe4>
 8008d36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f47f aa86 	bne.w	800824a <_dtoa_r+0x9a>
 8008d3e:	4b11      	ldr	r3, [pc, #68]	; (8008d84 <_dtoa_r+0xbd4>)
 8008d40:	f7ff baa8 	b.w	8008294 <_dtoa_r+0xe4>
 8008d44:	f1b9 0f00 	cmp.w	r9, #0
 8008d48:	dc03      	bgt.n	8008d52 <_dtoa_r+0xba2>
 8008d4a:	9b05      	ldr	r3, [sp, #20]
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	f73f aec9 	bgt.w	8008ae4 <_dtoa_r+0x934>
 8008d52:	9d00      	ldr	r5, [sp, #0]
 8008d54:	4631      	mov	r1, r6
 8008d56:	4658      	mov	r0, fp
 8008d58:	f7ff f99d 	bl	8008096 <quorem>
 8008d5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008d60:	f805 3b01 	strb.w	r3, [r5], #1
 8008d64:	9a00      	ldr	r2, [sp, #0]
 8008d66:	1aaa      	subs	r2, r5, r2
 8008d68:	4591      	cmp	r9, r2
 8008d6a:	ddba      	ble.n	8008ce2 <_dtoa_r+0xb32>
 8008d6c:	4659      	mov	r1, fp
 8008d6e:	2300      	movs	r3, #0
 8008d70:	220a      	movs	r2, #10
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 faa8 	bl	80092c8 <__multadd>
 8008d78:	4683      	mov	fp, r0
 8008d7a:	e7eb      	b.n	8008d54 <_dtoa_r+0xba4>
 8008d7c:	0800b2b7 	.word	0x0800b2b7
 8008d80:	0800b1b1 	.word	0x0800b1b1
 8008d84:	0800b24b 	.word	0x0800b24b

08008d88 <__sflush_r>:
 8008d88:	898a      	ldrh	r2, [r1, #12]
 8008d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8e:	4605      	mov	r5, r0
 8008d90:	0710      	lsls	r0, r2, #28
 8008d92:	460c      	mov	r4, r1
 8008d94:	d458      	bmi.n	8008e48 <__sflush_r+0xc0>
 8008d96:	684b      	ldr	r3, [r1, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	dc05      	bgt.n	8008da8 <__sflush_r+0x20>
 8008d9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	dc02      	bgt.n	8008da8 <__sflush_r+0x20>
 8008da2:	2000      	movs	r0, #0
 8008da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008daa:	2e00      	cmp	r6, #0
 8008dac:	d0f9      	beq.n	8008da2 <__sflush_r+0x1a>
 8008dae:	2300      	movs	r3, #0
 8008db0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008db4:	682f      	ldr	r7, [r5, #0]
 8008db6:	602b      	str	r3, [r5, #0]
 8008db8:	d032      	beq.n	8008e20 <__sflush_r+0x98>
 8008dba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dbc:	89a3      	ldrh	r3, [r4, #12]
 8008dbe:	075a      	lsls	r2, r3, #29
 8008dc0:	d505      	bpl.n	8008dce <__sflush_r+0x46>
 8008dc2:	6863      	ldr	r3, [r4, #4]
 8008dc4:	1ac0      	subs	r0, r0, r3
 8008dc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dc8:	b10b      	cbz	r3, 8008dce <__sflush_r+0x46>
 8008dca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dcc:	1ac0      	subs	r0, r0, r3
 8008dce:	2300      	movs	r3, #0
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dd4:	6a21      	ldr	r1, [r4, #32]
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	47b0      	blx	r6
 8008dda:	1c43      	adds	r3, r0, #1
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	d106      	bne.n	8008dee <__sflush_r+0x66>
 8008de0:	6829      	ldr	r1, [r5, #0]
 8008de2:	291d      	cmp	r1, #29
 8008de4:	d82c      	bhi.n	8008e40 <__sflush_r+0xb8>
 8008de6:	4a2a      	ldr	r2, [pc, #168]	; (8008e90 <__sflush_r+0x108>)
 8008de8:	40ca      	lsrs	r2, r1
 8008dea:	07d6      	lsls	r6, r2, #31
 8008dec:	d528      	bpl.n	8008e40 <__sflush_r+0xb8>
 8008dee:	2200      	movs	r2, #0
 8008df0:	6062      	str	r2, [r4, #4]
 8008df2:	04d9      	lsls	r1, r3, #19
 8008df4:	6922      	ldr	r2, [r4, #16]
 8008df6:	6022      	str	r2, [r4, #0]
 8008df8:	d504      	bpl.n	8008e04 <__sflush_r+0x7c>
 8008dfa:	1c42      	adds	r2, r0, #1
 8008dfc:	d101      	bne.n	8008e02 <__sflush_r+0x7a>
 8008dfe:	682b      	ldr	r3, [r5, #0]
 8008e00:	b903      	cbnz	r3, 8008e04 <__sflush_r+0x7c>
 8008e02:	6560      	str	r0, [r4, #84]	; 0x54
 8008e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e06:	602f      	str	r7, [r5, #0]
 8008e08:	2900      	cmp	r1, #0
 8008e0a:	d0ca      	beq.n	8008da2 <__sflush_r+0x1a>
 8008e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e10:	4299      	cmp	r1, r3
 8008e12:	d002      	beq.n	8008e1a <__sflush_r+0x92>
 8008e14:	4628      	mov	r0, r5
 8008e16:	f7fe f837 	bl	8006e88 <_free_r>
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	6360      	str	r0, [r4, #52]	; 0x34
 8008e1e:	e7c1      	b.n	8008da4 <__sflush_r+0x1c>
 8008e20:	6a21      	ldr	r1, [r4, #32]
 8008e22:	2301      	movs	r3, #1
 8008e24:	4628      	mov	r0, r5
 8008e26:	47b0      	blx	r6
 8008e28:	1c41      	adds	r1, r0, #1
 8008e2a:	d1c7      	bne.n	8008dbc <__sflush_r+0x34>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0c4      	beq.n	8008dbc <__sflush_r+0x34>
 8008e32:	2b1d      	cmp	r3, #29
 8008e34:	d001      	beq.n	8008e3a <__sflush_r+0xb2>
 8008e36:	2b16      	cmp	r3, #22
 8008e38:	d101      	bne.n	8008e3e <__sflush_r+0xb6>
 8008e3a:	602f      	str	r7, [r5, #0]
 8008e3c:	e7b1      	b.n	8008da2 <__sflush_r+0x1a>
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e44:	81a3      	strh	r3, [r4, #12]
 8008e46:	e7ad      	b.n	8008da4 <__sflush_r+0x1c>
 8008e48:	690f      	ldr	r7, [r1, #16]
 8008e4a:	2f00      	cmp	r7, #0
 8008e4c:	d0a9      	beq.n	8008da2 <__sflush_r+0x1a>
 8008e4e:	0793      	lsls	r3, r2, #30
 8008e50:	680e      	ldr	r6, [r1, #0]
 8008e52:	bf08      	it	eq
 8008e54:	694b      	ldreq	r3, [r1, #20]
 8008e56:	600f      	str	r7, [r1, #0]
 8008e58:	bf18      	it	ne
 8008e5a:	2300      	movne	r3, #0
 8008e5c:	eba6 0807 	sub.w	r8, r6, r7
 8008e60:	608b      	str	r3, [r1, #8]
 8008e62:	f1b8 0f00 	cmp.w	r8, #0
 8008e66:	dd9c      	ble.n	8008da2 <__sflush_r+0x1a>
 8008e68:	6a21      	ldr	r1, [r4, #32]
 8008e6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e6c:	4643      	mov	r3, r8
 8008e6e:	463a      	mov	r2, r7
 8008e70:	4628      	mov	r0, r5
 8008e72:	47b0      	blx	r6
 8008e74:	2800      	cmp	r0, #0
 8008e76:	dc06      	bgt.n	8008e86 <__sflush_r+0xfe>
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e7e:	81a3      	strh	r3, [r4, #12]
 8008e80:	f04f 30ff 	mov.w	r0, #4294967295
 8008e84:	e78e      	b.n	8008da4 <__sflush_r+0x1c>
 8008e86:	4407      	add	r7, r0
 8008e88:	eba8 0800 	sub.w	r8, r8, r0
 8008e8c:	e7e9      	b.n	8008e62 <__sflush_r+0xda>
 8008e8e:	bf00      	nop
 8008e90:	20400001 	.word	0x20400001

08008e94 <_fflush_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	690b      	ldr	r3, [r1, #16]
 8008e98:	4605      	mov	r5, r0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	b913      	cbnz	r3, 8008ea4 <_fflush_r+0x10>
 8008e9e:	2500      	movs	r5, #0
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	bd38      	pop	{r3, r4, r5, pc}
 8008ea4:	b118      	cbz	r0, 8008eae <_fflush_r+0x1a>
 8008ea6:	6983      	ldr	r3, [r0, #24]
 8008ea8:	b90b      	cbnz	r3, 8008eae <_fflush_r+0x1a>
 8008eaa:	f000 f887 	bl	8008fbc <__sinit>
 8008eae:	4b14      	ldr	r3, [pc, #80]	; (8008f00 <_fflush_r+0x6c>)
 8008eb0:	429c      	cmp	r4, r3
 8008eb2:	d11b      	bne.n	8008eec <_fflush_r+0x58>
 8008eb4:	686c      	ldr	r4, [r5, #4]
 8008eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0ef      	beq.n	8008e9e <_fflush_r+0xa>
 8008ebe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ec0:	07d0      	lsls	r0, r2, #31
 8008ec2:	d404      	bmi.n	8008ece <_fflush_r+0x3a>
 8008ec4:	0599      	lsls	r1, r3, #22
 8008ec6:	d402      	bmi.n	8008ece <_fflush_r+0x3a>
 8008ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eca:	f000 f91a 	bl	8009102 <__retarget_lock_acquire_recursive>
 8008ece:	4628      	mov	r0, r5
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	f7ff ff59 	bl	8008d88 <__sflush_r>
 8008ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ed8:	07da      	lsls	r2, r3, #31
 8008eda:	4605      	mov	r5, r0
 8008edc:	d4e0      	bmi.n	8008ea0 <_fflush_r+0xc>
 8008ede:	89a3      	ldrh	r3, [r4, #12]
 8008ee0:	059b      	lsls	r3, r3, #22
 8008ee2:	d4dd      	bmi.n	8008ea0 <_fflush_r+0xc>
 8008ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ee6:	f000 f90d 	bl	8009104 <__retarget_lock_release_recursive>
 8008eea:	e7d9      	b.n	8008ea0 <_fflush_r+0xc>
 8008eec:	4b05      	ldr	r3, [pc, #20]	; (8008f04 <_fflush_r+0x70>)
 8008eee:	429c      	cmp	r4, r3
 8008ef0:	d101      	bne.n	8008ef6 <_fflush_r+0x62>
 8008ef2:	68ac      	ldr	r4, [r5, #8]
 8008ef4:	e7df      	b.n	8008eb6 <_fflush_r+0x22>
 8008ef6:	4b04      	ldr	r3, [pc, #16]	; (8008f08 <_fflush_r+0x74>)
 8008ef8:	429c      	cmp	r4, r3
 8008efa:	bf08      	it	eq
 8008efc:	68ec      	ldreq	r4, [r5, #12]
 8008efe:	e7da      	b.n	8008eb6 <_fflush_r+0x22>
 8008f00:	0800b2e8 	.word	0x0800b2e8
 8008f04:	0800b308 	.word	0x0800b308
 8008f08:	0800b2c8 	.word	0x0800b2c8

08008f0c <std>:
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	b510      	push	{r4, lr}
 8008f10:	4604      	mov	r4, r0
 8008f12:	e9c0 3300 	strd	r3, r3, [r0]
 8008f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f1a:	6083      	str	r3, [r0, #8]
 8008f1c:	8181      	strh	r1, [r0, #12]
 8008f1e:	6643      	str	r3, [r0, #100]	; 0x64
 8008f20:	81c2      	strh	r2, [r0, #14]
 8008f22:	6183      	str	r3, [r0, #24]
 8008f24:	4619      	mov	r1, r3
 8008f26:	2208      	movs	r2, #8
 8008f28:	305c      	adds	r0, #92	; 0x5c
 8008f2a:	f7fd ffa5 	bl	8006e78 <memset>
 8008f2e:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <std+0x38>)
 8008f30:	6263      	str	r3, [r4, #36]	; 0x24
 8008f32:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <std+0x3c>)
 8008f34:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <std+0x40>)
 8008f38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f3a:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <std+0x44>)
 8008f3c:	6224      	str	r4, [r4, #32]
 8008f3e:	6323      	str	r3, [r4, #48]	; 0x30
 8008f40:	bd10      	pop	{r4, pc}
 8008f42:	bf00      	nop
 8008f44:	080099a9 	.word	0x080099a9
 8008f48:	080099cb 	.word	0x080099cb
 8008f4c:	08009a03 	.word	0x08009a03
 8008f50:	08009a27 	.word	0x08009a27

08008f54 <_cleanup_r>:
 8008f54:	4901      	ldr	r1, [pc, #4]	; (8008f5c <_cleanup_r+0x8>)
 8008f56:	f000 b8af 	b.w	80090b8 <_fwalk_reent>
 8008f5a:	bf00      	nop
 8008f5c:	08008e95 	.word	0x08008e95

08008f60 <__sfmoreglue>:
 8008f60:	b570      	push	{r4, r5, r6, lr}
 8008f62:	1e4a      	subs	r2, r1, #1
 8008f64:	2568      	movs	r5, #104	; 0x68
 8008f66:	4355      	muls	r5, r2
 8008f68:	460e      	mov	r6, r1
 8008f6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f6e:	f7fd ffdb 	bl	8006f28 <_malloc_r>
 8008f72:	4604      	mov	r4, r0
 8008f74:	b140      	cbz	r0, 8008f88 <__sfmoreglue+0x28>
 8008f76:	2100      	movs	r1, #0
 8008f78:	e9c0 1600 	strd	r1, r6, [r0]
 8008f7c:	300c      	adds	r0, #12
 8008f7e:	60a0      	str	r0, [r4, #8]
 8008f80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f84:	f7fd ff78 	bl	8006e78 <memset>
 8008f88:	4620      	mov	r0, r4
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}

08008f8c <__sfp_lock_acquire>:
 8008f8c:	4801      	ldr	r0, [pc, #4]	; (8008f94 <__sfp_lock_acquire+0x8>)
 8008f8e:	f000 b8b8 	b.w	8009102 <__retarget_lock_acquire_recursive>
 8008f92:	bf00      	nop
 8008f94:	20000938 	.word	0x20000938

08008f98 <__sfp_lock_release>:
 8008f98:	4801      	ldr	r0, [pc, #4]	; (8008fa0 <__sfp_lock_release+0x8>)
 8008f9a:	f000 b8b3 	b.w	8009104 <__retarget_lock_release_recursive>
 8008f9e:	bf00      	nop
 8008fa0:	20000938 	.word	0x20000938

08008fa4 <__sinit_lock_acquire>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	; (8008fac <__sinit_lock_acquire+0x8>)
 8008fa6:	f000 b8ac 	b.w	8009102 <__retarget_lock_acquire_recursive>
 8008faa:	bf00      	nop
 8008fac:	20000933 	.word	0x20000933

08008fb0 <__sinit_lock_release>:
 8008fb0:	4801      	ldr	r0, [pc, #4]	; (8008fb8 <__sinit_lock_release+0x8>)
 8008fb2:	f000 b8a7 	b.w	8009104 <__retarget_lock_release_recursive>
 8008fb6:	bf00      	nop
 8008fb8:	20000933 	.word	0x20000933

08008fbc <__sinit>:
 8008fbc:	b510      	push	{r4, lr}
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	f7ff fff0 	bl	8008fa4 <__sinit_lock_acquire>
 8008fc4:	69a3      	ldr	r3, [r4, #24]
 8008fc6:	b11b      	cbz	r3, 8008fd0 <__sinit+0x14>
 8008fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fcc:	f7ff bff0 	b.w	8008fb0 <__sinit_lock_release>
 8008fd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fd4:	6523      	str	r3, [r4, #80]	; 0x50
 8008fd6:	4b13      	ldr	r3, [pc, #76]	; (8009024 <__sinit+0x68>)
 8008fd8:	4a13      	ldr	r2, [pc, #76]	; (8009028 <__sinit+0x6c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fde:	42a3      	cmp	r3, r4
 8008fe0:	bf04      	itt	eq
 8008fe2:	2301      	moveq	r3, #1
 8008fe4:	61a3      	streq	r3, [r4, #24]
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f000 f820 	bl	800902c <__sfp>
 8008fec:	6060      	str	r0, [r4, #4]
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f000 f81c 	bl	800902c <__sfp>
 8008ff4:	60a0      	str	r0, [r4, #8]
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f000 f818 	bl	800902c <__sfp>
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	60e0      	str	r0, [r4, #12]
 8009000:	2104      	movs	r1, #4
 8009002:	6860      	ldr	r0, [r4, #4]
 8009004:	f7ff ff82 	bl	8008f0c <std>
 8009008:	68a0      	ldr	r0, [r4, #8]
 800900a:	2201      	movs	r2, #1
 800900c:	2109      	movs	r1, #9
 800900e:	f7ff ff7d 	bl	8008f0c <std>
 8009012:	68e0      	ldr	r0, [r4, #12]
 8009014:	2202      	movs	r2, #2
 8009016:	2112      	movs	r1, #18
 8009018:	f7ff ff78 	bl	8008f0c <std>
 800901c:	2301      	movs	r3, #1
 800901e:	61a3      	str	r3, [r4, #24]
 8009020:	e7d2      	b.n	8008fc8 <__sinit+0xc>
 8009022:	bf00      	nop
 8009024:	0800b18c 	.word	0x0800b18c
 8009028:	08008f55 	.word	0x08008f55

0800902c <__sfp>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	4607      	mov	r7, r0
 8009030:	f7ff ffac 	bl	8008f8c <__sfp_lock_acquire>
 8009034:	4b1e      	ldr	r3, [pc, #120]	; (80090b0 <__sfp+0x84>)
 8009036:	681e      	ldr	r6, [r3, #0]
 8009038:	69b3      	ldr	r3, [r6, #24]
 800903a:	b913      	cbnz	r3, 8009042 <__sfp+0x16>
 800903c:	4630      	mov	r0, r6
 800903e:	f7ff ffbd 	bl	8008fbc <__sinit>
 8009042:	3648      	adds	r6, #72	; 0x48
 8009044:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009048:	3b01      	subs	r3, #1
 800904a:	d503      	bpl.n	8009054 <__sfp+0x28>
 800904c:	6833      	ldr	r3, [r6, #0]
 800904e:	b30b      	cbz	r3, 8009094 <__sfp+0x68>
 8009050:	6836      	ldr	r6, [r6, #0]
 8009052:	e7f7      	b.n	8009044 <__sfp+0x18>
 8009054:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009058:	b9d5      	cbnz	r5, 8009090 <__sfp+0x64>
 800905a:	4b16      	ldr	r3, [pc, #88]	; (80090b4 <__sfp+0x88>)
 800905c:	60e3      	str	r3, [r4, #12]
 800905e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009062:	6665      	str	r5, [r4, #100]	; 0x64
 8009064:	f000 f84c 	bl	8009100 <__retarget_lock_init_recursive>
 8009068:	f7ff ff96 	bl	8008f98 <__sfp_lock_release>
 800906c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009070:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009074:	6025      	str	r5, [r4, #0]
 8009076:	61a5      	str	r5, [r4, #24]
 8009078:	2208      	movs	r2, #8
 800907a:	4629      	mov	r1, r5
 800907c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009080:	f7fd fefa 	bl	8006e78 <memset>
 8009084:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009088:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800908c:	4620      	mov	r0, r4
 800908e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009090:	3468      	adds	r4, #104	; 0x68
 8009092:	e7d9      	b.n	8009048 <__sfp+0x1c>
 8009094:	2104      	movs	r1, #4
 8009096:	4638      	mov	r0, r7
 8009098:	f7ff ff62 	bl	8008f60 <__sfmoreglue>
 800909c:	4604      	mov	r4, r0
 800909e:	6030      	str	r0, [r6, #0]
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d1d5      	bne.n	8009050 <__sfp+0x24>
 80090a4:	f7ff ff78 	bl	8008f98 <__sfp_lock_release>
 80090a8:	230c      	movs	r3, #12
 80090aa:	603b      	str	r3, [r7, #0]
 80090ac:	e7ee      	b.n	800908c <__sfp+0x60>
 80090ae:	bf00      	nop
 80090b0:	0800b18c 	.word	0x0800b18c
 80090b4:	ffff0001 	.word	0xffff0001

080090b8 <_fwalk_reent>:
 80090b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090bc:	4606      	mov	r6, r0
 80090be:	4688      	mov	r8, r1
 80090c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090c4:	2700      	movs	r7, #0
 80090c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090ca:	f1b9 0901 	subs.w	r9, r9, #1
 80090ce:	d505      	bpl.n	80090dc <_fwalk_reent+0x24>
 80090d0:	6824      	ldr	r4, [r4, #0]
 80090d2:	2c00      	cmp	r4, #0
 80090d4:	d1f7      	bne.n	80090c6 <_fwalk_reent+0xe>
 80090d6:	4638      	mov	r0, r7
 80090d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090dc:	89ab      	ldrh	r3, [r5, #12]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d907      	bls.n	80090f2 <_fwalk_reent+0x3a>
 80090e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090e6:	3301      	adds	r3, #1
 80090e8:	d003      	beq.n	80090f2 <_fwalk_reent+0x3a>
 80090ea:	4629      	mov	r1, r5
 80090ec:	4630      	mov	r0, r6
 80090ee:	47c0      	blx	r8
 80090f0:	4307      	orrs	r7, r0
 80090f2:	3568      	adds	r5, #104	; 0x68
 80090f4:	e7e9      	b.n	80090ca <_fwalk_reent+0x12>
	...

080090f8 <_localeconv_r>:
 80090f8:	4800      	ldr	r0, [pc, #0]	; (80090fc <_localeconv_r+0x4>)
 80090fa:	4770      	bx	lr
 80090fc:	20000164 	.word	0x20000164

08009100 <__retarget_lock_init_recursive>:
 8009100:	4770      	bx	lr

08009102 <__retarget_lock_acquire_recursive>:
 8009102:	4770      	bx	lr

08009104 <__retarget_lock_release_recursive>:
 8009104:	4770      	bx	lr

08009106 <__swhatbuf_r>:
 8009106:	b570      	push	{r4, r5, r6, lr}
 8009108:	460e      	mov	r6, r1
 800910a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800910e:	2900      	cmp	r1, #0
 8009110:	b096      	sub	sp, #88	; 0x58
 8009112:	4614      	mov	r4, r2
 8009114:	461d      	mov	r5, r3
 8009116:	da07      	bge.n	8009128 <__swhatbuf_r+0x22>
 8009118:	2300      	movs	r3, #0
 800911a:	602b      	str	r3, [r5, #0]
 800911c:	89b3      	ldrh	r3, [r6, #12]
 800911e:	061a      	lsls	r2, r3, #24
 8009120:	d410      	bmi.n	8009144 <__swhatbuf_r+0x3e>
 8009122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009126:	e00e      	b.n	8009146 <__swhatbuf_r+0x40>
 8009128:	466a      	mov	r2, sp
 800912a:	f000 fca3 	bl	8009a74 <_fstat_r>
 800912e:	2800      	cmp	r0, #0
 8009130:	dbf2      	blt.n	8009118 <__swhatbuf_r+0x12>
 8009132:	9a01      	ldr	r2, [sp, #4]
 8009134:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009138:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800913c:	425a      	negs	r2, r3
 800913e:	415a      	adcs	r2, r3
 8009140:	602a      	str	r2, [r5, #0]
 8009142:	e7ee      	b.n	8009122 <__swhatbuf_r+0x1c>
 8009144:	2340      	movs	r3, #64	; 0x40
 8009146:	2000      	movs	r0, #0
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	b016      	add	sp, #88	; 0x58
 800914c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009150 <__smakebuf_r>:
 8009150:	898b      	ldrh	r3, [r1, #12]
 8009152:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009154:	079d      	lsls	r5, r3, #30
 8009156:	4606      	mov	r6, r0
 8009158:	460c      	mov	r4, r1
 800915a:	d507      	bpl.n	800916c <__smakebuf_r+0x1c>
 800915c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	6123      	str	r3, [r4, #16]
 8009164:	2301      	movs	r3, #1
 8009166:	6163      	str	r3, [r4, #20]
 8009168:	b002      	add	sp, #8
 800916a:	bd70      	pop	{r4, r5, r6, pc}
 800916c:	ab01      	add	r3, sp, #4
 800916e:	466a      	mov	r2, sp
 8009170:	f7ff ffc9 	bl	8009106 <__swhatbuf_r>
 8009174:	9900      	ldr	r1, [sp, #0]
 8009176:	4605      	mov	r5, r0
 8009178:	4630      	mov	r0, r6
 800917a:	f7fd fed5 	bl	8006f28 <_malloc_r>
 800917e:	b948      	cbnz	r0, 8009194 <__smakebuf_r+0x44>
 8009180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009184:	059a      	lsls	r2, r3, #22
 8009186:	d4ef      	bmi.n	8009168 <__smakebuf_r+0x18>
 8009188:	f023 0303 	bic.w	r3, r3, #3
 800918c:	f043 0302 	orr.w	r3, r3, #2
 8009190:	81a3      	strh	r3, [r4, #12]
 8009192:	e7e3      	b.n	800915c <__smakebuf_r+0xc>
 8009194:	4b0d      	ldr	r3, [pc, #52]	; (80091cc <__smakebuf_r+0x7c>)
 8009196:	62b3      	str	r3, [r6, #40]	; 0x28
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	6020      	str	r0, [r4, #0]
 800919c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a0:	81a3      	strh	r3, [r4, #12]
 80091a2:	9b00      	ldr	r3, [sp, #0]
 80091a4:	6163      	str	r3, [r4, #20]
 80091a6:	9b01      	ldr	r3, [sp, #4]
 80091a8:	6120      	str	r0, [r4, #16]
 80091aa:	b15b      	cbz	r3, 80091c4 <__smakebuf_r+0x74>
 80091ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091b0:	4630      	mov	r0, r6
 80091b2:	f000 fc71 	bl	8009a98 <_isatty_r>
 80091b6:	b128      	cbz	r0, 80091c4 <__smakebuf_r+0x74>
 80091b8:	89a3      	ldrh	r3, [r4, #12]
 80091ba:	f023 0303 	bic.w	r3, r3, #3
 80091be:	f043 0301 	orr.w	r3, r3, #1
 80091c2:	81a3      	strh	r3, [r4, #12]
 80091c4:	89a0      	ldrh	r0, [r4, #12]
 80091c6:	4305      	orrs	r5, r0
 80091c8:	81a5      	strh	r5, [r4, #12]
 80091ca:	e7cd      	b.n	8009168 <__smakebuf_r+0x18>
 80091cc:	08008f55 	.word	0x08008f55

080091d0 <memcpy>:
 80091d0:	440a      	add	r2, r1
 80091d2:	4291      	cmp	r1, r2
 80091d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80091d8:	d100      	bne.n	80091dc <memcpy+0xc>
 80091da:	4770      	bx	lr
 80091dc:	b510      	push	{r4, lr}
 80091de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091e6:	4291      	cmp	r1, r2
 80091e8:	d1f9      	bne.n	80091de <memcpy+0xe>
 80091ea:	bd10      	pop	{r4, pc}

080091ec <__malloc_lock>:
 80091ec:	4801      	ldr	r0, [pc, #4]	; (80091f4 <__malloc_lock+0x8>)
 80091ee:	f7ff bf88 	b.w	8009102 <__retarget_lock_acquire_recursive>
 80091f2:	bf00      	nop
 80091f4:	20000934 	.word	0x20000934

080091f8 <__malloc_unlock>:
 80091f8:	4801      	ldr	r0, [pc, #4]	; (8009200 <__malloc_unlock+0x8>)
 80091fa:	f7ff bf83 	b.w	8009104 <__retarget_lock_release_recursive>
 80091fe:	bf00      	nop
 8009200:	20000934 	.word	0x20000934

08009204 <_Balloc>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009208:	4604      	mov	r4, r0
 800920a:	460d      	mov	r5, r1
 800920c:	b976      	cbnz	r6, 800922c <_Balloc+0x28>
 800920e:	2010      	movs	r0, #16
 8009210:	f7fd fe2a 	bl	8006e68 <malloc>
 8009214:	4602      	mov	r2, r0
 8009216:	6260      	str	r0, [r4, #36]	; 0x24
 8009218:	b920      	cbnz	r0, 8009224 <_Balloc+0x20>
 800921a:	4b18      	ldr	r3, [pc, #96]	; (800927c <_Balloc+0x78>)
 800921c:	4818      	ldr	r0, [pc, #96]	; (8009280 <_Balloc+0x7c>)
 800921e:	2166      	movs	r1, #102	; 0x66
 8009220:	f7fd fdc8 	bl	8006db4 <__assert_func>
 8009224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009228:	6006      	str	r6, [r0, #0]
 800922a:	60c6      	str	r6, [r0, #12]
 800922c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800922e:	68f3      	ldr	r3, [r6, #12]
 8009230:	b183      	cbz	r3, 8009254 <_Balloc+0x50>
 8009232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800923a:	b9b8      	cbnz	r0, 800926c <_Balloc+0x68>
 800923c:	2101      	movs	r1, #1
 800923e:	fa01 f605 	lsl.w	r6, r1, r5
 8009242:	1d72      	adds	r2, r6, #5
 8009244:	0092      	lsls	r2, r2, #2
 8009246:	4620      	mov	r0, r4
 8009248:	f000 fb5a 	bl	8009900 <_calloc_r>
 800924c:	b160      	cbz	r0, 8009268 <_Balloc+0x64>
 800924e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009252:	e00e      	b.n	8009272 <_Balloc+0x6e>
 8009254:	2221      	movs	r2, #33	; 0x21
 8009256:	2104      	movs	r1, #4
 8009258:	4620      	mov	r0, r4
 800925a:	f000 fb51 	bl	8009900 <_calloc_r>
 800925e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009260:	60f0      	str	r0, [r6, #12]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1e4      	bne.n	8009232 <_Balloc+0x2e>
 8009268:	2000      	movs	r0, #0
 800926a:	bd70      	pop	{r4, r5, r6, pc}
 800926c:	6802      	ldr	r2, [r0, #0]
 800926e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009272:	2300      	movs	r3, #0
 8009274:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009278:	e7f7      	b.n	800926a <_Balloc+0x66>
 800927a:	bf00      	nop
 800927c:	0800b1d5 	.word	0x0800b1d5
 8009280:	0800b328 	.word	0x0800b328

08009284 <_Bfree>:
 8009284:	b570      	push	{r4, r5, r6, lr}
 8009286:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009288:	4605      	mov	r5, r0
 800928a:	460c      	mov	r4, r1
 800928c:	b976      	cbnz	r6, 80092ac <_Bfree+0x28>
 800928e:	2010      	movs	r0, #16
 8009290:	f7fd fdea 	bl	8006e68 <malloc>
 8009294:	4602      	mov	r2, r0
 8009296:	6268      	str	r0, [r5, #36]	; 0x24
 8009298:	b920      	cbnz	r0, 80092a4 <_Bfree+0x20>
 800929a:	4b09      	ldr	r3, [pc, #36]	; (80092c0 <_Bfree+0x3c>)
 800929c:	4809      	ldr	r0, [pc, #36]	; (80092c4 <_Bfree+0x40>)
 800929e:	218a      	movs	r1, #138	; 0x8a
 80092a0:	f7fd fd88 	bl	8006db4 <__assert_func>
 80092a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092a8:	6006      	str	r6, [r0, #0]
 80092aa:	60c6      	str	r6, [r0, #12]
 80092ac:	b13c      	cbz	r4, 80092be <_Bfree+0x3a>
 80092ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092b0:	6862      	ldr	r2, [r4, #4]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092b8:	6021      	str	r1, [r4, #0]
 80092ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	0800b1d5 	.word	0x0800b1d5
 80092c4:	0800b328 	.word	0x0800b328

080092c8 <__multadd>:
 80092c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092cc:	690e      	ldr	r6, [r1, #16]
 80092ce:	4607      	mov	r7, r0
 80092d0:	4698      	mov	r8, r3
 80092d2:	460c      	mov	r4, r1
 80092d4:	f101 0014 	add.w	r0, r1, #20
 80092d8:	2300      	movs	r3, #0
 80092da:	6805      	ldr	r5, [r0, #0]
 80092dc:	b2a9      	uxth	r1, r5
 80092de:	fb02 8101 	mla	r1, r2, r1, r8
 80092e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80092e6:	0c2d      	lsrs	r5, r5, #16
 80092e8:	fb02 c505 	mla	r5, r2, r5, ip
 80092ec:	b289      	uxth	r1, r1
 80092ee:	3301      	adds	r3, #1
 80092f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80092f4:	429e      	cmp	r6, r3
 80092f6:	f840 1b04 	str.w	r1, [r0], #4
 80092fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80092fe:	dcec      	bgt.n	80092da <__multadd+0x12>
 8009300:	f1b8 0f00 	cmp.w	r8, #0
 8009304:	d022      	beq.n	800934c <__multadd+0x84>
 8009306:	68a3      	ldr	r3, [r4, #8]
 8009308:	42b3      	cmp	r3, r6
 800930a:	dc19      	bgt.n	8009340 <__multadd+0x78>
 800930c:	6861      	ldr	r1, [r4, #4]
 800930e:	4638      	mov	r0, r7
 8009310:	3101      	adds	r1, #1
 8009312:	f7ff ff77 	bl	8009204 <_Balloc>
 8009316:	4605      	mov	r5, r0
 8009318:	b928      	cbnz	r0, 8009326 <__multadd+0x5e>
 800931a:	4602      	mov	r2, r0
 800931c:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <__multadd+0x8c>)
 800931e:	480e      	ldr	r0, [pc, #56]	; (8009358 <__multadd+0x90>)
 8009320:	21b5      	movs	r1, #181	; 0xb5
 8009322:	f7fd fd47 	bl	8006db4 <__assert_func>
 8009326:	6922      	ldr	r2, [r4, #16]
 8009328:	3202      	adds	r2, #2
 800932a:	f104 010c 	add.w	r1, r4, #12
 800932e:	0092      	lsls	r2, r2, #2
 8009330:	300c      	adds	r0, #12
 8009332:	f7ff ff4d 	bl	80091d0 <memcpy>
 8009336:	4621      	mov	r1, r4
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff ffa3 	bl	8009284 <_Bfree>
 800933e:	462c      	mov	r4, r5
 8009340:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009344:	3601      	adds	r6, #1
 8009346:	f8c3 8014 	str.w	r8, [r3, #20]
 800934a:	6126      	str	r6, [r4, #16]
 800934c:	4620      	mov	r0, r4
 800934e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009352:	bf00      	nop
 8009354:	0800b2b7 	.word	0x0800b2b7
 8009358:	0800b328 	.word	0x0800b328

0800935c <__hi0bits>:
 800935c:	0c03      	lsrs	r3, r0, #16
 800935e:	041b      	lsls	r3, r3, #16
 8009360:	b9d3      	cbnz	r3, 8009398 <__hi0bits+0x3c>
 8009362:	0400      	lsls	r0, r0, #16
 8009364:	2310      	movs	r3, #16
 8009366:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800936a:	bf04      	itt	eq
 800936c:	0200      	lsleq	r0, r0, #8
 800936e:	3308      	addeq	r3, #8
 8009370:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009374:	bf04      	itt	eq
 8009376:	0100      	lsleq	r0, r0, #4
 8009378:	3304      	addeq	r3, #4
 800937a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800937e:	bf04      	itt	eq
 8009380:	0080      	lsleq	r0, r0, #2
 8009382:	3302      	addeq	r3, #2
 8009384:	2800      	cmp	r0, #0
 8009386:	db05      	blt.n	8009394 <__hi0bits+0x38>
 8009388:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800938c:	f103 0301 	add.w	r3, r3, #1
 8009390:	bf08      	it	eq
 8009392:	2320      	moveq	r3, #32
 8009394:	4618      	mov	r0, r3
 8009396:	4770      	bx	lr
 8009398:	2300      	movs	r3, #0
 800939a:	e7e4      	b.n	8009366 <__hi0bits+0xa>

0800939c <__lo0bits>:
 800939c:	6803      	ldr	r3, [r0, #0]
 800939e:	f013 0207 	ands.w	r2, r3, #7
 80093a2:	4601      	mov	r1, r0
 80093a4:	d00b      	beq.n	80093be <__lo0bits+0x22>
 80093a6:	07da      	lsls	r2, r3, #31
 80093a8:	d424      	bmi.n	80093f4 <__lo0bits+0x58>
 80093aa:	0798      	lsls	r0, r3, #30
 80093ac:	bf49      	itett	mi
 80093ae:	085b      	lsrmi	r3, r3, #1
 80093b0:	089b      	lsrpl	r3, r3, #2
 80093b2:	2001      	movmi	r0, #1
 80093b4:	600b      	strmi	r3, [r1, #0]
 80093b6:	bf5c      	itt	pl
 80093b8:	600b      	strpl	r3, [r1, #0]
 80093ba:	2002      	movpl	r0, #2
 80093bc:	4770      	bx	lr
 80093be:	b298      	uxth	r0, r3
 80093c0:	b9b0      	cbnz	r0, 80093f0 <__lo0bits+0x54>
 80093c2:	0c1b      	lsrs	r3, r3, #16
 80093c4:	2010      	movs	r0, #16
 80093c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80093ca:	bf04      	itt	eq
 80093cc:	0a1b      	lsreq	r3, r3, #8
 80093ce:	3008      	addeq	r0, #8
 80093d0:	071a      	lsls	r2, r3, #28
 80093d2:	bf04      	itt	eq
 80093d4:	091b      	lsreq	r3, r3, #4
 80093d6:	3004      	addeq	r0, #4
 80093d8:	079a      	lsls	r2, r3, #30
 80093da:	bf04      	itt	eq
 80093dc:	089b      	lsreq	r3, r3, #2
 80093de:	3002      	addeq	r0, #2
 80093e0:	07da      	lsls	r2, r3, #31
 80093e2:	d403      	bmi.n	80093ec <__lo0bits+0x50>
 80093e4:	085b      	lsrs	r3, r3, #1
 80093e6:	f100 0001 	add.w	r0, r0, #1
 80093ea:	d005      	beq.n	80093f8 <__lo0bits+0x5c>
 80093ec:	600b      	str	r3, [r1, #0]
 80093ee:	4770      	bx	lr
 80093f0:	4610      	mov	r0, r2
 80093f2:	e7e8      	b.n	80093c6 <__lo0bits+0x2a>
 80093f4:	2000      	movs	r0, #0
 80093f6:	4770      	bx	lr
 80093f8:	2020      	movs	r0, #32
 80093fa:	4770      	bx	lr

080093fc <__i2b>:
 80093fc:	b510      	push	{r4, lr}
 80093fe:	460c      	mov	r4, r1
 8009400:	2101      	movs	r1, #1
 8009402:	f7ff feff 	bl	8009204 <_Balloc>
 8009406:	4602      	mov	r2, r0
 8009408:	b928      	cbnz	r0, 8009416 <__i2b+0x1a>
 800940a:	4b05      	ldr	r3, [pc, #20]	; (8009420 <__i2b+0x24>)
 800940c:	4805      	ldr	r0, [pc, #20]	; (8009424 <__i2b+0x28>)
 800940e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009412:	f7fd fccf 	bl	8006db4 <__assert_func>
 8009416:	2301      	movs	r3, #1
 8009418:	6144      	str	r4, [r0, #20]
 800941a:	6103      	str	r3, [r0, #16]
 800941c:	bd10      	pop	{r4, pc}
 800941e:	bf00      	nop
 8009420:	0800b2b7 	.word	0x0800b2b7
 8009424:	0800b328 	.word	0x0800b328

08009428 <__multiply>:
 8009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	4614      	mov	r4, r2
 800942e:	690a      	ldr	r2, [r1, #16]
 8009430:	6923      	ldr	r3, [r4, #16]
 8009432:	429a      	cmp	r2, r3
 8009434:	bfb8      	it	lt
 8009436:	460b      	movlt	r3, r1
 8009438:	460d      	mov	r5, r1
 800943a:	bfbc      	itt	lt
 800943c:	4625      	movlt	r5, r4
 800943e:	461c      	movlt	r4, r3
 8009440:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009444:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009448:	68ab      	ldr	r3, [r5, #8]
 800944a:	6869      	ldr	r1, [r5, #4]
 800944c:	eb0a 0709 	add.w	r7, sl, r9
 8009450:	42bb      	cmp	r3, r7
 8009452:	b085      	sub	sp, #20
 8009454:	bfb8      	it	lt
 8009456:	3101      	addlt	r1, #1
 8009458:	f7ff fed4 	bl	8009204 <_Balloc>
 800945c:	b930      	cbnz	r0, 800946c <__multiply+0x44>
 800945e:	4602      	mov	r2, r0
 8009460:	4b42      	ldr	r3, [pc, #264]	; (800956c <__multiply+0x144>)
 8009462:	4843      	ldr	r0, [pc, #268]	; (8009570 <__multiply+0x148>)
 8009464:	f240 115d 	movw	r1, #349	; 0x15d
 8009468:	f7fd fca4 	bl	8006db4 <__assert_func>
 800946c:	f100 0614 	add.w	r6, r0, #20
 8009470:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009474:	4633      	mov	r3, r6
 8009476:	2200      	movs	r2, #0
 8009478:	4543      	cmp	r3, r8
 800947a:	d31e      	bcc.n	80094ba <__multiply+0x92>
 800947c:	f105 0c14 	add.w	ip, r5, #20
 8009480:	f104 0314 	add.w	r3, r4, #20
 8009484:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009488:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800948c:	9202      	str	r2, [sp, #8]
 800948e:	ebac 0205 	sub.w	r2, ip, r5
 8009492:	3a15      	subs	r2, #21
 8009494:	f022 0203 	bic.w	r2, r2, #3
 8009498:	3204      	adds	r2, #4
 800949a:	f105 0115 	add.w	r1, r5, #21
 800949e:	458c      	cmp	ip, r1
 80094a0:	bf38      	it	cc
 80094a2:	2204      	movcc	r2, #4
 80094a4:	9201      	str	r2, [sp, #4]
 80094a6:	9a02      	ldr	r2, [sp, #8]
 80094a8:	9303      	str	r3, [sp, #12]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d808      	bhi.n	80094c0 <__multiply+0x98>
 80094ae:	2f00      	cmp	r7, #0
 80094b0:	dc55      	bgt.n	800955e <__multiply+0x136>
 80094b2:	6107      	str	r7, [r0, #16]
 80094b4:	b005      	add	sp, #20
 80094b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ba:	f843 2b04 	str.w	r2, [r3], #4
 80094be:	e7db      	b.n	8009478 <__multiply+0x50>
 80094c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80094c4:	f1ba 0f00 	cmp.w	sl, #0
 80094c8:	d020      	beq.n	800950c <__multiply+0xe4>
 80094ca:	f105 0e14 	add.w	lr, r5, #20
 80094ce:	46b1      	mov	r9, r6
 80094d0:	2200      	movs	r2, #0
 80094d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80094d6:	f8d9 b000 	ldr.w	fp, [r9]
 80094da:	b2a1      	uxth	r1, r4
 80094dc:	fa1f fb8b 	uxth.w	fp, fp
 80094e0:	fb0a b101 	mla	r1, sl, r1, fp
 80094e4:	4411      	add	r1, r2
 80094e6:	f8d9 2000 	ldr.w	r2, [r9]
 80094ea:	0c24      	lsrs	r4, r4, #16
 80094ec:	0c12      	lsrs	r2, r2, #16
 80094ee:	fb0a 2404 	mla	r4, sl, r4, r2
 80094f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80094f6:	b289      	uxth	r1, r1
 80094f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80094fc:	45f4      	cmp	ip, lr
 80094fe:	f849 1b04 	str.w	r1, [r9], #4
 8009502:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009506:	d8e4      	bhi.n	80094d2 <__multiply+0xaa>
 8009508:	9901      	ldr	r1, [sp, #4]
 800950a:	5072      	str	r2, [r6, r1]
 800950c:	9a03      	ldr	r2, [sp, #12]
 800950e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009512:	3304      	adds	r3, #4
 8009514:	f1b9 0f00 	cmp.w	r9, #0
 8009518:	d01f      	beq.n	800955a <__multiply+0x132>
 800951a:	6834      	ldr	r4, [r6, #0]
 800951c:	f105 0114 	add.w	r1, r5, #20
 8009520:	46b6      	mov	lr, r6
 8009522:	f04f 0a00 	mov.w	sl, #0
 8009526:	880a      	ldrh	r2, [r1, #0]
 8009528:	f8be b002 	ldrh.w	fp, [lr, #2]
 800952c:	fb09 b202 	mla	r2, r9, r2, fp
 8009530:	4492      	add	sl, r2
 8009532:	b2a4      	uxth	r4, r4
 8009534:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009538:	f84e 4b04 	str.w	r4, [lr], #4
 800953c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009540:	f8be 2000 	ldrh.w	r2, [lr]
 8009544:	0c24      	lsrs	r4, r4, #16
 8009546:	fb09 2404 	mla	r4, r9, r4, r2
 800954a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800954e:	458c      	cmp	ip, r1
 8009550:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009554:	d8e7      	bhi.n	8009526 <__multiply+0xfe>
 8009556:	9a01      	ldr	r2, [sp, #4]
 8009558:	50b4      	str	r4, [r6, r2]
 800955a:	3604      	adds	r6, #4
 800955c:	e7a3      	b.n	80094a6 <__multiply+0x7e>
 800955e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1a5      	bne.n	80094b2 <__multiply+0x8a>
 8009566:	3f01      	subs	r7, #1
 8009568:	e7a1      	b.n	80094ae <__multiply+0x86>
 800956a:	bf00      	nop
 800956c:	0800b2b7 	.word	0x0800b2b7
 8009570:	0800b328 	.word	0x0800b328

08009574 <__pow5mult>:
 8009574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009578:	4615      	mov	r5, r2
 800957a:	f012 0203 	ands.w	r2, r2, #3
 800957e:	4606      	mov	r6, r0
 8009580:	460f      	mov	r7, r1
 8009582:	d007      	beq.n	8009594 <__pow5mult+0x20>
 8009584:	4c25      	ldr	r4, [pc, #148]	; (800961c <__pow5mult+0xa8>)
 8009586:	3a01      	subs	r2, #1
 8009588:	2300      	movs	r3, #0
 800958a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800958e:	f7ff fe9b 	bl	80092c8 <__multadd>
 8009592:	4607      	mov	r7, r0
 8009594:	10ad      	asrs	r5, r5, #2
 8009596:	d03d      	beq.n	8009614 <__pow5mult+0xa0>
 8009598:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800959a:	b97c      	cbnz	r4, 80095bc <__pow5mult+0x48>
 800959c:	2010      	movs	r0, #16
 800959e:	f7fd fc63 	bl	8006e68 <malloc>
 80095a2:	4602      	mov	r2, r0
 80095a4:	6270      	str	r0, [r6, #36]	; 0x24
 80095a6:	b928      	cbnz	r0, 80095b4 <__pow5mult+0x40>
 80095a8:	4b1d      	ldr	r3, [pc, #116]	; (8009620 <__pow5mult+0xac>)
 80095aa:	481e      	ldr	r0, [pc, #120]	; (8009624 <__pow5mult+0xb0>)
 80095ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80095b0:	f7fd fc00 	bl	8006db4 <__assert_func>
 80095b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095b8:	6004      	str	r4, [r0, #0]
 80095ba:	60c4      	str	r4, [r0, #12]
 80095bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80095c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095c4:	b94c      	cbnz	r4, 80095da <__pow5mult+0x66>
 80095c6:	f240 2171 	movw	r1, #625	; 0x271
 80095ca:	4630      	mov	r0, r6
 80095cc:	f7ff ff16 	bl	80093fc <__i2b>
 80095d0:	2300      	movs	r3, #0
 80095d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80095d6:	4604      	mov	r4, r0
 80095d8:	6003      	str	r3, [r0, #0]
 80095da:	f04f 0900 	mov.w	r9, #0
 80095de:	07eb      	lsls	r3, r5, #31
 80095e0:	d50a      	bpl.n	80095f8 <__pow5mult+0x84>
 80095e2:	4639      	mov	r1, r7
 80095e4:	4622      	mov	r2, r4
 80095e6:	4630      	mov	r0, r6
 80095e8:	f7ff ff1e 	bl	8009428 <__multiply>
 80095ec:	4639      	mov	r1, r7
 80095ee:	4680      	mov	r8, r0
 80095f0:	4630      	mov	r0, r6
 80095f2:	f7ff fe47 	bl	8009284 <_Bfree>
 80095f6:	4647      	mov	r7, r8
 80095f8:	106d      	asrs	r5, r5, #1
 80095fa:	d00b      	beq.n	8009614 <__pow5mult+0xa0>
 80095fc:	6820      	ldr	r0, [r4, #0]
 80095fe:	b938      	cbnz	r0, 8009610 <__pow5mult+0x9c>
 8009600:	4622      	mov	r2, r4
 8009602:	4621      	mov	r1, r4
 8009604:	4630      	mov	r0, r6
 8009606:	f7ff ff0f 	bl	8009428 <__multiply>
 800960a:	6020      	str	r0, [r4, #0]
 800960c:	f8c0 9000 	str.w	r9, [r0]
 8009610:	4604      	mov	r4, r0
 8009612:	e7e4      	b.n	80095de <__pow5mult+0x6a>
 8009614:	4638      	mov	r0, r7
 8009616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800961a:	bf00      	nop
 800961c:	0800b478 	.word	0x0800b478
 8009620:	0800b1d5 	.word	0x0800b1d5
 8009624:	0800b328 	.word	0x0800b328

08009628 <__lshift>:
 8009628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800962c:	460c      	mov	r4, r1
 800962e:	6849      	ldr	r1, [r1, #4]
 8009630:	6923      	ldr	r3, [r4, #16]
 8009632:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009636:	68a3      	ldr	r3, [r4, #8]
 8009638:	4607      	mov	r7, r0
 800963a:	4691      	mov	r9, r2
 800963c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009640:	f108 0601 	add.w	r6, r8, #1
 8009644:	42b3      	cmp	r3, r6
 8009646:	db0b      	blt.n	8009660 <__lshift+0x38>
 8009648:	4638      	mov	r0, r7
 800964a:	f7ff fddb 	bl	8009204 <_Balloc>
 800964e:	4605      	mov	r5, r0
 8009650:	b948      	cbnz	r0, 8009666 <__lshift+0x3e>
 8009652:	4602      	mov	r2, r0
 8009654:	4b28      	ldr	r3, [pc, #160]	; (80096f8 <__lshift+0xd0>)
 8009656:	4829      	ldr	r0, [pc, #164]	; (80096fc <__lshift+0xd4>)
 8009658:	f240 11d9 	movw	r1, #473	; 0x1d9
 800965c:	f7fd fbaa 	bl	8006db4 <__assert_func>
 8009660:	3101      	adds	r1, #1
 8009662:	005b      	lsls	r3, r3, #1
 8009664:	e7ee      	b.n	8009644 <__lshift+0x1c>
 8009666:	2300      	movs	r3, #0
 8009668:	f100 0114 	add.w	r1, r0, #20
 800966c:	f100 0210 	add.w	r2, r0, #16
 8009670:	4618      	mov	r0, r3
 8009672:	4553      	cmp	r3, sl
 8009674:	db33      	blt.n	80096de <__lshift+0xb6>
 8009676:	6920      	ldr	r0, [r4, #16]
 8009678:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800967c:	f104 0314 	add.w	r3, r4, #20
 8009680:	f019 091f 	ands.w	r9, r9, #31
 8009684:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009688:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800968c:	d02b      	beq.n	80096e6 <__lshift+0xbe>
 800968e:	f1c9 0e20 	rsb	lr, r9, #32
 8009692:	468a      	mov	sl, r1
 8009694:	2200      	movs	r2, #0
 8009696:	6818      	ldr	r0, [r3, #0]
 8009698:	fa00 f009 	lsl.w	r0, r0, r9
 800969c:	4302      	orrs	r2, r0
 800969e:	f84a 2b04 	str.w	r2, [sl], #4
 80096a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096a6:	459c      	cmp	ip, r3
 80096a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80096ac:	d8f3      	bhi.n	8009696 <__lshift+0x6e>
 80096ae:	ebac 0304 	sub.w	r3, ip, r4
 80096b2:	3b15      	subs	r3, #21
 80096b4:	f023 0303 	bic.w	r3, r3, #3
 80096b8:	3304      	adds	r3, #4
 80096ba:	f104 0015 	add.w	r0, r4, #21
 80096be:	4584      	cmp	ip, r0
 80096c0:	bf38      	it	cc
 80096c2:	2304      	movcc	r3, #4
 80096c4:	50ca      	str	r2, [r1, r3]
 80096c6:	b10a      	cbz	r2, 80096cc <__lshift+0xa4>
 80096c8:	f108 0602 	add.w	r6, r8, #2
 80096cc:	3e01      	subs	r6, #1
 80096ce:	4638      	mov	r0, r7
 80096d0:	612e      	str	r6, [r5, #16]
 80096d2:	4621      	mov	r1, r4
 80096d4:	f7ff fdd6 	bl	8009284 <_Bfree>
 80096d8:	4628      	mov	r0, r5
 80096da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096de:	f842 0f04 	str.w	r0, [r2, #4]!
 80096e2:	3301      	adds	r3, #1
 80096e4:	e7c5      	b.n	8009672 <__lshift+0x4a>
 80096e6:	3904      	subs	r1, #4
 80096e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80096f0:	459c      	cmp	ip, r3
 80096f2:	d8f9      	bhi.n	80096e8 <__lshift+0xc0>
 80096f4:	e7ea      	b.n	80096cc <__lshift+0xa4>
 80096f6:	bf00      	nop
 80096f8:	0800b2b7 	.word	0x0800b2b7
 80096fc:	0800b328 	.word	0x0800b328

08009700 <__mcmp>:
 8009700:	b530      	push	{r4, r5, lr}
 8009702:	6902      	ldr	r2, [r0, #16]
 8009704:	690c      	ldr	r4, [r1, #16]
 8009706:	1b12      	subs	r2, r2, r4
 8009708:	d10e      	bne.n	8009728 <__mcmp+0x28>
 800970a:	f100 0314 	add.w	r3, r0, #20
 800970e:	3114      	adds	r1, #20
 8009710:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009714:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009718:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800971c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009720:	42a5      	cmp	r5, r4
 8009722:	d003      	beq.n	800972c <__mcmp+0x2c>
 8009724:	d305      	bcc.n	8009732 <__mcmp+0x32>
 8009726:	2201      	movs	r2, #1
 8009728:	4610      	mov	r0, r2
 800972a:	bd30      	pop	{r4, r5, pc}
 800972c:	4283      	cmp	r3, r0
 800972e:	d3f3      	bcc.n	8009718 <__mcmp+0x18>
 8009730:	e7fa      	b.n	8009728 <__mcmp+0x28>
 8009732:	f04f 32ff 	mov.w	r2, #4294967295
 8009736:	e7f7      	b.n	8009728 <__mcmp+0x28>

08009738 <__mdiff>:
 8009738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	460c      	mov	r4, r1
 800973e:	4606      	mov	r6, r0
 8009740:	4611      	mov	r1, r2
 8009742:	4620      	mov	r0, r4
 8009744:	4617      	mov	r7, r2
 8009746:	f7ff ffdb 	bl	8009700 <__mcmp>
 800974a:	1e05      	subs	r5, r0, #0
 800974c:	d110      	bne.n	8009770 <__mdiff+0x38>
 800974e:	4629      	mov	r1, r5
 8009750:	4630      	mov	r0, r6
 8009752:	f7ff fd57 	bl	8009204 <_Balloc>
 8009756:	b930      	cbnz	r0, 8009766 <__mdiff+0x2e>
 8009758:	4b39      	ldr	r3, [pc, #228]	; (8009840 <__mdiff+0x108>)
 800975a:	4602      	mov	r2, r0
 800975c:	f240 2132 	movw	r1, #562	; 0x232
 8009760:	4838      	ldr	r0, [pc, #224]	; (8009844 <__mdiff+0x10c>)
 8009762:	f7fd fb27 	bl	8006db4 <__assert_func>
 8009766:	2301      	movs	r3, #1
 8009768:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800976c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009770:	bfa4      	itt	ge
 8009772:	463b      	movge	r3, r7
 8009774:	4627      	movge	r7, r4
 8009776:	4630      	mov	r0, r6
 8009778:	6879      	ldr	r1, [r7, #4]
 800977a:	bfa6      	itte	ge
 800977c:	461c      	movge	r4, r3
 800977e:	2500      	movge	r5, #0
 8009780:	2501      	movlt	r5, #1
 8009782:	f7ff fd3f 	bl	8009204 <_Balloc>
 8009786:	b920      	cbnz	r0, 8009792 <__mdiff+0x5a>
 8009788:	4b2d      	ldr	r3, [pc, #180]	; (8009840 <__mdiff+0x108>)
 800978a:	4602      	mov	r2, r0
 800978c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009790:	e7e6      	b.n	8009760 <__mdiff+0x28>
 8009792:	693e      	ldr	r6, [r7, #16]
 8009794:	60c5      	str	r5, [r0, #12]
 8009796:	6925      	ldr	r5, [r4, #16]
 8009798:	f107 0114 	add.w	r1, r7, #20
 800979c:	f104 0914 	add.w	r9, r4, #20
 80097a0:	f100 0e14 	add.w	lr, r0, #20
 80097a4:	f107 0210 	add.w	r2, r7, #16
 80097a8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80097ac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80097b0:	46f2      	mov	sl, lr
 80097b2:	2700      	movs	r7, #0
 80097b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80097b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80097bc:	fa1f f883 	uxth.w	r8, r3
 80097c0:	fa17 f78b 	uxtah	r7, r7, fp
 80097c4:	0c1b      	lsrs	r3, r3, #16
 80097c6:	eba7 0808 	sub.w	r8, r7, r8
 80097ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80097ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80097d2:	fa1f f888 	uxth.w	r8, r8
 80097d6:	141f      	asrs	r7, r3, #16
 80097d8:	454d      	cmp	r5, r9
 80097da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80097de:	f84a 3b04 	str.w	r3, [sl], #4
 80097e2:	d8e7      	bhi.n	80097b4 <__mdiff+0x7c>
 80097e4:	1b2b      	subs	r3, r5, r4
 80097e6:	3b15      	subs	r3, #21
 80097e8:	f023 0303 	bic.w	r3, r3, #3
 80097ec:	3304      	adds	r3, #4
 80097ee:	3415      	adds	r4, #21
 80097f0:	42a5      	cmp	r5, r4
 80097f2:	bf38      	it	cc
 80097f4:	2304      	movcc	r3, #4
 80097f6:	4419      	add	r1, r3
 80097f8:	4473      	add	r3, lr
 80097fa:	469e      	mov	lr, r3
 80097fc:	460d      	mov	r5, r1
 80097fe:	4565      	cmp	r5, ip
 8009800:	d30e      	bcc.n	8009820 <__mdiff+0xe8>
 8009802:	f10c 0203 	add.w	r2, ip, #3
 8009806:	1a52      	subs	r2, r2, r1
 8009808:	f022 0203 	bic.w	r2, r2, #3
 800980c:	3903      	subs	r1, #3
 800980e:	458c      	cmp	ip, r1
 8009810:	bf38      	it	cc
 8009812:	2200      	movcc	r2, #0
 8009814:	441a      	add	r2, r3
 8009816:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800981a:	b17b      	cbz	r3, 800983c <__mdiff+0x104>
 800981c:	6106      	str	r6, [r0, #16]
 800981e:	e7a5      	b.n	800976c <__mdiff+0x34>
 8009820:	f855 8b04 	ldr.w	r8, [r5], #4
 8009824:	fa17 f488 	uxtah	r4, r7, r8
 8009828:	1422      	asrs	r2, r4, #16
 800982a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800982e:	b2a4      	uxth	r4, r4
 8009830:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009834:	f84e 4b04 	str.w	r4, [lr], #4
 8009838:	1417      	asrs	r7, r2, #16
 800983a:	e7e0      	b.n	80097fe <__mdiff+0xc6>
 800983c:	3e01      	subs	r6, #1
 800983e:	e7ea      	b.n	8009816 <__mdiff+0xde>
 8009840:	0800b2b7 	.word	0x0800b2b7
 8009844:	0800b328 	.word	0x0800b328

08009848 <__d2b>:
 8009848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800984c:	4689      	mov	r9, r1
 800984e:	2101      	movs	r1, #1
 8009850:	ec57 6b10 	vmov	r6, r7, d0
 8009854:	4690      	mov	r8, r2
 8009856:	f7ff fcd5 	bl	8009204 <_Balloc>
 800985a:	4604      	mov	r4, r0
 800985c:	b930      	cbnz	r0, 800986c <__d2b+0x24>
 800985e:	4602      	mov	r2, r0
 8009860:	4b25      	ldr	r3, [pc, #148]	; (80098f8 <__d2b+0xb0>)
 8009862:	4826      	ldr	r0, [pc, #152]	; (80098fc <__d2b+0xb4>)
 8009864:	f240 310a 	movw	r1, #778	; 0x30a
 8009868:	f7fd faa4 	bl	8006db4 <__assert_func>
 800986c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009870:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009874:	bb35      	cbnz	r5, 80098c4 <__d2b+0x7c>
 8009876:	2e00      	cmp	r6, #0
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	d028      	beq.n	80098ce <__d2b+0x86>
 800987c:	4668      	mov	r0, sp
 800987e:	9600      	str	r6, [sp, #0]
 8009880:	f7ff fd8c 	bl	800939c <__lo0bits>
 8009884:	9900      	ldr	r1, [sp, #0]
 8009886:	b300      	cbz	r0, 80098ca <__d2b+0x82>
 8009888:	9a01      	ldr	r2, [sp, #4]
 800988a:	f1c0 0320 	rsb	r3, r0, #32
 800988e:	fa02 f303 	lsl.w	r3, r2, r3
 8009892:	430b      	orrs	r3, r1
 8009894:	40c2      	lsrs	r2, r0
 8009896:	6163      	str	r3, [r4, #20]
 8009898:	9201      	str	r2, [sp, #4]
 800989a:	9b01      	ldr	r3, [sp, #4]
 800989c:	61a3      	str	r3, [r4, #24]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	bf14      	ite	ne
 80098a2:	2202      	movne	r2, #2
 80098a4:	2201      	moveq	r2, #1
 80098a6:	6122      	str	r2, [r4, #16]
 80098a8:	b1d5      	cbz	r5, 80098e0 <__d2b+0x98>
 80098aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80098ae:	4405      	add	r5, r0
 80098b0:	f8c9 5000 	str.w	r5, [r9]
 80098b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80098b8:	f8c8 0000 	str.w	r0, [r8]
 80098bc:	4620      	mov	r0, r4
 80098be:	b003      	add	sp, #12
 80098c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098c8:	e7d5      	b.n	8009876 <__d2b+0x2e>
 80098ca:	6161      	str	r1, [r4, #20]
 80098cc:	e7e5      	b.n	800989a <__d2b+0x52>
 80098ce:	a801      	add	r0, sp, #4
 80098d0:	f7ff fd64 	bl	800939c <__lo0bits>
 80098d4:	9b01      	ldr	r3, [sp, #4]
 80098d6:	6163      	str	r3, [r4, #20]
 80098d8:	2201      	movs	r2, #1
 80098da:	6122      	str	r2, [r4, #16]
 80098dc:	3020      	adds	r0, #32
 80098de:	e7e3      	b.n	80098a8 <__d2b+0x60>
 80098e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098e8:	f8c9 0000 	str.w	r0, [r9]
 80098ec:	6918      	ldr	r0, [r3, #16]
 80098ee:	f7ff fd35 	bl	800935c <__hi0bits>
 80098f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098f6:	e7df      	b.n	80098b8 <__d2b+0x70>
 80098f8:	0800b2b7 	.word	0x0800b2b7
 80098fc:	0800b328 	.word	0x0800b328

08009900 <_calloc_r>:
 8009900:	b513      	push	{r0, r1, r4, lr}
 8009902:	434a      	muls	r2, r1
 8009904:	4611      	mov	r1, r2
 8009906:	9201      	str	r2, [sp, #4]
 8009908:	f7fd fb0e 	bl	8006f28 <_malloc_r>
 800990c:	4604      	mov	r4, r0
 800990e:	b118      	cbz	r0, 8009918 <_calloc_r+0x18>
 8009910:	9a01      	ldr	r2, [sp, #4]
 8009912:	2100      	movs	r1, #0
 8009914:	f7fd fab0 	bl	8006e78 <memset>
 8009918:	4620      	mov	r0, r4
 800991a:	b002      	add	sp, #8
 800991c:	bd10      	pop	{r4, pc}

0800991e <_raise_r>:
 800991e:	291f      	cmp	r1, #31
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	4604      	mov	r4, r0
 8009924:	460d      	mov	r5, r1
 8009926:	d904      	bls.n	8009932 <_raise_r+0x14>
 8009928:	2316      	movs	r3, #22
 800992a:	6003      	str	r3, [r0, #0]
 800992c:	f04f 30ff 	mov.w	r0, #4294967295
 8009930:	bd38      	pop	{r3, r4, r5, pc}
 8009932:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009934:	b112      	cbz	r2, 800993c <_raise_r+0x1e>
 8009936:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800993a:	b94b      	cbnz	r3, 8009950 <_raise_r+0x32>
 800993c:	4620      	mov	r0, r4
 800993e:	f000 f831 	bl	80099a4 <_getpid_r>
 8009942:	462a      	mov	r2, r5
 8009944:	4601      	mov	r1, r0
 8009946:	4620      	mov	r0, r4
 8009948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800994c:	f000 b818 	b.w	8009980 <_kill_r>
 8009950:	2b01      	cmp	r3, #1
 8009952:	d00a      	beq.n	800996a <_raise_r+0x4c>
 8009954:	1c59      	adds	r1, r3, #1
 8009956:	d103      	bne.n	8009960 <_raise_r+0x42>
 8009958:	2316      	movs	r3, #22
 800995a:	6003      	str	r3, [r0, #0]
 800995c:	2001      	movs	r0, #1
 800995e:	e7e7      	b.n	8009930 <_raise_r+0x12>
 8009960:	2400      	movs	r4, #0
 8009962:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009966:	4628      	mov	r0, r5
 8009968:	4798      	blx	r3
 800996a:	2000      	movs	r0, #0
 800996c:	e7e0      	b.n	8009930 <_raise_r+0x12>
	...

08009970 <raise>:
 8009970:	4b02      	ldr	r3, [pc, #8]	; (800997c <raise+0xc>)
 8009972:	4601      	mov	r1, r0
 8009974:	6818      	ldr	r0, [r3, #0]
 8009976:	f7ff bfd2 	b.w	800991e <_raise_r>
 800997a:	bf00      	nop
 800997c:	20000010 	.word	0x20000010

08009980 <_kill_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d07      	ldr	r5, [pc, #28]	; (80099a0 <_kill_r+0x20>)
 8009984:	2300      	movs	r3, #0
 8009986:	4604      	mov	r4, r0
 8009988:	4608      	mov	r0, r1
 800998a:	4611      	mov	r1, r2
 800998c:	602b      	str	r3, [r5, #0]
 800998e:	f7f9 f84f 	bl	8002a30 <_kill>
 8009992:	1c43      	adds	r3, r0, #1
 8009994:	d102      	bne.n	800999c <_kill_r+0x1c>
 8009996:	682b      	ldr	r3, [r5, #0]
 8009998:	b103      	cbz	r3, 800999c <_kill_r+0x1c>
 800999a:	6023      	str	r3, [r4, #0]
 800999c:	bd38      	pop	{r3, r4, r5, pc}
 800999e:	bf00      	nop
 80099a0:	2000093c 	.word	0x2000093c

080099a4 <_getpid_r>:
 80099a4:	f7f9 b842 	b.w	8002a2c <_getpid>

080099a8 <__sread>:
 80099a8:	b510      	push	{r4, lr}
 80099aa:	460c      	mov	r4, r1
 80099ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b0:	f000 f8a6 	bl	8009b00 <_read_r>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	bfab      	itete	ge
 80099b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099ba:	89a3      	ldrhlt	r3, [r4, #12]
 80099bc:	181b      	addge	r3, r3, r0
 80099be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099c2:	bfac      	ite	ge
 80099c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80099c6:	81a3      	strhlt	r3, [r4, #12]
 80099c8:	bd10      	pop	{r4, pc}

080099ca <__swrite>:
 80099ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ce:	461f      	mov	r7, r3
 80099d0:	898b      	ldrh	r3, [r1, #12]
 80099d2:	05db      	lsls	r3, r3, #23
 80099d4:	4605      	mov	r5, r0
 80099d6:	460c      	mov	r4, r1
 80099d8:	4616      	mov	r6, r2
 80099da:	d505      	bpl.n	80099e8 <__swrite+0x1e>
 80099dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e0:	2302      	movs	r3, #2
 80099e2:	2200      	movs	r2, #0
 80099e4:	f000 f868 	bl	8009ab8 <_lseek_r>
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099f2:	81a3      	strh	r3, [r4, #12]
 80099f4:	4632      	mov	r2, r6
 80099f6:	463b      	mov	r3, r7
 80099f8:	4628      	mov	r0, r5
 80099fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099fe:	f000 b817 	b.w	8009a30 <_write_r>

08009a02 <__sseek>:
 8009a02:	b510      	push	{r4, lr}
 8009a04:	460c      	mov	r4, r1
 8009a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a0a:	f000 f855 	bl	8009ab8 <_lseek_r>
 8009a0e:	1c43      	adds	r3, r0, #1
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	bf15      	itete	ne
 8009a14:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a1e:	81a3      	strheq	r3, [r4, #12]
 8009a20:	bf18      	it	ne
 8009a22:	81a3      	strhne	r3, [r4, #12]
 8009a24:	bd10      	pop	{r4, pc}

08009a26 <__sclose>:
 8009a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a2a:	f000 b813 	b.w	8009a54 <_close_r>
	...

08009a30 <_write_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4d07      	ldr	r5, [pc, #28]	; (8009a50 <_write_r+0x20>)
 8009a34:	4604      	mov	r4, r0
 8009a36:	4608      	mov	r0, r1
 8009a38:	4611      	mov	r1, r2
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	602a      	str	r2, [r5, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	f7f9 fae0 	bl	8003004 <_write>
 8009a44:	1c43      	adds	r3, r0, #1
 8009a46:	d102      	bne.n	8009a4e <_write_r+0x1e>
 8009a48:	682b      	ldr	r3, [r5, #0]
 8009a4a:	b103      	cbz	r3, 8009a4e <_write_r+0x1e>
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	bd38      	pop	{r3, r4, r5, pc}
 8009a50:	2000093c 	.word	0x2000093c

08009a54 <_close_r>:
 8009a54:	b538      	push	{r3, r4, r5, lr}
 8009a56:	4d06      	ldr	r5, [pc, #24]	; (8009a70 <_close_r+0x1c>)
 8009a58:	2300      	movs	r3, #0
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	4608      	mov	r0, r1
 8009a5e:	602b      	str	r3, [r5, #0]
 8009a60:	f7f8 fff4 	bl	8002a4c <_close>
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	d102      	bne.n	8009a6e <_close_r+0x1a>
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	b103      	cbz	r3, 8009a6e <_close_r+0x1a>
 8009a6c:	6023      	str	r3, [r4, #0]
 8009a6e:	bd38      	pop	{r3, r4, r5, pc}
 8009a70:	2000093c 	.word	0x2000093c

08009a74 <_fstat_r>:
 8009a74:	b538      	push	{r3, r4, r5, lr}
 8009a76:	4d07      	ldr	r5, [pc, #28]	; (8009a94 <_fstat_r+0x20>)
 8009a78:	2300      	movs	r3, #0
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	4611      	mov	r1, r2
 8009a80:	602b      	str	r3, [r5, #0]
 8009a82:	f7f8 ffe6 	bl	8002a52 <_fstat>
 8009a86:	1c43      	adds	r3, r0, #1
 8009a88:	d102      	bne.n	8009a90 <_fstat_r+0x1c>
 8009a8a:	682b      	ldr	r3, [r5, #0]
 8009a8c:	b103      	cbz	r3, 8009a90 <_fstat_r+0x1c>
 8009a8e:	6023      	str	r3, [r4, #0]
 8009a90:	bd38      	pop	{r3, r4, r5, pc}
 8009a92:	bf00      	nop
 8009a94:	2000093c 	.word	0x2000093c

08009a98 <_isatty_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4d06      	ldr	r5, [pc, #24]	; (8009ab4 <_isatty_r+0x1c>)
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	4608      	mov	r0, r1
 8009aa2:	602b      	str	r3, [r5, #0]
 8009aa4:	f7f8 ffda 	bl	8002a5c <_isatty>
 8009aa8:	1c43      	adds	r3, r0, #1
 8009aaa:	d102      	bne.n	8009ab2 <_isatty_r+0x1a>
 8009aac:	682b      	ldr	r3, [r5, #0]
 8009aae:	b103      	cbz	r3, 8009ab2 <_isatty_r+0x1a>
 8009ab0:	6023      	str	r3, [r4, #0]
 8009ab2:	bd38      	pop	{r3, r4, r5, pc}
 8009ab4:	2000093c 	.word	0x2000093c

08009ab8 <_lseek_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	4d07      	ldr	r5, [pc, #28]	; (8009ad8 <_lseek_r+0x20>)
 8009abc:	4604      	mov	r4, r0
 8009abe:	4608      	mov	r0, r1
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	602a      	str	r2, [r5, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f7f8 ffca 	bl	8002a60 <_lseek>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_lseek_r+0x1e>
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_lseek_r+0x1e>
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	2000093c 	.word	0x2000093c

08009adc <__ascii_mbtowc>:
 8009adc:	b082      	sub	sp, #8
 8009ade:	b901      	cbnz	r1, 8009ae2 <__ascii_mbtowc+0x6>
 8009ae0:	a901      	add	r1, sp, #4
 8009ae2:	b142      	cbz	r2, 8009af6 <__ascii_mbtowc+0x1a>
 8009ae4:	b14b      	cbz	r3, 8009afa <__ascii_mbtowc+0x1e>
 8009ae6:	7813      	ldrb	r3, [r2, #0]
 8009ae8:	600b      	str	r3, [r1, #0]
 8009aea:	7812      	ldrb	r2, [r2, #0]
 8009aec:	1e10      	subs	r0, r2, #0
 8009aee:	bf18      	it	ne
 8009af0:	2001      	movne	r0, #1
 8009af2:	b002      	add	sp, #8
 8009af4:	4770      	bx	lr
 8009af6:	4610      	mov	r0, r2
 8009af8:	e7fb      	b.n	8009af2 <__ascii_mbtowc+0x16>
 8009afa:	f06f 0001 	mvn.w	r0, #1
 8009afe:	e7f8      	b.n	8009af2 <__ascii_mbtowc+0x16>

08009b00 <_read_r>:
 8009b00:	b538      	push	{r3, r4, r5, lr}
 8009b02:	4d07      	ldr	r5, [pc, #28]	; (8009b20 <_read_r+0x20>)
 8009b04:	4604      	mov	r4, r0
 8009b06:	4608      	mov	r0, r1
 8009b08:	4611      	mov	r1, r2
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	602a      	str	r2, [r5, #0]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f7f9 fa54 	bl	8002fbc <_read>
 8009b14:	1c43      	adds	r3, r0, #1
 8009b16:	d102      	bne.n	8009b1e <_read_r+0x1e>
 8009b18:	682b      	ldr	r3, [r5, #0]
 8009b1a:	b103      	cbz	r3, 8009b1e <_read_r+0x1e>
 8009b1c:	6023      	str	r3, [r4, #0]
 8009b1e:	bd38      	pop	{r3, r4, r5, pc}
 8009b20:	2000093c 	.word	0x2000093c

08009b24 <__ascii_wctomb>:
 8009b24:	b149      	cbz	r1, 8009b3a <__ascii_wctomb+0x16>
 8009b26:	2aff      	cmp	r2, #255	; 0xff
 8009b28:	bf85      	ittet	hi
 8009b2a:	238a      	movhi	r3, #138	; 0x8a
 8009b2c:	6003      	strhi	r3, [r0, #0]
 8009b2e:	700a      	strbls	r2, [r1, #0]
 8009b30:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b34:	bf98      	it	ls
 8009b36:	2001      	movls	r0, #1
 8009b38:	4770      	bx	lr
 8009b3a:	4608      	mov	r0, r1
 8009b3c:	4770      	bx	lr
	...

08009b40 <atan>:
 8009b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	ec55 4b10 	vmov	r4, r5, d0
 8009b48:	4bc3      	ldr	r3, [pc, #780]	; (8009e58 <atan+0x318>)
 8009b4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009b4e:	429e      	cmp	r6, r3
 8009b50:	46ab      	mov	fp, r5
 8009b52:	dd18      	ble.n	8009b86 <atan+0x46>
 8009b54:	4bc1      	ldr	r3, [pc, #772]	; (8009e5c <atan+0x31c>)
 8009b56:	429e      	cmp	r6, r3
 8009b58:	dc01      	bgt.n	8009b5e <atan+0x1e>
 8009b5a:	d109      	bne.n	8009b70 <atan+0x30>
 8009b5c:	b144      	cbz	r4, 8009b70 <atan+0x30>
 8009b5e:	4622      	mov	r2, r4
 8009b60:	462b      	mov	r3, r5
 8009b62:	4620      	mov	r0, r4
 8009b64:	4629      	mov	r1, r5
 8009b66:	f7f7 fac9 	bl	80010fc <__adddf3>
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	460d      	mov	r5, r1
 8009b6e:	e006      	b.n	8009b7e <atan+0x3e>
 8009b70:	f1bb 0f00 	cmp.w	fp, #0
 8009b74:	f300 8131 	bgt.w	8009dda <atan+0x29a>
 8009b78:	a59b      	add	r5, pc, #620	; (adr r5, 8009de8 <atan+0x2a8>)
 8009b7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b7e:	ec45 4b10 	vmov	d0, r4, r5
 8009b82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b86:	4bb6      	ldr	r3, [pc, #728]	; (8009e60 <atan+0x320>)
 8009b88:	429e      	cmp	r6, r3
 8009b8a:	dc14      	bgt.n	8009bb6 <atan+0x76>
 8009b8c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009b90:	429e      	cmp	r6, r3
 8009b92:	dc0d      	bgt.n	8009bb0 <atan+0x70>
 8009b94:	a396      	add	r3, pc, #600	; (adr r3, 8009df0 <atan+0x2b0>)
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	ee10 0a10 	vmov	r0, s0
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	f7f7 faac 	bl	80010fc <__adddf3>
 8009ba4:	4baf      	ldr	r3, [pc, #700]	; (8009e64 <atan+0x324>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f7f7 feee 	bl	8001988 <__aeabi_dcmpgt>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d1e6      	bne.n	8009b7e <atan+0x3e>
 8009bb0:	f04f 3aff 	mov.w	sl, #4294967295
 8009bb4:	e02b      	b.n	8009c0e <atan+0xce>
 8009bb6:	f000 f963 	bl	8009e80 <fabs>
 8009bba:	4bab      	ldr	r3, [pc, #684]	; (8009e68 <atan+0x328>)
 8009bbc:	429e      	cmp	r6, r3
 8009bbe:	ec55 4b10 	vmov	r4, r5, d0
 8009bc2:	f300 80bf 	bgt.w	8009d44 <atan+0x204>
 8009bc6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009bca:	429e      	cmp	r6, r3
 8009bcc:	f300 80a0 	bgt.w	8009d10 <atan+0x1d0>
 8009bd0:	ee10 2a10 	vmov	r2, s0
 8009bd4:	ee10 0a10 	vmov	r0, s0
 8009bd8:	462b      	mov	r3, r5
 8009bda:	4629      	mov	r1, r5
 8009bdc:	f7f7 fa8e 	bl	80010fc <__adddf3>
 8009be0:	4ba0      	ldr	r3, [pc, #640]	; (8009e64 <atan+0x324>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	f7f7 fa88 	bl	80010f8 <__aeabi_dsub>
 8009be8:	2200      	movs	r2, #0
 8009bea:	4606      	mov	r6, r0
 8009bec:	460f      	mov	r7, r1
 8009bee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	f7f7 fa81 	bl	80010fc <__adddf3>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4630      	mov	r0, r6
 8009c00:	4639      	mov	r1, r7
 8009c02:	f7f7 fd5b 	bl	80016bc <__aeabi_ddiv>
 8009c06:	f04f 0a00 	mov.w	sl, #0
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	460d      	mov	r5, r1
 8009c0e:	4622      	mov	r2, r4
 8009c10:	462b      	mov	r3, r5
 8009c12:	4620      	mov	r0, r4
 8009c14:	4629      	mov	r1, r5
 8009c16:	f7f7 fc27 	bl	8001468 <__aeabi_dmul>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4680      	mov	r8, r0
 8009c20:	4689      	mov	r9, r1
 8009c22:	f7f7 fc21 	bl	8001468 <__aeabi_dmul>
 8009c26:	a374      	add	r3, pc, #464	; (adr r3, 8009df8 <atan+0x2b8>)
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	4606      	mov	r6, r0
 8009c2e:	460f      	mov	r7, r1
 8009c30:	f7f7 fc1a 	bl	8001468 <__aeabi_dmul>
 8009c34:	a372      	add	r3, pc, #456	; (adr r3, 8009e00 <atan+0x2c0>)
 8009c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3a:	f7f7 fa5f 	bl	80010fc <__adddf3>
 8009c3e:	4632      	mov	r2, r6
 8009c40:	463b      	mov	r3, r7
 8009c42:	f7f7 fc11 	bl	8001468 <__aeabi_dmul>
 8009c46:	a370      	add	r3, pc, #448	; (adr r3, 8009e08 <atan+0x2c8>)
 8009c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4c:	f7f7 fa56 	bl	80010fc <__adddf3>
 8009c50:	4632      	mov	r2, r6
 8009c52:	463b      	mov	r3, r7
 8009c54:	f7f7 fc08 	bl	8001468 <__aeabi_dmul>
 8009c58:	a36d      	add	r3, pc, #436	; (adr r3, 8009e10 <atan+0x2d0>)
 8009c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5e:	f7f7 fa4d 	bl	80010fc <__adddf3>
 8009c62:	4632      	mov	r2, r6
 8009c64:	463b      	mov	r3, r7
 8009c66:	f7f7 fbff 	bl	8001468 <__aeabi_dmul>
 8009c6a:	a36b      	add	r3, pc, #428	; (adr r3, 8009e18 <atan+0x2d8>)
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	f7f7 fa44 	bl	80010fc <__adddf3>
 8009c74:	4632      	mov	r2, r6
 8009c76:	463b      	mov	r3, r7
 8009c78:	f7f7 fbf6 	bl	8001468 <__aeabi_dmul>
 8009c7c:	a368      	add	r3, pc, #416	; (adr r3, 8009e20 <atan+0x2e0>)
 8009c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c82:	f7f7 fa3b 	bl	80010fc <__adddf3>
 8009c86:	4642      	mov	r2, r8
 8009c88:	464b      	mov	r3, r9
 8009c8a:	f7f7 fbed 	bl	8001468 <__aeabi_dmul>
 8009c8e:	a366      	add	r3, pc, #408	; (adr r3, 8009e28 <atan+0x2e8>)
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	4680      	mov	r8, r0
 8009c96:	4689      	mov	r9, r1
 8009c98:	4630      	mov	r0, r6
 8009c9a:	4639      	mov	r1, r7
 8009c9c:	f7f7 fbe4 	bl	8001468 <__aeabi_dmul>
 8009ca0:	a363      	add	r3, pc, #396	; (adr r3, 8009e30 <atan+0x2f0>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f7f7 fa27 	bl	80010f8 <__aeabi_dsub>
 8009caa:	4632      	mov	r2, r6
 8009cac:	463b      	mov	r3, r7
 8009cae:	f7f7 fbdb 	bl	8001468 <__aeabi_dmul>
 8009cb2:	a361      	add	r3, pc, #388	; (adr r3, 8009e38 <atan+0x2f8>)
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	f7f7 fa1e 	bl	80010f8 <__aeabi_dsub>
 8009cbc:	4632      	mov	r2, r6
 8009cbe:	463b      	mov	r3, r7
 8009cc0:	f7f7 fbd2 	bl	8001468 <__aeabi_dmul>
 8009cc4:	a35e      	add	r3, pc, #376	; (adr r3, 8009e40 <atan+0x300>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f7f7 fa15 	bl	80010f8 <__aeabi_dsub>
 8009cce:	4632      	mov	r2, r6
 8009cd0:	463b      	mov	r3, r7
 8009cd2:	f7f7 fbc9 	bl	8001468 <__aeabi_dmul>
 8009cd6:	a35c      	add	r3, pc, #368	; (adr r3, 8009e48 <atan+0x308>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	f7f7 fa0c 	bl	80010f8 <__aeabi_dsub>
 8009ce0:	4632      	mov	r2, r6
 8009ce2:	463b      	mov	r3, r7
 8009ce4:	f7f7 fbc0 	bl	8001468 <__aeabi_dmul>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	4640      	mov	r0, r8
 8009cee:	4649      	mov	r1, r9
 8009cf0:	f7f7 fa04 	bl	80010fc <__adddf3>
 8009cf4:	4622      	mov	r2, r4
 8009cf6:	462b      	mov	r3, r5
 8009cf8:	f7f7 fbb6 	bl	8001468 <__aeabi_dmul>
 8009cfc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	d14b      	bne.n	8009d9e <atan+0x25e>
 8009d06:	4620      	mov	r0, r4
 8009d08:	4629      	mov	r1, r5
 8009d0a:	f7f7 f9f5 	bl	80010f8 <__aeabi_dsub>
 8009d0e:	e72c      	b.n	8009b6a <atan+0x2a>
 8009d10:	ee10 0a10 	vmov	r0, s0
 8009d14:	4b53      	ldr	r3, [pc, #332]	; (8009e64 <atan+0x324>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	4629      	mov	r1, r5
 8009d1a:	f7f7 f9ed 	bl	80010f8 <__aeabi_dsub>
 8009d1e:	4b51      	ldr	r3, [pc, #324]	; (8009e64 <atan+0x324>)
 8009d20:	4606      	mov	r6, r0
 8009d22:	460f      	mov	r7, r1
 8009d24:	2200      	movs	r2, #0
 8009d26:	4620      	mov	r0, r4
 8009d28:	4629      	mov	r1, r5
 8009d2a:	f7f7 f9e7 	bl	80010fc <__adddf3>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	4630      	mov	r0, r6
 8009d34:	4639      	mov	r1, r7
 8009d36:	f7f7 fcc1 	bl	80016bc <__aeabi_ddiv>
 8009d3a:	f04f 0a01 	mov.w	sl, #1
 8009d3e:	4604      	mov	r4, r0
 8009d40:	460d      	mov	r5, r1
 8009d42:	e764      	b.n	8009c0e <atan+0xce>
 8009d44:	4b49      	ldr	r3, [pc, #292]	; (8009e6c <atan+0x32c>)
 8009d46:	429e      	cmp	r6, r3
 8009d48:	da1d      	bge.n	8009d86 <atan+0x246>
 8009d4a:	ee10 0a10 	vmov	r0, s0
 8009d4e:	4b48      	ldr	r3, [pc, #288]	; (8009e70 <atan+0x330>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	4629      	mov	r1, r5
 8009d54:	f7f7 f9d0 	bl	80010f8 <__aeabi_dsub>
 8009d58:	4b45      	ldr	r3, [pc, #276]	; (8009e70 <atan+0x330>)
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	460f      	mov	r7, r1
 8009d5e:	2200      	movs	r2, #0
 8009d60:	4620      	mov	r0, r4
 8009d62:	4629      	mov	r1, r5
 8009d64:	f7f7 fb80 	bl	8001468 <__aeabi_dmul>
 8009d68:	4b3e      	ldr	r3, [pc, #248]	; (8009e64 <atan+0x324>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f7f7 f9c6 	bl	80010fc <__adddf3>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	4630      	mov	r0, r6
 8009d76:	4639      	mov	r1, r7
 8009d78:	f7f7 fca0 	bl	80016bc <__aeabi_ddiv>
 8009d7c:	f04f 0a02 	mov.w	sl, #2
 8009d80:	4604      	mov	r4, r0
 8009d82:	460d      	mov	r5, r1
 8009d84:	e743      	b.n	8009c0e <atan+0xce>
 8009d86:	462b      	mov	r3, r5
 8009d88:	ee10 2a10 	vmov	r2, s0
 8009d8c:	4939      	ldr	r1, [pc, #228]	; (8009e74 <atan+0x334>)
 8009d8e:	2000      	movs	r0, #0
 8009d90:	f7f7 fc94 	bl	80016bc <__aeabi_ddiv>
 8009d94:	f04f 0a03 	mov.w	sl, #3
 8009d98:	4604      	mov	r4, r0
 8009d9a:	460d      	mov	r5, r1
 8009d9c:	e737      	b.n	8009c0e <atan+0xce>
 8009d9e:	4b36      	ldr	r3, [pc, #216]	; (8009e78 <atan+0x338>)
 8009da0:	4e36      	ldr	r6, [pc, #216]	; (8009e7c <atan+0x33c>)
 8009da2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009da6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009daa:	e9da 2300 	ldrd	r2, r3, [sl]
 8009dae:	f7f7 f9a3 	bl	80010f8 <__aeabi_dsub>
 8009db2:	4622      	mov	r2, r4
 8009db4:	462b      	mov	r3, r5
 8009db6:	f7f7 f99f 	bl	80010f8 <__aeabi_dsub>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009dc2:	f7f7 f999 	bl	80010f8 <__aeabi_dsub>
 8009dc6:	f1bb 0f00 	cmp.w	fp, #0
 8009dca:	4604      	mov	r4, r0
 8009dcc:	460d      	mov	r5, r1
 8009dce:	f6bf aed6 	bge.w	8009b7e <atan+0x3e>
 8009dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dd6:	461d      	mov	r5, r3
 8009dd8:	e6d1      	b.n	8009b7e <atan+0x3e>
 8009dda:	a51d      	add	r5, pc, #116	; (adr r5, 8009e50 <atan+0x310>)
 8009ddc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009de0:	e6cd      	b.n	8009b7e <atan+0x3e>
 8009de2:	bf00      	nop
 8009de4:	f3af 8000 	nop.w
 8009de8:	54442d18 	.word	0x54442d18
 8009dec:	bff921fb 	.word	0xbff921fb
 8009df0:	8800759c 	.word	0x8800759c
 8009df4:	7e37e43c 	.word	0x7e37e43c
 8009df8:	e322da11 	.word	0xe322da11
 8009dfc:	3f90ad3a 	.word	0x3f90ad3a
 8009e00:	24760deb 	.word	0x24760deb
 8009e04:	3fa97b4b 	.word	0x3fa97b4b
 8009e08:	a0d03d51 	.word	0xa0d03d51
 8009e0c:	3fb10d66 	.word	0x3fb10d66
 8009e10:	c54c206e 	.word	0xc54c206e
 8009e14:	3fb745cd 	.word	0x3fb745cd
 8009e18:	920083ff 	.word	0x920083ff
 8009e1c:	3fc24924 	.word	0x3fc24924
 8009e20:	5555550d 	.word	0x5555550d
 8009e24:	3fd55555 	.word	0x3fd55555
 8009e28:	2c6a6c2f 	.word	0x2c6a6c2f
 8009e2c:	bfa2b444 	.word	0xbfa2b444
 8009e30:	52defd9a 	.word	0x52defd9a
 8009e34:	3fadde2d 	.word	0x3fadde2d
 8009e38:	af749a6d 	.word	0xaf749a6d
 8009e3c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009e40:	fe231671 	.word	0xfe231671
 8009e44:	3fbc71c6 	.word	0x3fbc71c6
 8009e48:	9998ebc4 	.word	0x9998ebc4
 8009e4c:	3fc99999 	.word	0x3fc99999
 8009e50:	54442d18 	.word	0x54442d18
 8009e54:	3ff921fb 	.word	0x3ff921fb
 8009e58:	440fffff 	.word	0x440fffff
 8009e5c:	7ff00000 	.word	0x7ff00000
 8009e60:	3fdbffff 	.word	0x3fdbffff
 8009e64:	3ff00000 	.word	0x3ff00000
 8009e68:	3ff2ffff 	.word	0x3ff2ffff
 8009e6c:	40038000 	.word	0x40038000
 8009e70:	3ff80000 	.word	0x3ff80000
 8009e74:	bff00000 	.word	0xbff00000
 8009e78:	0800b5b0 	.word	0x0800b5b0
 8009e7c:	0800b590 	.word	0x0800b590

08009e80 <fabs>:
 8009e80:	ec51 0b10 	vmov	r0, r1, d0
 8009e84:	ee10 2a10 	vmov	r2, s0
 8009e88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e8c:	ec43 2b10 	vmov	d0, r2, r3
 8009e90:	4770      	bx	lr

08009e92 <atan2>:
 8009e92:	f000 b801 	b.w	8009e98 <__ieee754_atan2>
	...

08009e98 <__ieee754_atan2>:
 8009e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e9c:	ec57 6b11 	vmov	r6, r7, d1
 8009ea0:	4273      	negs	r3, r6
 8009ea2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a028 <__ieee754_atan2+0x190>
 8009ea6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009eaa:	4333      	orrs	r3, r6
 8009eac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009eb0:	4573      	cmp	r3, lr
 8009eb2:	ec51 0b10 	vmov	r0, r1, d0
 8009eb6:	ee11 8a10 	vmov	r8, s2
 8009eba:	d80a      	bhi.n	8009ed2 <__ieee754_atan2+0x3a>
 8009ebc:	4244      	negs	r4, r0
 8009ebe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ec2:	4304      	orrs	r4, r0
 8009ec4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009ec8:	4574      	cmp	r4, lr
 8009eca:	ee10 9a10 	vmov	r9, s0
 8009ece:	468c      	mov	ip, r1
 8009ed0:	d907      	bls.n	8009ee2 <__ieee754_atan2+0x4a>
 8009ed2:	4632      	mov	r2, r6
 8009ed4:	463b      	mov	r3, r7
 8009ed6:	f7f7 f911 	bl	80010fc <__adddf3>
 8009eda:	ec41 0b10 	vmov	d0, r0, r1
 8009ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ee2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009ee6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009eea:	4334      	orrs	r4, r6
 8009eec:	d103      	bne.n	8009ef6 <__ieee754_atan2+0x5e>
 8009eee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ef2:	f7ff be25 	b.w	8009b40 <atan>
 8009ef6:	17bc      	asrs	r4, r7, #30
 8009ef8:	f004 0402 	and.w	r4, r4, #2
 8009efc:	ea53 0909 	orrs.w	r9, r3, r9
 8009f00:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009f04:	d107      	bne.n	8009f16 <__ieee754_atan2+0x7e>
 8009f06:	2c02      	cmp	r4, #2
 8009f08:	d060      	beq.n	8009fcc <__ieee754_atan2+0x134>
 8009f0a:	2c03      	cmp	r4, #3
 8009f0c:	d1e5      	bne.n	8009eda <__ieee754_atan2+0x42>
 8009f0e:	a142      	add	r1, pc, #264	; (adr r1, 800a018 <__ieee754_atan2+0x180>)
 8009f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f14:	e7e1      	b.n	8009eda <__ieee754_atan2+0x42>
 8009f16:	ea52 0808 	orrs.w	r8, r2, r8
 8009f1a:	d106      	bne.n	8009f2a <__ieee754_atan2+0x92>
 8009f1c:	f1bc 0f00 	cmp.w	ip, #0
 8009f20:	da5f      	bge.n	8009fe2 <__ieee754_atan2+0x14a>
 8009f22:	a13f      	add	r1, pc, #252	; (adr r1, 800a020 <__ieee754_atan2+0x188>)
 8009f24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f28:	e7d7      	b.n	8009eda <__ieee754_atan2+0x42>
 8009f2a:	4572      	cmp	r2, lr
 8009f2c:	d10f      	bne.n	8009f4e <__ieee754_atan2+0xb6>
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	f104 34ff 	add.w	r4, r4, #4294967295
 8009f34:	d107      	bne.n	8009f46 <__ieee754_atan2+0xae>
 8009f36:	2c02      	cmp	r4, #2
 8009f38:	d84c      	bhi.n	8009fd4 <__ieee754_atan2+0x13c>
 8009f3a:	4b35      	ldr	r3, [pc, #212]	; (800a010 <__ieee754_atan2+0x178>)
 8009f3c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009f40:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009f44:	e7c9      	b.n	8009eda <__ieee754_atan2+0x42>
 8009f46:	2c02      	cmp	r4, #2
 8009f48:	d848      	bhi.n	8009fdc <__ieee754_atan2+0x144>
 8009f4a:	4b32      	ldr	r3, [pc, #200]	; (800a014 <__ieee754_atan2+0x17c>)
 8009f4c:	e7f6      	b.n	8009f3c <__ieee754_atan2+0xa4>
 8009f4e:	4573      	cmp	r3, lr
 8009f50:	d0e4      	beq.n	8009f1c <__ieee754_atan2+0x84>
 8009f52:	1a9b      	subs	r3, r3, r2
 8009f54:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009f58:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f5c:	da1e      	bge.n	8009f9c <__ieee754_atan2+0x104>
 8009f5e:	2f00      	cmp	r7, #0
 8009f60:	da01      	bge.n	8009f66 <__ieee754_atan2+0xce>
 8009f62:	323c      	adds	r2, #60	; 0x3c
 8009f64:	db1e      	blt.n	8009fa4 <__ieee754_atan2+0x10c>
 8009f66:	4632      	mov	r2, r6
 8009f68:	463b      	mov	r3, r7
 8009f6a:	f7f7 fba7 	bl	80016bc <__aeabi_ddiv>
 8009f6e:	ec41 0b10 	vmov	d0, r0, r1
 8009f72:	f7ff ff85 	bl	8009e80 <fabs>
 8009f76:	f7ff fde3 	bl	8009b40 <atan>
 8009f7a:	ec51 0b10 	vmov	r0, r1, d0
 8009f7e:	2c01      	cmp	r4, #1
 8009f80:	d013      	beq.n	8009faa <__ieee754_atan2+0x112>
 8009f82:	2c02      	cmp	r4, #2
 8009f84:	d015      	beq.n	8009fb2 <__ieee754_atan2+0x11a>
 8009f86:	2c00      	cmp	r4, #0
 8009f88:	d0a7      	beq.n	8009eda <__ieee754_atan2+0x42>
 8009f8a:	a319      	add	r3, pc, #100	; (adr r3, 8009ff0 <__ieee754_atan2+0x158>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	f7f7 f8b2 	bl	80010f8 <__aeabi_dsub>
 8009f94:	a318      	add	r3, pc, #96	; (adr r3, 8009ff8 <__ieee754_atan2+0x160>)
 8009f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9a:	e014      	b.n	8009fc6 <__ieee754_atan2+0x12e>
 8009f9c:	a118      	add	r1, pc, #96	; (adr r1, 800a000 <__ieee754_atan2+0x168>)
 8009f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fa2:	e7ec      	b.n	8009f7e <__ieee754_atan2+0xe6>
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	e7e9      	b.n	8009f7e <__ieee754_atan2+0xe6>
 8009faa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fae:	4619      	mov	r1, r3
 8009fb0:	e793      	b.n	8009eda <__ieee754_atan2+0x42>
 8009fb2:	a30f      	add	r3, pc, #60	; (adr r3, 8009ff0 <__ieee754_atan2+0x158>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f7f7 f89e 	bl	80010f8 <__aeabi_dsub>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	a10d      	add	r1, pc, #52	; (adr r1, 8009ff8 <__ieee754_atan2+0x160>)
 8009fc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fc6:	f7f7 f897 	bl	80010f8 <__aeabi_dsub>
 8009fca:	e786      	b.n	8009eda <__ieee754_atan2+0x42>
 8009fcc:	a10a      	add	r1, pc, #40	; (adr r1, 8009ff8 <__ieee754_atan2+0x160>)
 8009fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fd2:	e782      	b.n	8009eda <__ieee754_atan2+0x42>
 8009fd4:	a10c      	add	r1, pc, #48	; (adr r1, 800a008 <__ieee754_atan2+0x170>)
 8009fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fda:	e77e      	b.n	8009eda <__ieee754_atan2+0x42>
 8009fdc:	2000      	movs	r0, #0
 8009fde:	2100      	movs	r1, #0
 8009fe0:	e77b      	b.n	8009eda <__ieee754_atan2+0x42>
 8009fe2:	a107      	add	r1, pc, #28	; (adr r1, 800a000 <__ieee754_atan2+0x168>)
 8009fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fe8:	e777      	b.n	8009eda <__ieee754_atan2+0x42>
 8009fea:	bf00      	nop
 8009fec:	f3af 8000 	nop.w
 8009ff0:	33145c07 	.word	0x33145c07
 8009ff4:	3ca1a626 	.word	0x3ca1a626
 8009ff8:	54442d18 	.word	0x54442d18
 8009ffc:	400921fb 	.word	0x400921fb
 800a000:	54442d18 	.word	0x54442d18
 800a004:	3ff921fb 	.word	0x3ff921fb
 800a008:	54442d18 	.word	0x54442d18
 800a00c:	3fe921fb 	.word	0x3fe921fb
 800a010:	0800b5d0 	.word	0x0800b5d0
 800a014:	0800b5e8 	.word	0x0800b5e8
 800a018:	54442d18 	.word	0x54442d18
 800a01c:	c00921fb 	.word	0xc00921fb
 800a020:	54442d18 	.word	0x54442d18
 800a024:	bff921fb 	.word	0xbff921fb
 800a028:	7ff00000 	.word	0x7ff00000

0800a02c <_init>:
 800a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02e:	bf00      	nop
 800a030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a032:	bc08      	pop	{r3}
 800a034:	469e      	mov	lr, r3
 800a036:	4770      	bx	lr

0800a038 <_fini>:
 800a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03a:	bf00      	nop
 800a03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a03e:	bc08      	pop	{r3}
 800a040:	469e      	mov	lr, r3
 800a042:	4770      	bx	lr
